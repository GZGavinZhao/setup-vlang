// Generated by dart2js (fast startup emitter, strong), the Dart to JavaScript compiler version: 2.13.4.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key))
        to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == "function")
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    mixinProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazyOld(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel)
        holder[name] = initializer();
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel)
          H.throwLateInitializationError(name);
        holder[name] = value;
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
    var cache = null;
    return isStatic ? function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
      return cache;
    } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
  }
  var typesOffset = 0;
  function installTearOff(container, getterName, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var funs = [];
    for (var i = 0; i < funsOrNames.length; i++) {
      var fun = funsOrNames[i];
      if (typeof fun == "string")
        fun = container[fun];
      fun.$callName = callNames[i];
      funs.push(fun);
    }
    var fun = funs[0];
    fun.$requiredArgCount = requiredParameterCount;
    fun.$defaultValues = optionalParameterDefaultValues;
    var reflectionInfo = funType;
    if (typeof reflectionInfo == "number")
      reflectionInfo += typesOffset;
    var name = funsOrNames[0];
    fun.$stubName = name;
    var getterFunction = tearOff(funs, applyIndex || 0, reflectionInfo, isStatic, name, isIntercepted);
    container[getterName] = getterFunction;
    if (isStatic)
      fun.$tearOff = getterFunction;
  }
  function installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, lazyOld: lazyOld, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  function getGlobalFromName(name) {
    for (var i = 0; i < holders.length; i++) {
      if (holders[i] == C)
        continue;
      if (holders[i][name])
        return holders[i][name];
    }
  }
  var C = {},
  H = {JS_CONST: function JS_CONST() {
    },
    _CryptoUtils_bytesToBase64: function(bytes) {
      var remainderLength, chunkLength, t2, t3, out, j, i, c, i0, t4, x, j0, y,
        _s64_ = string$.ABCDEF,
        t1 = J.getInterceptor$asx(bytes),
        len = t1.get$length(bytes);
      if (len === 0)
        return "";
      remainderLength = len % 3;
      chunkLength = len - remainderLength;
      t2 = C.JSInt_methods._tdivFast$1(len, 3);
      t3 = remainderLength > 0 ? 4 : 0;
      out = P.List_List$filled(t2 * 4 + t3, 0, false, type$.int);
      for (j = 0, i = 0, c = 0; i < chunkLength; i = i0) {
        i0 = i + 1;
        t2 = t1.$index(bytes, i);
        if (typeof t2 !== "number")
          return t2.$shl();
        i = i0 + 1;
        t3 = t1.$index(bytes, i0);
        if (typeof t3 !== "number")
          return t3.$shl();
        i0 = i + 1;
        t4 = t1.$index(bytes, i);
        if (typeof t4 !== "number")
          return H.iae(t4);
        x = t2 << 16 & 16777215 | t3 << 8 & 16777215 | t4;
        j0 = j + 1;
        C.JSArray_methods.$indexSet(out, j, C.JSString_methods._codeUnitAt$1(_s64_, x >>> 18));
        j = j0 + 1;
        C.JSArray_methods.$indexSet(out, j0, C.JSString_methods._codeUnitAt$1(_s64_, x >>> 12 & 63));
        j0 = j + 1;
        C.JSArray_methods.$indexSet(out, j, C.JSString_methods._codeUnitAt$1(_s64_, x >>> 6 & 63));
        j = j0 + 1;
        C.JSArray_methods.$indexSet(out, j0, C.JSString_methods._codeUnitAt$1(_s64_, x & 63));
      }
      if (remainderLength === 1) {
        x = t1.$index(bytes, i);
        j0 = j + 1;
        C.JSArray_methods.$indexSet(out, j, C.JSString_methods._codeUnitAt$1(_s64_, C.JSInt_methods._shrOtherPositive$1(x, 2)));
        j = j0 + 1;
        C.JSArray_methods.$indexSet(out, j0, C.JSString_methods._codeUnitAt$1(_s64_, x << 4 & 63));
        C.JSArray_methods.$indexSet(out, j, 61);
        C.JSArray_methods.$indexSet(out, j + 1, 61);
      } else if (remainderLength === 2) {
        x = t1.$index(bytes, i);
        y = t1.$index(bytes, i + 1);
        j0 = j + 1;
        C.JSArray_methods.$indexSet(out, j, C.JSString_methods._codeUnitAt$1(_s64_, C.JSInt_methods._shrOtherPositive$1(x, 2)));
        j = j0 + 1;
        C.JSArray_methods.$indexSet(out, j0, C.JSString_methods._codeUnitAt$1(_s64_, (x << 4 | C.JSInt_methods._shrOtherPositive$1(y, 4)) & 63));
        C.JSArray_methods.$indexSet(out, j, C.JSString_methods._codeUnitAt$1(_s64_, y << 2 & 63));
        C.JSArray_methods.$indexSet(out, j + 1, 61);
      }
      return P.String_String$fromCharCodes(out, 0, null);
    },
    HttpClient_HttpClient: function() {
      var t1, t2, t3, t4;
      H.HttpOverrides_current();
      t1 = P.HashMap_HashMap(type$.String, type$._ConnectionTarget);
      t2 = H.setRuntimeTypeInfo([], type$.JSArray__Credentials);
      t3 = H.setRuntimeTypeInfo([], type$.JSArray__ProxyCredentials);
      t4 = $.$get$Platform__version();
      return new H._HttpClient(t1, t2, t3, null, "Dart/" + H.S(t4.substring$2(t4, 0, t4.indexOf$2(t4, ".", t4.indexOf$1(0, ".").$add(0, 1)))) + " (dart:io)");
    },
    HttpClient_findProxyFromEnvironment: function(url, environment) {
      var t1;
      type$.nullable_Map_String_String._as(environment);
      H.HttpOverrides_current();
      t1 = H._HttpClient__findProxyFromEnvironment(url, environment);
      return t1;
    },
    HttpException$: function(message, uri) {
      return new H.HttpException(message, uri);
    },
    HttpDate_format: function(date) {
      var t2,
        d = date.toUtc$0(),
        t1 = H.Primitives_getWeekday(d) - 1;
      if (t1 < 0 || t1 >= 7)
        return H.ioore(C.List_ECn, t1);
      t1 = "" + C.List_ECn[t1] + ", ";
      t1 = t1 + (H.Primitives_getDay(d) <= 9 ? "0" : "") + C.JSInt_methods.toString$0(H.Primitives_getDay(d)) + " ";
      t2 = H.Primitives_getMonth(d) - 1;
      if (t2 < 0 || t2 >= 12)
        return H.ioore(C.List_h8w, t2);
      t2 = t1 + C.List_h8w[t2] + " " + C.JSInt_methods.toString$0(H.Primitives_getYear(d));
      t1 = t2 + (H.Primitives_getHours(d) <= 9 ? " 0" : " ") + C.JSInt_methods.toString$0(H.Primitives_getHours(d));
      t1 = t1 + (H.Primitives_getMinutes(d) <= 9 ? ":0" : ":") + C.JSInt_methods.toString$0(H.Primitives_getMinutes(d));
      t1 = t1 + (H.Primitives_getSeconds(d) <= 9 ? ":0" : ":") + C.JSInt_methods.toString$0(H.Primitives_getSeconds(d)) + " GMT";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    HttpDate__parseCookieDate: function(date) {
      var error, isEnd, isDelimiter, isNonDelimiter, isDigit, getMonth, toInt, tokens, t1, t2, start, yearStr, monthStr, dayOfMonthStr, timeStr, _i, token, t3, year, dayOfMonth, timeList, hour, minute, second, _null = null, _box_0 = {};
      _box_0.position = 0;
      error = new H.HttpDate__parseCookieDate_error(date);
      isEnd = new H.HttpDate__parseCookieDate_isEnd(_box_0, date);
      isDelimiter = new H.HttpDate__parseCookieDate_isDelimiter();
      isNonDelimiter = new H.HttpDate__parseCookieDate_isNonDelimiter();
      isDigit = new H.HttpDate__parseCookieDate_isDigit();
      getMonth = new H.HttpDate__parseCookieDate_getMonth();
      toInt = new H.HttpDate__parseCookieDate_toInt(isDigit);
      tokens = [];
      for (t1 = date.length; !H.boolConversionCheck(isEnd.call$0());) {
        while (true) {
          if (!H.boolConversionCheck(isEnd.call$0())) {
            t2 = _box_0.position;
            if (t2 >= t1)
              return H.ioore(date, t2);
            t2 = H.boolConversionCheck(isDelimiter.call$1(date[t2]));
          } else
            t2 = false;
          if (!t2)
            break;
          ++_box_0.position;
        }
        start = _box_0.position;
        while (true) {
          if (!H.boolConversionCheck(isEnd.call$0())) {
            t2 = _box_0.position;
            if (t2 >= t1)
              return H.ioore(date, t2);
            t2 = H.boolConversionCheck(isNonDelimiter.call$1(date[t2]));
          } else
            t2 = false;
          if (!t2)
            break;
          ++_box_0.position;
        }
        tokens.push(C.JSString_methods.substring$2(date, start, _box_0.position).toLowerCase());
        while (true) {
          if (!H.boolConversionCheck(isEnd.call$0())) {
            t2 = _box_0.position;
            if (t2 >= t1)
              return H.ioore(date, t2);
            t2 = H.boolConversionCheck(isDelimiter.call$1(date[t2]));
          } else
            t2 = false;
          if (!t2)
            break;
          ++_box_0.position;
        }
      }
      for (t1 = tokens.length, yearStr = _null, monthStr = yearStr, dayOfMonthStr = monthStr, timeStr = dayOfMonthStr, _i = 0; _i < tokens.length; tokens.length === t1 || (0, H.throwConcurrentModificationError)(tokens), ++_i) {
        token = tokens[_i];
        t2 = token.length;
        if (t2 < 1)
          continue;
        if (timeStr == null)
          if (t2 >= 5)
            if (H.boolConversionCheck(isDigit.call$1(token[0]))) {
              t3 = token[1];
              if (t3 !== ":")
                t3 = H.boolConversionCheck(isDigit.call$1(t3)) && token[2] === ":";
              else
                t3 = true;
            } else
              t3 = false;
          else
            t3 = false;
        else
          t3 = false;
        if (t3)
          timeStr = token;
        else if (dayOfMonthStr == null && H.boolConversionCheck(isDigit.call$1(token[0])))
          dayOfMonthStr = token;
        else {
          if (monthStr == null) {
            t3 = getMonth.call$1(token);
            if (typeof t3 !== "number")
              return t3.$ge();
            t3 = t3 >= 0;
          } else
            t3 = false;
          if (t3)
            monthStr = token;
          else if (yearStr == null && t2 >= 2 && H.boolConversionCheck(isDigit.call$1(token[0])) && H.boolConversionCheck(isDigit.call$1(token[1])))
            yearStr = token;
        }
      }
      if (timeStr == null || dayOfMonthStr == null || monthStr == null || yearStr == null)
        error.call$0();
      year = toInt.call$1(yearStr);
      if (year >= 70 && year <= 99)
        year += 1900;
      else if (year >= 0 && year <= 69)
        year += 2000;
      if (year < 1601)
        error.call$0();
      dayOfMonth = toInt.call$1(dayOfMonthStr);
      if (dayOfMonth < 1 || dayOfMonth > 31)
        error.call$0();
      t1 = getMonth.call$1(monthStr);
      if (typeof t1 !== "number")
        return t1.$add();
      timeList = timeStr.split(":");
      t2 = timeList.length;
      if (t2 !== 3)
        error.call$0();
      if (0 >= t2)
        return H.ioore(timeList, 0);
      hour = toInt.call$1(timeList[0]);
      if (1 >= t2)
        return H.ioore(timeList, 1);
      minute = toInt.call$1(timeList[1]);
      if (2 >= t2)
        return H.ioore(timeList, 2);
      second = toInt.call$1(timeList[2]);
      if (hour > 23)
        error.call$0();
      if (minute > 59)
        error.call$0();
      if (second > 59)
        error.call$0();
      t1 = H.Primitives_valueFromDecomposedDate(year, t1 + 1, dayOfMonth, hour, minute, second, 0, true);
      if (!H._isInt(t1))
        H.throwExpression(H.argumentErrorValue(t1));
      return new P.DateTime(t1, true);
    },
    _HttpHeaders$: function(protocolVersion, defaultPortForScheme, initialHeaders) {
      var t1 = new H._HttpHeaders(P.HashMap_HashMap(type$.String, type$.List_String), protocolVersion, defaultPortForScheme);
      t1._HttpHeaders$3$defaultPortForScheme$initialHeaders(protocolVersion, defaultPortForScheme, initialHeaders);
      return t1;
    },
    _HttpHeaders__validateField: function(field) {
      var t1, i, t2;
      for (t1 = field.length, i = 0; i < t1; ++i) {
        t2 = C.JSString_methods._codeUnitAt$1(field, i);
        if (!(t2 > 31 && t2 < 128 && !C.List_NUU[t2]))
          throw H.wrapException(P.FormatException$("Invalid HTTP header field name: " + C.C_JsonCodec.encode$1(field), field, i));
      }
      return field.toLowerCase();
    },
    _HttpHeaders__validateValue: function(value) {
      var t1, i, t2;
      if (typeof value != "string")
        return value;
      for (t1 = value.length, i = 0; i < t1; ++i) {
        t2 = C.JSString_methods._codeUnitAt$1(value, i);
        if (!(t2 > 31 && t2 < 128 || t2 === 9))
          throw H.wrapException(P.FormatException$("Invalid HTTP header field value: " + C.C_JsonCodec.encode$1(value), value, i));
      }
      return value;
    },
    _HeaderValue$: function() {
      var t1 = new H._HeaderValue();
      t1._HeaderValue$2("", C.Map_empty);
      return t1;
    },
    _HeaderValue_parse: function(value, parameterSeparator) {
      var result = H._HeaderValue$();
      result._parse$4(value, parameterSeparator, null, false);
      return result;
    },
    _HeaderValue__isToken: function(token) {
      var i, codeUnit,
        t1 = token.length;
      if (t1 === 0)
        return false;
      for (i = 0; i < t1; ++i) {
        codeUnit = C.JSString_methods._codeUnitAt$1(token, i);
        if (codeUnit <= 32 || codeUnit >= 127 || C.JSString_methods.indexOf$1('"(),/:;<=>?@[]{}', token[i]) >= 0)
          return false;
      }
      return true;
    },
    _Cookie__validateName: function(newName) {
      var t1, i, codeUnit;
      for (t1 = newName.length, i = 0; i < t1; ++i) {
        codeUnit = C.JSString_methods._codeUnitAt$1(newName, i);
        if (codeUnit <= 32 || codeUnit >= 127 || C.JSArray_methods.indexOf$1(C.List_A8J, newName[i]) >= 0)
          throw H.wrapException(P.FormatException$("Invalid character in cookie name, code unit: '" + codeUnit + "'", newName, i));
      }
      return newName;
    },
    _Cookie__validateValue: function(newValue) {
      var start, i, codeUnit, t1,
        end = newValue.length;
      if (2 <= end && C.JSString_methods._codeUnitAt$1(newValue, 0) === 34 && C.JSString_methods.codeUnitAt$1(newValue, end - 1) === 34) {
        --end;
        start = 1;
      } else
        start = 0;
      for (i = start; i < end; ++i) {
        codeUnit = C.JSString_methods._codeUnitAt$1(newValue, i);
        if (codeUnit !== 33)
          if (!(codeUnit >= 35 && codeUnit <= 43))
            if (!(codeUnit >= 45 && codeUnit <= 58))
              if (!(codeUnit >= 60 && codeUnit <= 91))
                t1 = codeUnit >= 93 && codeUnit <= 126;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (!t1)
          throw H.wrapException(P.FormatException$("Invalid character in cookie value, code unit: '" + codeUnit + "'", newValue, i));
      }
      return newValue;
    },
    _Cookie__validatePath: function(path) {
      var t1, i, codeUnit;
      for (t1 = path.length, i = 0; i < t1; ++i) {
        codeUnit = C.JSString_methods._codeUnitAt$1(path, i);
        if (codeUnit < 32 || codeUnit >= 127 || codeUnit === 59)
          throw H.wrapException(P.FormatException$("Invalid character in cookie path, code unit: '" + codeUnit + "'", null, null));
      }
    },
    HttpProfiler_startRequest: function(method, uri, parentRequest) {
      var t5, data,
        t1 = parentRequest == null ? null : parentRequest._timeline,
        t2 = type$.JSArray_int,
        t3 = H.setRuntimeTypeInfo([], t2),
        t4 = H.setRuntimeTypeInfo([], type$.JSArray__HttpProfileEvent);
      t2 = H.setRuntimeTypeInfo([], t2);
      t5 = H.setRuntimeTypeInfo([], type$.JSArray__AsyncBlock);
      t1 = new P.TimelineTask(t1, "HTTP/client", 0, t5);
      data = new H._HttpProfileData(method.toUpperCase(), uri, t3, t4, t2, t1);
      if (t5.length > 0)
        H.throwExpression(P.StateError$("You cannot pass a TimelineTask without finishing all started operations"));
      data.___HttpProfileData_id = 0;
      data.___HttpProfileData_requestStartTimestamp = P._getTraceClock();
      t2 = type$.dynamic;
      t1.start$2$arguments(0, "HTTP CLIENT " + method, P.LinkedHashMap_LinkedHashMap$_literal(["method", method.toUpperCase(), "uri", uri.toString$0(0)], t2, t2));
      P._getTraceClock();
      $.HttpProfiler__profile.$indexSet(0, data.get$id(data), data);
      return data;
    },
    _CopyingBytesBuilder__pow2roundup: function(x) {
      --x;
      x |= C.JSInt_methods._shrOtherPositive$1(x, 1);
      x |= x >>> 2;
      x |= x >>> 4;
      x |= x >>> 8;
      return ((x | x >>> 16) >>> 0) + 1;
    },
    _HttpClientResponse__getCompressionState: function(httpClient, headers) {
      if (headers.value$1(0, "content-encoding") === "gzip")
        return C.HttpClientResponseCompressionState_1;
      else
        return C.HttpClientResponseCompressionState_0;
    },
    _HttpClientRequest$: function(outgoing, uri, method, _proxy, _httpClient, _httpClientConnection, _profileData) {
      var t1 = H.setRuntimeTypeInfo([], type$.JSArray_Cookie),
        t2 = $.Zone__current,
        t3 = H.setRuntimeTypeInfo([], type$.JSArray_RedirectInfo);
      t1 = outgoing.outbound = new H._HttpClientRequest(method, uri, t1, _httpClient, _httpClientConnection, _profileData, new P._AsyncCompleter(new P._Future(t2, type$._Future_HttpClientResponse), type$._AsyncCompleter_HttpClientResponse), _proxy, t3, uri, outgoing, H._HttpHeaders$("1.1", uri.get$scheme() === "https" ? 443 : 80, null), C.C_Latin1Codec, _profileData, outgoing, new P._AsyncCompleter(new P._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void));
      t1._HttpClientRequest$7(outgoing, uri, method, _proxy, _httpClient, _httpClientConnection, _profileData);
      return t1;
    },
    _HttpClientConnection$: function(key, _socket, _httpClient, _proxyTunnel, _context) {
      var t1 = new H._HttpClientConnection(key, _socket, _proxyTunnel, _context, H._HttpParser$_(false), _httpClient);
      t1._HttpClientConnection$5(key, _socket, _httpClient, _proxyTunnel, _context);
      return t1;
    },
    _HttpClient__findProxyFromEnvironment: function(url, environment) {
      var t2, noProxy, proxyCfg, proxy,
        t1 = new H._HttpClient__findProxyFromEnvironment_checkProxy();
      environment = $.$get$_HttpClient__platformEnvironmentCache();
      t2 = environment._collection$_map;
      noProxy = t2.$index(0, "no_proxy");
      if (noProxy == null)
        noProxy = t2.$index(0, "NO_PROXY");
      proxyCfg = new H._HttpClient__findProxyFromEnvironment_checkNoProxy(url).call$1(noProxy);
      if (proxyCfg != null)
        return proxyCfg;
      if (url.get$scheme() === "http") {
        proxy = t2.$index(0, "http_proxy");
        proxyCfg = t1.call$1(proxy == null ? t2.$index(0, "HTTP_PROXY") : proxy);
        if (proxyCfg != null)
          return proxyCfg;
      } else if (url.get$scheme() === "https") {
        proxy = t2.$index(0, "https_proxy");
        proxyCfg = t1.call$1(proxy == null ? t2.$index(0, "HTTPS_PROXY") : proxy);
        if (proxyCfg != null)
          return proxyCfg;
      }
      return "DIRECT";
    },
    _ProxyConfiguration$: function(configuration) {
      var t1 = new H._ProxyConfiguration(H.setRuntimeTypeInfo([], type$.JSArray__Proxy));
      t1._ProxyConfiguration$1(configuration);
      return t1;
    },
    _HttpConnectionInfo_create: function(socket) {
      var t1, t2, t3, exception;
      try {
        t1 = socket.get$remoteAddress();
        t2 = socket.get$remotePort();
        t3 = socket.get$port(socket);
        return new H._HttpConnectionInfo(t1, t2, t3);
      } catch (exception) {
        H.unwrapException(exception);
      }
      return null;
    },
    _AuthenticationScheme__AuthenticationScheme$fromString: function(scheme) {
      if (scheme.toLowerCase() === "basic")
        return C.C__AuthenticationScheme;
      if (scheme.toLowerCase() === "digest")
        return C.C__AuthenticationScheme0;
      return C.C__AuthenticationScheme1;
    },
    _HttpParser$_: function(_requestParser) {
      var t1 = type$.JSArray_int;
      t1 = new H._HttpParser(false, H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t1), P.StreamController_StreamController(true, type$._HttpIncoming));
      t1._HttpParser$_$1(false);
      return t1;
    },
    _HttpParser__tokenizeFieldValue: function(headerValue) {
      var t1, start, index, t2,
        tokens = H.setRuntimeTypeInfo([], type$.JSArray_String);
      for (t1 = headerValue.length, start = 0, index = 0; index < t1;) {
        t2 = headerValue[index];
        if (t2 === ",") {
          C.JSArray_methods.add$1(tokens, C.JSString_methods.substring$2(headerValue, start, index));
          start = index + 1;
        } else if (t2 === " " || t2 === "\t")
          ++start;
        ++index;
      }
      C.JSArray_methods.add$1(tokens, C.JSString_methods.substring$2(headerValue, start, index));
      return tokens;
    },
    _HttpParser__caseInsensitiveCompare: function(expected, value) {
      var i, t4, t5,
        t1 = expected._string,
        t2 = t1.length,
        t3 = J.getInterceptor$asx(value);
      if (t2 !== t3.get$length(value))
        return false;
      for (i = 0; i < t2; ++i) {
        t4 = C.JSString_methods._codeUnitAt$1(t1, i);
        t5 = t3.$index(value, i);
        if (t4 !== ((t5 - 65 & 127) < 26 ? (t5 | 32) >>> 0 : t5))
          return false;
      }
      return true;
    },
    HttpOverrides_current: function() {
      $.$get$_httpOverridesToken();
      return null;
    },
    HttpClientResponseCompressionState: function HttpClientResponseCompressionState(t0) {
      this.__http$_name = t0;
    },
    HttpException: function HttpException(t0, t1) {
      this.message = t0;
      this.uri = t1;
    },
    RedirectException: function RedirectException(t0) {
      this.message = t0;
    },
    HttpDate__parseCookieDate_error: function HttpDate__parseCookieDate_error(t0) {
      this.date = t0;
    },
    HttpDate__parseCookieDate_isEnd: function HttpDate__parseCookieDate_isEnd(t0, t1) {
      this._box_0 = t0;
      this.date = t1;
    },
    HttpDate__parseCookieDate_isDelimiter: function HttpDate__parseCookieDate_isDelimiter() {
    },
    HttpDate__parseCookieDate_isNonDelimiter: function HttpDate__parseCookieDate_isNonDelimiter() {
    },
    HttpDate__parseCookieDate_isDigit: function HttpDate__parseCookieDate_isDigit() {
    },
    HttpDate__parseCookieDate_getMonth: function HttpDate__parseCookieDate_getMonth() {
    },
    HttpDate__parseCookieDate_toInt: function HttpDate__parseCookieDate_toInt(t0) {
      this.isDigit = t0;
    },
    _HttpHeaders: function _HttpHeaders(t0, t1, t2) {
      var _ = this;
      _._headers = t0;
      _._originalHeaderNames = null;
      _.protocolVersion = t1;
      _._mutable = true;
      _._contentLength = -1;
      _._persistentConnection = true;
      _._chunkedTransferEncoding = false;
      _._port = _._host = null;
      _._defaultPortForScheme = t2;
    },
    _HttpHeaders_forEach_closure: function _HttpHeaders_forEach_closure(t0, t1) {
      this.$this = t0;
      this.action = t1;
    },
    _HttpHeaders__build_closure: function _HttpHeaders__build_closure(t0, t1) {
      this.$this = t0;
      this.builder = t1;
    },
    _HttpHeaders_toString_closure: function _HttpHeaders_toString_closure(t0, t1) {
      this.$this = t0;
      this.sb = t1;
    },
    _HeaderValue: function _HeaderValue() {
      this.__http$_value = "";
      this._unmodifiableParameters = this._parameters = null;
    },
    _HeaderValue_toString_closure: function _HeaderValue_toString_closure(t0) {
      this.sb = t0;
    },
    _HeaderValue__parse_done: function _HeaderValue__parse_done(t0, t1) {
      this._box_0 = t0;
      this.s = t1;
    },
    _HeaderValue__parse_skipWS: function _HeaderValue__parse_skipWS(t0, t1, t2) {
      this._box_0 = t0;
      this.done = t1;
      this.s = t2;
    },
    _HeaderValue__parse_parseValue: function _HeaderValue__parse_parseValue(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _.done = t1;
      _.s = t2;
      _.valueSeparator = t3;
      _.parameterSeparator = t4;
    },
    _HeaderValue__parse_expect: function _HeaderValue__parse_expect(t0, t1, t2) {
      this._box_0 = t0;
      this.done = t1;
      this.s = t2;
    },
    _HeaderValue__parse_maybeExpect: function _HeaderValue__parse_maybeExpect(t0, t1, t2) {
      this._box_0 = t0;
      this.done = t1;
      this.s = t2;
    },
    _HeaderValue__parse_parseParameters: function _HeaderValue__parse_parseParameters(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.done = t2;
      _.s = t3;
      _.parameterSeparator = t4;
      _.valueSeparator = t5;
      _.preserveBackslash = t6;
      _.parseValue = t7;
      _.skipWS = t8;
      _.maybeExpect = t9;
      _.expect = t10;
    },
    _HeaderValue__parse_parseParameters_parseParameterName: function _HeaderValue__parse_parseParameters_parseParameterName(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _.done = t1;
      _.s = t2;
      _.parameterSeparator = t3;
      _.valueSeparator = t4;
    },
    _HeaderValue__parse_parseParameters_parseParameterValue: function _HeaderValue__parse_parseParameters_parseParameterValue(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _.done = t1;
      _.s = t2;
      _.preserveBackslash = t3;
      _.parseValue = t4;
    },
    _ContentType: function _ContentType() {
    },
    _Cookie: function _Cookie(t0, t1, t2) {
      var _ = this;
      _.__http$_name = t0;
      _.__http$_value = t1;
      _.__http$_path = _.domain = _.maxAge = _.expires = null;
      _.httpOnly = t2;
      _.secure = false;
    },
    _Cookie__parseSetCookieValue_done: function _Cookie__parseSetCookieValue_done(t0, t1) {
      this._box_0 = t0;
      this.s = t1;
    },
    _Cookie__parseSetCookieValue_parseName: function _Cookie__parseSetCookieValue_parseName(t0, t1, t2) {
      this._box_0 = t0;
      this.done = t1;
      this.s = t2;
    },
    _Cookie__parseSetCookieValue_parseValue: function _Cookie__parseSetCookieValue_parseValue(t0, t1, t2) {
      this._box_0 = t0;
      this.done = t1;
      this.s = t2;
    },
    _Cookie__parseSetCookieValue_parseAttributes: function _Cookie__parseSetCookieValue_parseAttributes(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.done = t2;
      _.s = t3;
    },
    _Cookie__parseSetCookieValue_parseAttributes_parseAttributeName: function _Cookie__parseSetCookieValue_parseAttributes_parseAttributeName(t0, t1, t2) {
      this._box_0 = t0;
      this.done = t1;
      this.s = t2;
    },
    _Cookie__parseSetCookieValue_parseAttributes_parseAttributeValue: function _Cookie__parseSetCookieValue_parseAttributes_parseAttributeValue(t0, t1, t2) {
      this._box_0 = t0;
      this.done = t1;
      this.s = t2;
    },
    _HttpProfileEvent: function _HttpProfileEvent(t0, t1, t2) {
      this.timestamp = t0;
      this.name = t1;
      this.$arguments = t2;
    },
    _HttpProfileData: function _HttpProfileData(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.requestInProgress = true;
      _.___HttpProfileData_id = _.responseInProgress = null;
      _.method = t0;
      _.uri = t1;
      _.proxyDetails = _.requestDetails = _.___HttpProfileData_requestEndTimestamp = _.___HttpProfileData_requestStartTimestamp = null;
      _.requestBody = t2;
      _.requestError = null;
      _.requestEvents = t3;
      _.responseDetails = _.___HttpProfileData_responseEndTimestamp = _.___HttpProfileData_responseStartTimestamp = null;
      _.responseBody = t4;
      _.responseError = null;
      _._timeline = t5;
      _.___HttpProfileData__responseTimeline = null;
    },
    _HttpProfileData_formatHeaders_closure: function _HttpProfileData_formatHeaders_closure(t0) {
      this.headers = t0;
    },
    _HttpProfileData_startResponse_formatRedirectInfo: function _HttpProfileData_startResponse_formatRedirectInfo(t0) {
      this.response = t0;
    },
    _CopyingBytesBuilder: function _CopyingBytesBuilder(t0) {
      this.__http$_length = 0;
      this.__http$_buffer = t0;
    },
    _HttpIncoming: function _HttpIncoming(t0, t1, t2) {
      var _ = this;
      _._dataCompleter = t0;
      _.__http$_stream = t1;
      _.headers = t2;
      _.upgraded = false;
      _.uri = _.reasonPhrase = _.statusCode = null;
      _.hasSubscriber = false;
    },
    _HttpIncoming_listen_closure: function _HttpIncoming_listen_closure(t0) {
      this.$this = t0;
    },
    _HttpInboundMessageListInt: function _HttpInboundMessageListInt() {
    },
    _HttpClientResponse: function _HttpClientResponse(t0, t1, t2, t3, t4) {
      var _ = this;
      _._httpClient = t0;
      _._httpRequest = t1;
      _.compressionState = t2;
      _._profileData = t3;
      _._incoming = t4;
      _._cookies = null;
    },
    _HttpClientResponse_redirect_closure: function _HttpClientResponse_redirect_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _HttpClientResponse_listen_closure: function _HttpClientResponse_listen_closure(t0) {
      this.$this = t0;
    },
    _HttpClientResponse_listen_closure1: function _HttpClientResponse_listen_closure1(t0, t1) {
      this.$this = t0;
      this.onError = t1;
    },
    _HttpClientResponse_listen_closure0: function _HttpClientResponse_listen_closure0(t0, t1) {
      this.$this = t0;
      this.onDone = t1;
    },
    _HttpClientResponse__authenticate_retry: function _HttpClientResponse__authenticate_retry(t0) {
      this.$this = t0;
    },
    _HttpClientResponse__authenticate_retry_closure: function _HttpClientResponse__authenticate_retry_closure(t0) {
      this.$this = t0;
    },
    _HttpClientResponse__authenticate_retry__closure: function _HttpClientResponse__authenticate_retry__closure() {
    },
    _HttpClientResponse__authenticate_authChallenge: function _HttpClientResponse__authenticate_authChallenge(t0, t1) {
      this.$this = t0;
      this.proxyAuth = t1;
    },
    _HttpClientResponse__authenticate_findCredentials: function _HttpClientResponse__authenticate_findCredentials(t0, t1) {
      this.$this = t0;
      this.proxyAuth = t1;
    },
    _HttpClientResponse__authenticate_requestAuthentication: function _HttpClientResponse__authenticate_requestAuthentication(t0, t1) {
      this.$this = t0;
      this.proxyAuth = t1;
    },
    _HttpClientResponse__authenticate_closure: function _HttpClientResponse__authenticate_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.scheme = t2;
      _.retry = t3;
    },
    _ToUint8List: function _ToUint8List() {
    },
    _Uint8ListConversionSink: function _Uint8ListConversionSink(t0) {
      this.__http$_target = t0;
    },
    _StreamSinkImpl0: function _StreamSinkImpl0() {
    },
    _StreamSinkImpl__controller_closure: function _StreamSinkImpl__controller_closure(t0) {
      this.$this = t0;
    },
    _StreamSinkImpl__controller_closure0: function _StreamSinkImpl__controller_closure0(t0) {
      this.$this = t0;
    },
    _IOSinkImpl0: function _IOSinkImpl0() {
    },
    _HttpOutboundMessage: function _HttpOutboundMessage() {
    },
    _HttpClientRequest: function _HttpClientRequest(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15) {
      var _ = this;
      _.method = t0;
      _.uri = t1;
      _.cookies = t2;
      _._httpClient = t3;
      _._httpClientConnection = t4;
      _._HttpClientRequest__profileData = t5;
      _._responseCompleter = t6;
      _._proxy = t7;
      _._response = null;
      _._followRedirects = true;
      _._maxRedirects = 5;
      _._responseRedirects = t8;
      _._encodingSet = false;
      _._uri = t9;
      _._outgoing = t10;
      _.headers = t11;
      _.__http$_encoding = t12;
      _._profileData = t13;
      _.__http$_target = t14;
      _.__http$_doneCompleter = t15;
      _.__http$_controllerCompleter = _.__http$_controllerInstance = null;
      _.__http$_hasError = _.__http$_isBound = _.__http$_isClosed = false;
    },
    _HttpClientRequest_closure: function _HttpClientRequest_closure(t0) {
      this.$this = t0;
    },
    _HttpClientRequest_closure0: function _HttpClientRequest_closure0() {
    },
    _HttpClientRequest_done_closure: function _HttpClientRequest_done_closure() {
    },
    _HttpClientRequest__onIncoming_closure: function _HttpClientRequest__onIncoming_closure(t0) {
      this.response = t0;
    },
    _HttpClientRequest__onIncoming_closure0: function _HttpClientRequest__onIncoming_closure0(t0) {
      this.response = t0;
    },
    _HttpClientRequest__onIncoming_closure1: function _HttpClientRequest__onIncoming_closure1(t0) {
      this.$this = t0;
    },
    _HttpClientRequest__onIncoming_closure2: function _HttpClientRequest__onIncoming_closure2(t0) {
      this.$this = t0;
    },
    _HttpClientRequest__requestUri_uriStartingFromPath: function _HttpClientRequest__requestUri_uriStartingFromPath(t0) {
      this.$this = t0;
    },
    _HttpOutgoing: function _HttpOutgoing(t0, t1) {
      var _ = this;
      _.__http$_doneCompleter = t0;
      _.socket = t1;
      _.headersWritten = false;
      _.__http$_buffer = null;
      _.__http$_length = 0;
      _._closeFuture = null;
      _.chunked = false;
      _._pendingChunkedFooter = 0;
      _.contentLength = null;
      _._bytesWritten = 0;
      _._gzip = false;
      _._gzipBuffer = _._gzipAdd = _._gzipSink = null;
      _._gzipBufferLength = 0;
      _._socketError = false;
      _.outbound = null;
    },
    _HttpOutgoing_addStream_onData: function _HttpOutgoing_addStream_onData(t0, t1) {
      this.$this = t0;
      this.controller = t1;
    },
    _HttpOutgoing_addStream_closure: function _HttpOutgoing_addStream_closure(t0) {
      this.$this = t0;
    },
    _HttpOutgoing_addStream_closure0: function _HttpOutgoing_addStream_closure0(t0) {
      this.$this = t0;
    },
    _HttpOutgoing_close_finalize: function _HttpOutgoing_close_finalize(t0, t1) {
      this.$this = t0;
      this.outbound = t1;
    },
    _HttpOutgoing_close_finalize_closure: function _HttpOutgoing_close_finalize_closure(t0, t1) {
      this.$this = t0;
      this.outbound = t1;
    },
    _HttpOutgoing_close_finalize_closure0: function _HttpOutgoing_close_finalize_closure0(t0, t1) {
      this.$this = t0;
      this.outbound = t1;
    },
    _HttpClientConnection: function _HttpClientConnection(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.key = t0;
      _._socket = t1;
      _._proxyTunnel = t2;
      _._context = t3;
      _._httpParser = t4;
      _._subscription = null;
      _._httpClient = t5;
      _._dispose = false;
      _._idleTimer = null;
      _.closed = false;
      _._streamFuture = _._nextResponseCompleter = _._currentUri = null;
    },
    _HttpClientConnection_closure: function _HttpClientConnection_closure(t0) {
      this.$this = t0;
    },
    _HttpClientConnection__closure: function _HttpClientConnection__closure(t0) {
      this.$this = t0;
    },
    _HttpClientConnection__closure0: function _HttpClientConnection__closure0(t0) {
      this.$this = t0;
    },
    _HttpClientConnection_closure1: function _HttpClientConnection_closure1(t0) {
      this.$this = t0;
    },
    _HttpClientConnection_closure0: function _HttpClientConnection_closure0(t0) {
      this.$this = t0;
    },
    _HttpClientConnection_send_closure: function _HttpClientConnection_send_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.method = t2;
      _.request = t3;
      _.uri = t4;
    },
    _HttpClientConnection_send__closure: function _HttpClientConnection_send__closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.method = t2;
      _.request = t3;
    },
    _HttpClientConnection_send___closure: function _HttpClientConnection_send___closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.incoming = t1;
      _.method = t2;
      _.request = t3;
    },
    _HttpClientConnection_send__closure0: function _HttpClientConnection_send__closure0(t0) {
      this.uri = t0;
    },
    _HttpClientConnection_send__closure1: function _HttpClientConnection_send__closure1() {
    },
    _HttpClientConnection_send__closure2: function _HttpClientConnection_send__closure2(t0, t1) {
      this.$this = t0;
      this.request = t1;
    },
    _HttpClientConnection_send_closure0: function _HttpClientConnection_send_closure0(t0) {
      this.$this = t0;
    },
    _HttpClientConnection_close_closure: function _HttpClientConnection_close_closure(t0) {
      this.$this = t0;
    },
    _HttpClientConnection_createProxyTunnel_closure: function _HttpClientConnection_createProxyTunnel_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.profileData = t1;
      _.request = t2;
      _.host = t3;
      _.callback = t4;
    },
    _HttpClientConnection_createProxyTunnel_closure0: function _HttpClientConnection_createProxyTunnel_closure0(t0, t1, t2, t3) {
      var _ = this;
      _.host = t0;
      _.port = t1;
      _.profileData = t2;
      _.request = t3;
    },
    _HttpClientConnection_startTimer_closure: function _HttpClientConnection_startTimer_closure(t0) {
      this.$this = t0;
    },
    _ConnectionInfo: function _ConnectionInfo(t0, t1) {
      this.connection = t0;
      this.proxy = t1;
    },
    _ConnectionTarget: function _ConnectionTarget(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.key = t0;
      _.host = t1;
      _.port = t2;
      _.isSecure = t3;
      _.context = t4;
      _._idle = t5;
      _._active = t6;
      _._socketTasks = t7;
      _._pending = t8;
      _._connecting = 0;
    },
    _ConnectionTarget_connect_callback: function _ConnectionTarget_connect_callback(t0, t1, t2) {
      this.currentBadCertificateCallback = t0;
      this.uriHost = t1;
      this.uriPort = t2;
    },
    _ConnectionTarget_connect_closure: function _ConnectionTarget_connect_closure(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.$this = t0;
      _.client = t1;
      _.proxy = t2;
      _.uriHost = t3;
      _.uriPort = t4;
      _.callback = t5;
      _.profileData = t6;
    },
    _ConnectionTarget_connect__closure: function _ConnectionTarget_connect__closure(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.$this = t0;
      _.client = t1;
      _.proxy = t2;
      _.uriHost = t3;
      _.uriPort = t4;
      _.callback = t5;
      _.profileData = t6;
      _.task = t7;
    },
    _ConnectionTarget_connect___closure: function _ConnectionTarget_connect___closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.$this = t0;
      _.client = t1;
      _.uriHost = t2;
      _.uriPort = t3;
      _.task = t4;
      _.proxy = t5;
    },
    _ConnectionTarget_connect__closure0: function _ConnectionTarget_connect__closure0(t0, t1, t2) {
      this.$this = t0;
      this.connectionTimeout = t1;
      this.task = t2;
    },
    _ConnectionTarget_connect_closure0: function _ConnectionTarget_connect_closure0(t0) {
      this.$this = t0;
    },
    _HttpClient: function _HttpClient(t0, t1, t2, t3, t4) {
      var _ = this;
      _._connectionTargets = t0;
      _._credentials = t1;
      _._proxyCredentials = t2;
      _._context = t3;
      _.userAgent = t4;
    },
    _HttpClient__openUrl_closure: function _HttpClient__openUrl_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.method = t2;
      _.isSecure = t3;
    },
    _HttpClient__openUrl_closure_send: function _HttpClient__openUrl_closure_send(t0, t1) {
      this._box_0 = t0;
      this.method = t1;
    },
    _HttpClient__openUrl_closure0: function _HttpClient__openUrl_closure0(t0) {
      this._box_0 = t0;
    },
    _HttpClient__openUrlFromRequest_closure: function _HttpClient__openUrlFromRequest_closure(t0) {
      this.previous = t0;
    },
    _HttpClient__getConnectionTarget_closure: function _HttpClient__getConnectionTarget_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.key = t1;
      _.host = t2;
      _.port = t3;
      _.isSecure = t4;
    },
    _HttpClient__getConnection_connect: function _HttpClient__getConnection_connect(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.$this = t0;
      _.proxies = t1;
      _.uriHost = t2;
      _.uriPort = t3;
      _.isSecure = t4;
      _.profileData = t5;
    },
    _HttpClient__findCredentials_closure: function _HttpClient__findCredentials_closure(t0, t1) {
      this.url = t0;
      this.scheme = t1;
    },
    _HttpClient__findProxyFromEnvironment_checkNoProxy: function _HttpClient__findProxyFromEnvironment_checkNoProxy(t0) {
      this.url = t0;
    },
    _HttpClient__findProxyFromEnvironment_checkNoProxy_closure: function _HttpClient__findProxyFromEnvironment_checkNoProxy_closure() {
    },
    _HttpClient__findProxyFromEnvironment_checkProxy: function _HttpClient__findProxyFromEnvironment_checkProxy() {
    },
    _ProxyConfiguration: function _ProxyConfiguration(t0) {
      this.proxies = t0;
    },
    _ProxyConfiguration_closure: function _ProxyConfiguration_closure(t0, t1) {
      this.$this = t0;
      this.configuration = t1;
    },
    _Proxy: function _Proxy(t0, t1, t2, t3, t4) {
      var _ = this;
      _.host = t0;
      _.port = t1;
      _.username = t2;
      _.password = t3;
      _.isDirect = t4;
    },
    _HttpConnectionInfo: function _HttpConnectionInfo(t0, t1, t2) {
      this.remoteAddress = t0;
      this.remotePort = t1;
      this.localPort = t2;
    },
    _AuthenticationScheme: function _AuthenticationScheme() {
    },
    _RedirectInfo: function _RedirectInfo(t0, t1, t2) {
      this.statusCode = t0;
      this.method = t1;
      this.location = t2;
    },
    _HttpParser: function _HttpParser(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._parserCalled = false;
      _.__http$_buffer = null;
      _.__http$_index = -1;
      _._requestParser = t0;
      _.__http$_state = 0;
      _._httpVersionIndex = null;
      _._statusCodeLength = _._statusCode = _._messageType = 0;
      _.__http$_method = t1;
      _._uriOrReasonPhrase = t2;
      _._headerField = t3;
      _._headerValue = t4;
      _._httpVersion = _._headersReceivedSize = 0;
      _._transferLength = -1;
      _._noMessageBody = _._chunked = _._connectionUpgrade = false;
      _._remainingContent = -1;
      _.connectMethod = _._transferEncoding = _._contentLength = false;
      _.__http$_socketSubscription = _._incoming = _._headers = null;
      _._paused = true;
      _._bodyPaused = false;
      _._controller = t5;
      _._bodyController = null;
    },
    _HttpParser$__closure: function _HttpParser$__closure(t0) {
      this.$this = t0;
    },
    _HttpParser$__closure0: function _HttpParser$__closure0(t0) {
      this.$this = t0;
    },
    _HttpParser$__closure1: function _HttpParser$__closure1(t0) {
      this.$this = t0;
    },
    _HttpParser$__closure2: function _HttpParser$__closure2(t0) {
      this.$this = t0;
    },
    _HttpParser__createIncoming_closure: function _HttpParser__createIncoming_closure(t0, t1) {
      this.$this = t0;
      this.incoming = t1;
    },
    _HttpParser__createIncoming_closure0: function _HttpParser__createIncoming_closure0(t0, t1) {
      this.$this = t0;
      this.incoming = t1;
    },
    _HttpParser__createIncoming_closure1: function _HttpParser__createIncoming_closure1(t0, t1) {
      this.$this = t0;
      this.incoming = t1;
    },
    _HttpParser__createIncoming_closure2: function _HttpParser__createIncoming_closure2(t0, t1) {
      this.$this = t0;
      this.incoming = t1;
    },
    LateError$fieldADI: function(fieldName) {
      return new H.LateError("Field '" + fieldName + "' has been assigned during initialization.");
    },
    LateError$fieldNI: function(fieldName) {
      return new H.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    LateError$localNI: function(localName) {
      return new H.LateError("Local '" + localName + "' has not been initialized.");
    },
    LateError$fieldAI: function(fieldName) {
      return new H.LateError("Field '" + fieldName + "' has already been initialized.");
    },
    hexDigitValue: function(char) {
      var letter,
        digit = char ^ 48;
      if (digit <= 9)
        return digit;
      letter = char | 32;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    checkNotNullable: function(value, $name, $T) {
      return value;
    },
    valueOfNonNullableParamWithDefault: function(value, defaultVal, $T) {
      return value;
    },
    SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
      P.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        P.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          H.throwExpression(P.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new H.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new H.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
      return new H.MappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooFew: function() {
      return new P.StateError("Too few elements");
    },
    CastStream: function CastStream(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastStreamSubscription: function CastStreamSubscription(t0, t1, t2) {
      var _ = this;
      _._source = t0;
      _.__internal$_zone = t1;
      _.__internal$_handleError = _.__internal$_handleData = null;
      _.$ti = t2;
    },
    LateError: function LateError(t0) {
      this.__internal$_message = t0;
    },
    CodeUnits: function CodeUnits(t0) {
      this._string = t0;
    },
    nullFuture_closure: function nullFuture_closure() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S: function(value) {
      var res;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_parseInt: function(source, radix) {
      var decimalMatch, maxCharCode, digitsPart, t1, i, _null = null,
        match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return _null;
      if (3 >= match.length)
        return H.ioore(match, 3);
      decimalMatch = match[3];
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((C.JSString_methods._codeUnitAt$1(digitsPart, i) | 32) > maxCharCode)
            return _null;
      }
      return parseInt(source, radix);
    },
    Primitives_objectTypeName: function(object) {
      return H.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti: function(object) {
      var dispatchName, t1, $constructor, constructorName;
      if (object instanceof P.Object)
        return H._rtiToString(H.instanceType(object), null);
      if (J.getInterceptor$(object) === C.Interceptor_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = C.C_JS_CONST(object);
        t1 = dispatchName !== "Object" && dispatchName !== "";
        if (t1)
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string")
            t1 = constructorName !== "Object" && constructorName !== "";
          else
            t1 = false;
          if (t1)
            return constructorName;
        }
      }
      return H._rtiToString(H.instanceType(object), null);
    },
    Primitives_dateNow: function() {
      return Date.now();
    },
    Primitives_initTicker: function() {
      var $window, performance;
      if ($.Primitives_timerFrequency !== 0)
        return;
      $.Primitives_timerFrequency = 1000;
      if (typeof window == "undefined")
        return;
      $window = window;
      if ($window == null)
        return;
      performance = $window.performance;
      if (performance == null)
        return;
      if (typeof performance.now != "function")
        return;
      $.Primitives_timerFrequency = 1000000;
      $.Primitives_timerTicks = new H.Primitives_initTicker_closure(performance);
    },
    Primitives__fromCharCodeApply: function(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints: function(codePoints) {
      var t1, _i, i,
        a = H.setRuntimeTypeInfo([], type$.JSArray_int);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, H.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (!H._isInt(i))
          throw H.wrapException(H.argumentErrorValue(i));
        if (i <= 65535)
          C.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          C.JSArray_methods.add$1(a, 55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          C.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw H.wrapException(H.argumentErrorValue(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes: function(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (!H._isInt(i))
          throw H.wrapException(H.argumentErrorValue(i));
        if (i < 0)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List: function(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((C.JSInt_methods._shrOtherPositive$1(bits, 10) | 55296) >>> 0, bits & 1023 | 56320);
        }
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_valueFromDecomposedDate: function(years, month, day, hours, minutes, seconds, milliseconds, isUtc) {
      var value,
        jsMonth = month - 1;
      if (0 <= years && years < 100) {
        years += 400;
        jsMonth -= 4800;
      }
      value = Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds);
      if (isNaN(value) || value < -864e13 || value > 864e13)
        return null;
      return value;
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._value);
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_getWeekday: function(receiver) {
      return C.JSInt_methods.$mod((receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDay() + 0 : H.Primitives_lazyAsJsDate(receiver).getDay() + 0) + 6, 7) + 1;
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, _s5_ = "index";
      if (!H._isInt(index))
        return new P.ArgumentError(true, index, _s5_, null);
      $length = H._asInt(J.get$length$asx(indexable));
      if (index < 0 || index >= $length)
        return P.IndexError$(index, indexable, _s5_, null, $length);
      return P.RangeError$value(index, _s5_);
    },
    diagnoseRangeError: function(start, end, $length) {
      if (start > $length)
        return P.RangeError$range(start, 0, $length, "start", null);
      if (end != null)
        if (end < start || end > $length)
          return P.RangeError$range(end, start, $length, "end", null);
      return new P.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    wrapException: function(ex) {
      var wrapper, t1;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      t1 = H.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwUnsupportedError: function(message) {
      throw H.wrapException(P.UnsupportedError$(H._asString(message)));
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern: function(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = H.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = H.setRuntimeTypeInfo([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new H.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn: function(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$: function(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException: function(ex) {
      if (ex == null)
        return new H.NullThrownFromJavaScriptException(ex);
      if (ex instanceof H.ExceptionAndStackTrace)
        return H.saveStackTrace(ex, type$.Object._as(ex.dartException));
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return H.saveStackTrace(ex, ex.dartException);
      return H._unwrapNonDartException(ex);
    },
    saveStackTrace: function(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException: function(ex) {
      var message, number, ieErrorCode, t1, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, _null = null;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
              t1 = H.S(message) + " (Error " + ieErrorCode + ")";
              return H.saveStackTrace(ex, new H.NullError(t1, _null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H._asString(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t1 = match != null;
                        } else
                          t1 = true;
                      } else
                        t1 = true;
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                } else
                  t1 = true;
              } else
                t1 = true;
            } else
              t1 = true;
            if (t1) {
              H._asString(message);
              return H.saveStackTrace(ex, new H.NullError(message, match == null ? _null : match.method));
            }
          }
        }
        return H.saveStackTrace(ex, new H.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return H.saveStackTrace(ex, new P.ArgumentError(false, _null, _null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception instanceof H.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new H._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (H._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      if (closure == null)
        return null;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $constructor, t1, trampoline, applyTrampoline, i, stub, stubCallName,
        $function = functions[0],
        callName = $function.$callName,
        $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, "").constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      type$.Object._as(reflectionInfo);
      $prototype.$signature = H.Closure__computeSignatureFunctionNewRti(reflectionInfo, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < functions.length; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti: function(functionType, isStatic, isIntercepted) {
      var typeEvalMethod;
      if (typeof functionType == "number")
        return function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getTypeFromTypesTable, functionType);
      if (typeof functionType == "string") {
        if (isStatic)
          throw H.wrapException("Cannot compute signature for static tearoff.");
        typeEvalMethod = isIntercepted ? H.BoundClosure_evalRecipeIntercepted : H.BoundClosure_evalRecipe;
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, typeEvalMethod);
      }
      throw H.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        t1 = "return function(){var " + selfName + " = this.";
        t2 = $.BoundClosure_selfFieldNameCache;
        return new Function(t1 + (t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      return new Function(t1 + (t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf = H.BoundClosure_selfOf,
        getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(new H.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var receiverField, stubName, arity, lookedUpFunction, t1, t2, $arguments,
        selfField = $.BoundClosure_selfFieldNameCache;
      if (selfField == null)
        selfField = $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self");
      receiverField = $.BoundClosure_receiverFieldNameCache;
      if (receiverField == null)
        receiverField = $.BoundClosure_receiverFieldNameCache = H.BoundClosure_computeFieldNamed("receiver");
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 28;
      if (t2)
        return H.Closure_cspForwardInterceptedCall(arity, !t1, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + selfField + "." + H.S(stubName) + "(this." + receiverField + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + selfField + "." + H.S(stubName) + "(this." + receiverField + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, applyTrampolineIndex, reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    BoundClosure_evalRecipe: function(closure, recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, H.instanceType(closure._self), recipe);
    },
    BoundClosure_evalRecipeIntercepted: function(closure, recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, H.instanceType(closure._receiver), recipe);
    },
    BoundClosure_selfOf: function(closure) {
      return closure._self;
    },
    BoundClosure_receiverOf: function(closure) {
      return closure._receiver;
    },
    BoundClosure_computeFieldNamed: function(fieldName) {
      var t1, i, $name,
        template = new H.BoundClosure("self", "target", "receiver", "name"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw H.wrapException(P.ArgumentError$("Field name " + fieldName + " not found."));
    },
    boolConversionCheck: function(value) {
      if (value == null)
        H.assertThrow("boolean expression must not be null");
      return value;
    },
    assertThrow: function(message) {
      throw H.wrapException(new H._AssertionError(message));
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    convertMainArgumentList: function(args) {
      var i,
        result = H.setRuntimeTypeInfo([], type$.JSArray_String);
      if (args == null)
        return result;
      if (Array.isArray(args)) {
        for (i = 0; i < args.length; ++i)
          result.push(String(args[i]));
        return result;
      }
      result.push(String(args));
      return result;
    },
    throwLateInitializationError: function($name) {
      return H.throwExpression(new H.LateError($name));
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = H._asString($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = H._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = C.C_JS_CONST0();
      hooks = H.applyHooksTransformer(C.C_JS_CONST1, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST4, H.applyHooksTransformer(C.C_JS_CONST5, H.applyHooksTransformer(C.C_JS_CONST6(C.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, unicode, dotAll, global) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        g = global ? "g" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw H.wrapException(P.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      var t1 = receiver.indexOf(other, startIndex);
      return t1 >= 0;
    },
    quoteStringForRegExp: function(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_length = t0;
      _._jsObject = t1;
      _.__js_helper$_keys = t2;
      _.$ti = t3;
    },
    Primitives_initTicker_closure: function Primitives_initTicker_closure(t0) {
      this.performance = t0;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this.__js_helper$_message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1, t2, t3) {
      var _ = this;
      _._self = t0;
      _._target = t1;
      _._receiver = t2;
      _._name = t3;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _._previous = _._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _ensureNativeList: function(list) {
      var t1, result, i;
      if (type$.JSIndexable_dynamic._is(list))
        return list;
      t1 = J.getInterceptor$asx(list);
      result = P.List_List$filled(t1.get$length(list), null, false, type$.dynamic);
      for (i = 0; i < t1.get$length(list); ++i)
        C.JSArray_methods.$indexSet(result, i, t1.$index(list, i));
      return result;
    },
    NativeInt8List__create1: function(arg) {
      return new Int8Array(arg);
    },
    NativeUint8List_NativeUint8List: function($length) {
      return new Uint8Array($length);
    },
    NativeUint8List_NativeUint8List$view: function(buffer, offsetInBytes, $length) {
      var t1 = new Uint8Array(buffer, offsetInBytes, $length);
      return t1;
    },
    _checkValidIndex: function(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw H.wrapException(H.diagnoseIndexError(list, index));
    },
    _checkValidRange: function(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw H.wrapException(H.diagnoseRangeError(start, end, $length));
      return end;
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getQuestionFromStar: function(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = H._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr: function(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = H._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType: function(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return H.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 11 || kind === 12;
    },
    Rti__getCanonicalRecipe: function(rti) {
      return rti._canonicalRecipe;
    },
    findType: function(recipe) {
      return H._Universe_eval(init.typeUniverse, recipe, false);
    },
    _substitute: function(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = H._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return H._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = H._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = H._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return H._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          returnType = rti._primary;
          substitutedReturnType = H._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = H._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return H._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = H._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = H._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return H._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw H.wrapException(P.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray: function(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = [];
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = H._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.push(substitutedRti);
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed: function(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = [];
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = H._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.push(t1);
        result.push(t2);
        result.push(substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters: function(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = H._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = H._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = H._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new H._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    setRuntimeTypeInfo: function(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType: function(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return H.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType: function(object, testRti) {
      var rti;
      if (H.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof H.Closure) {
          rti = H.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return H.instanceType(object);
    },
    instanceType: function(object) {
      var rti;
      if (object instanceof P.Object) {
        rti = object.$ti;
        return rti != null ? rti : H._instanceTypeFromConstructor(object);
      }
      if (Array.isArray(object))
        return H._arrayInstanceType(object);
      return H._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType: function(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType: function(object) {
      var rti = object.$ti;
      return rti != null ? rti : H._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor: function(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return H._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss: function(instance, $constructor) {
      var effectiveConstructor = instance instanceof H.Closure ? instance.__proto__.__proto__.constructor : $constructor,
        rti = H._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable: function(index) {
      var table, type, rti;
      H._asInt(index);
      table = init.types;
      type = table[index];
      if (typeof type == "string") {
        rti = H._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    _installSpecializedIsTest: function(object) {
      var t1, unstarred, isFn, testRti = this;
      if (testRti === type$.Object)
        return H._finishIsFn(testRti, object, H._isObject);
      if (!H.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return H._finishIsFn(testRti, object, H._isTop);
      t1 = testRti._kind;
      unstarred = t1 === 6 ? testRti._primary : testRti;
      if (unstarred === type$.int)
        isFn = H._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = H._isNum;
      else if (unstarred === type$.String)
        isFn = H._isString;
      else
        isFn = unstarred === type$.bool ? H._isBool : null;
      if (isFn != null)
        return H._finishIsFn(testRti, object, isFn);
      if (unstarred._kind === 9) {
        t1 = unstarred._primary;
        if (unstarred._rest.every(H.isTopType)) {
          testRti._specializedTestResource = "$is" + t1;
          return H._finishIsFn(testRti, object, H._isTestViaProperty);
        }
      } else if (t1 === 7)
        return H._finishIsFn(testRti, object, H._generalNullableIsTestImplementation);
      return H._finishIsFn(testRti, object, H._generalIsTestImplementation);
    },
    _finishIsFn: function(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck: function(object) {
      var t1, testRti = this,
        asFn = H._generalAsCheckImplementation;
      if (!H.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        asFn = H._asTop;
      else if (testRti === type$.Object)
        asFn = H._asObject;
      else {
        t1 = H.isNullable(testRti);
        if (t1)
          asFn = H._generalNullableAsCheckImplementation;
      }
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs: function(testRti) {
      var t1,
        kind = testRti._kind;
      if (!H.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          if (!(testRti === type$.legacy_Never))
            if (kind !== 7)
              t1 = kind === 8 && H._nullIs(testRti._primary) || testRti === type$.Null || testRti === type$.JSNull;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _generalIsTestImplementation: function(object) {
      var testRti = this;
      if (object == null)
        return H._nullIs(testRti);
      return H._isSubtype(init.typeUniverse, H.instanceOrFunctionType(object, testRti), null, testRti, null);
    },
    _generalNullableIsTestImplementation: function(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty: function(object) {
      var tag, testRti = this;
      if (object == null)
        return H._nullIs(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof P.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation: function(object) {
      var t1, testRti = this;
      if (object == null) {
        t1 = H.isNullable(testRti);
        if (t1)
          return object;
      } else if (testRti._is(object))
        return object;
      H._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation: function(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      H._failedAsCheck(object, testRti);
    },
    _failedAsCheck: function(object, testRti) {
      throw H.wrapException(H._TypeError$fromMessage(H._Error_compose(object, H.instanceOrFunctionType(object, testRti), H._rtiToString(testRti, null))));
    },
    _Error_compose: function(object, objectRti, checkedTypeDescription) {
      var objectDescription = P.Error_safeToString(object),
        objectTypeDescription = H._rtiToString(objectRti == null ? H.instanceType(object) : objectRti, null);
      return objectDescription + ": type '" + objectTypeDescription + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage: function(message) {
      return new H._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType: function(object, type) {
      return new H._TypeError("TypeError: " + H._Error_compose(object, null, type));
    },
    _isObject: function(object) {
      return object != null;
    },
    _asObject: function(object) {
      if (object != null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop: function(object) {
      return true;
    },
    _asTop: function(object) {
      return object;
    },
    _isBool: function(object) {
      return true === object || false === object;
    },
    _asBool: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble: function(object) {
      if (typeof object == "number")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt: function(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt: function(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS: function(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ: function(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum: function(object) {
      return typeof object == "number";
    },
    _asNum: function(object) {
      if (typeof object == "number")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num?"));
    },
    _isString: function(object) {
      return typeof object == "string";
    },
    _asString: function(object) {
      if (typeof object == "string")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS: function(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ: function(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString: function(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + H._rtiToString(array[i], genericContext);
      return s;
    },
    _functionRtiToString: function(functionType, genericContext, bounds) {
      var boundsLength, outerContextLength, offset, i, t1, t2, typeParametersText, typeSep, t3, t4, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ";
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], type$.JSArray_String);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          typeParametersText += typeSep;
          t3 = genericContext.length;
          t4 = t3 - 1 - i;
          if (t4 < 0)
            return H.ioore(genericContext, t4);
          typeParametersText = C.JSString_methods.$add(typeParametersText, genericContext[t4]);
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            if (!(boundRti === t2))
              t3 = false;
            else
              t3 = true;
          else
            t3 = true;
          if (!t3)
            typeParametersText += " extends " + H._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else {
        typeParametersText = "";
        outerContextLength = null;
      }
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = H._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + H._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + H._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += H._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString: function(rti, genericContext) {
      var s, questionArgument, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        s = H._rtiToString(rti._primary, genericContext);
        return s;
      }
      if (kind === 7) {
        questionArgument = rti._primary;
        s = H._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 11 || argumentKind === 12 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 8)
        return "FutureOr<" + H._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 9) {
        $name = H._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length !== 0 ? $name + ("<" + H._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return H._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return H._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 13) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (t1 < 0 || t1 >= t2)
          return H.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule: function(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType: function(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return H._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = H._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = [];
        for (i = 0; i < $length; ++i)
          $arguments.push(erased);
        $interface = H._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules: function(universe, rules) {
      return H._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes: function(universe, types) {
      return H._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval: function(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = H._Parser_parse(H._Parser_create(universe, null, recipe, normalize));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment: function(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = H._Parser_parse(H._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind: function(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = H._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests: function(universe, rti) {
      rti._as = H._installSpecializedAsCheck;
      rti._is = H._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti: function(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti: function(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti: function(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!H.isStrongTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new H.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti: function(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti: function(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!H.isStrongTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              t1 = baseKind === 8 && H.isNullable(baseType._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          if (starArgument._kind === 8 && H.isNullable(starArgument._primary))
            return starArgument;
          else
            return H.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new H.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti: function(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti: function(universe, baseType, key, normalize) {
      var t1, t2, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (!H.isStrongTopType(baseType))
          if (!(baseType === type$.legacy_Object))
            t2 = false;
          else
            t2 = true;
        else
          t2 = true;
        if (t2 || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return H._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new H.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti: function(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 13;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin: function($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed: function($arguments) {
      var s, sep, i, t1, nameSep, s0,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s0 = $arguments[i + 2]._canonicalRecipe;
        s += sep + t1 + nameSep + s0;
      }
      return s;
    },
    _Universe__lookupInterfaceRti: function(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length !== 0)
        s += "<" + H._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti: function(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + H._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti: function(universe, returnType, parameters) {
      var sep, t1, key, probe, rti,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + H._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        t1 = H._Universe__canonicalRecipeJoin(optionalPositional);
        recipe += sep + "[" + t1 + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        t1 = H._Universe__canonicalRecipeJoinNamed(named);
        recipe += sep + "{" + t1 + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 11;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti: function(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + H._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti: function(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = new Array($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = H._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = H._substituteArray(universe, bounds, typeArguments, 0);
          return H._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new H.Rti(null, null);
      rti._kind = 12;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Parser_create: function(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse: function(parser) {
      var t2, i, ch, t3, array, head, base, parameters, optionalPositional, named, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = H._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36)
          i = H._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = H._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(H._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(H._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(H._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(H._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(H._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              t3 = parser.u;
              array = t1.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              head = t1.pop();
              if (typeof head == "string")
                t1.push(H._Universe__lookupInterfaceRti(t3, head, array));
              else {
                base = H._Parser_toType(t3, parser.e, head);
                switch (base._kind) {
                  case 11:
                    t1.push(H._Universe__lookupGenericFunctionRti(t3, base, array, parser.n));
                    break;
                  default:
                    t1.push(H._Universe__lookupBindingRti(t3, base, array));
                    break;
                }
              }
              break;
            case 38:
              H._Parser_handleExtendedOperations(parser, t1);
              break;
            case 42:
              t3 = parser.u;
              t1.push(H._Universe__lookupStarRti(t3, H._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 63:
              t3 = parser.u;
              t1.push(H._Universe__lookupQuestionRti(t3, H._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(H._Universe__lookupFutureOrRti(t3, H._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              t3 = parser.u;
              parameters = new H._FunctionParameters();
              optionalPositional = t3.sEA;
              named = t3.sEA;
              head = t1.pop();
              if (typeof head == "number")
                switch (head) {
                  case -1:
                    optionalPositional = t1.pop();
                    break;
                  case -2:
                    named = t1.pop();
                    break;
                  default:
                    t1.push(head);
                    break;
                }
              else
                t1.push(head);
              array = t1.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              parameters._requiredPositional = array;
              parameters._optionalPositional = optionalPositional;
              parameters._named = named;
              t1.push(H._Universe__lookupFunctionRti(t3, H._Parser_toType(t3, parser.e, t1.pop()), parameters));
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              H._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return H._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit: function(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier: function(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = H._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          H.throwExpression('No "' + string + '" in "' + H.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(H._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleExtendedOperations: function(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(H._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(H._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw H.wrapException(P.AssertionError$("Unexpected extended operation " + H.S($top)));
    },
    _Parser_toType: function(universe, environment, item) {
      if (typeof item == "string")
        return H._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number")
        return H._Parser_indexToType(universe, environment, item);
      else
        return item;
    },
    _Parser_toTypes: function(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = H._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed: function(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = H._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType: function(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw H.wrapException(P.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw H.wrapException(P.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    _isSubtype: function(universe, s, sEnv, t, tEnv) {
      var t1, sKind, leftTypeVariable, tKind, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!H.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (H.isStrongTopType(s))
        return false;
      if (s._kind !== 1)
        t1 = false;
      else
        t1 = true;
      if (t1)
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (H._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      t1 = s === type$.Null || s === type$.JSNull;
      if (t1) {
        if (tKind === 8)
          return H._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t === type$.Null || t === type$.JSNull || tKind === 7 || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 8)
          return H._isSubtype(universe, s._primary, sEnv, t, tEnv);
        if (sKind === 6)
          return H._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return sKind !== 7;
      }
      if (sKind === 6)
        return H._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 6) {
        t1 = H.Rti__getQuestionFromStar(universe, t);
        return H._isSubtype(universe, s, sEnv, t1, tEnv);
      }
      if (sKind === 8) {
        if (!H._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return H._isSubtype(universe, H.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 7) {
        t1 = H._isSubtype(universe, type$.Null, sEnv, t, tEnv);
        return t1 && H._isSubtype(universe, s._primary, sEnv, t, tEnv);
      }
      if (tKind === 8) {
        if (H._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return H._isSubtype(universe, s, sEnv, H.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 7) {
        t1 = H._isSubtype(universe, s, sEnv, type$.Null, tEnv);
        return t1 || H._isSubtype(universe, s, sEnv, t._primary, tEnv);
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && t === type$.Function)
        return true;
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 12)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!H._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !H._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return H._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 11) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return H._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return H._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      return false;
    },
    _isFunctionSubtype: function(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!H._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!H._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!H._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!H._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!H._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype: function(universe, s, sEnv, t, tEnv) {
      var sArgs, tArgs, $length, i, t1, t2, rule, supertypeArgs,
        sName = s._primary,
        tName = t._primary;
      if (sName === tName) {
        sArgs = s._rest;
        tArgs = t._rest;
        $length = sArgs.length;
        for (i = 0; i < $length; ++i) {
          t1 = sArgs[i];
          t2 = tArgs[i];
          if (!H._isSubtype(universe, t1, sEnv, t2, tEnv))
            return false;
        }
        return true;
      }
      if (t === type$.Object)
        return true;
      rule = H._Universe_findRule(universe, sName);
      if (rule == null)
        return false;
      supertypeArgs = rule[tName];
      if (supertypeArgs == null)
        return false;
      $length = supertypeArgs.length;
      tArgs = t._rest;
      for (i = 0; i < $length; ++i)
        if (!H._isSubtype(universe, H._Universe_evalInEnvironment(universe, s, supertypeArgs[i]), sEnv, tArgs[i], tEnv))
          return false;
      return true;
    },
    isNullable: function(t) {
      var t1,
        kind = t._kind;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!H.isStrongTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && H.isNullable(t._primary)))
              t1 = kind === 8 && H.isNullable(t._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isTopType: function(t) {
      var t1;
      if (!H.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isStrongTopType: function(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign: function(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this._message = t0;
    },
    unmangleGlobalNameIfPreservedAnyways: function($name) {
      return init.mangledGlobalNames[$name];
    }
  },
  J = {
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed: function($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$markFixed: function(allocation, $E) {
      return J.JSArray_markFixedList(H.setRuntimeTypeInfo(allocation, $E._eval$1("JSArray<0>")), $E);
    },
    JSArray_markFixedList: function(list, $T) {
      list.fixed$length = Array;
      return list;
    },
    JSString__isWhitespace: function(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace: function(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = C.JSString_methods._codeUnitAt$1(string, index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace: function(string, index) {
      var index0, codeUnit;
      for (; index > 0; index = index0) {
        index0 = index - 1;
        codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax: function(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$n: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x: function(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$z: function(receiver) {
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    get$hashCode$: function(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$iterator$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$length$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$message$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$message(receiver);
    },
    $eq$: function(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx: function(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    add$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    cancel$0$z: function(receiver) {
      return J.getInterceptor$z(receiver).cancel$0(receiver);
    },
    contains$1$asx: function(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    elementAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    forEach$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
    },
    map$1$1$ax: function(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    pause$0$z: function(receiver) {
      return J.getInterceptor$z(receiver).pause$0(receiver);
    },
    resume$0$z: function(receiver) {
      return J.getInterceptor$z(receiver).resume$0(receiver);
    },
    skip$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    toLowerCase$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
    },
    toRadixString$1$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
    },
    toString$0$: function(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _.__interceptors$_length = t1;
      _._index = 0;
      _.__interceptors$_current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  P = {
    _AsyncRun__initializeScheduleImmediate: function() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate: function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer: function(callback) {
      P.Timer__createTimer(C.Duration_0, type$.void_Function._as(callback));
    },
    Timer__createTimer: function(duration, callback) {
      var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return P._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$: function(milliseconds, callback) {
      var t1 = new P._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter: function($T) {
      return new P._AsyncAwaitCompleter(new P._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync: function(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait: function(object, bodyFunction) {
      P._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn: function(object, completer) {
      completer.complete$1(0, object);
    },
    _asyncRethrow: function(object, completer) {
      completer.completeError$2(H.unwrapException(object), H.getTraceFromException(object));
    },
    _awaitOnObject: function(object, bodyFunction) {
      var t1, future,
        thenCallback = new P._awaitOnObject_closure(bodyFunction),
        errorCallback = new P._awaitOnObject_closure0(bodyFunction);
      if (object instanceof P._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (type$.Future_dynamic._is(object))
          object.then$1$2$onError(thenCallback, errorCallback, t1);
        else {
          future = new P._Future($.Zone__current, type$._Future_dynamic);
          future._state = 4;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync: function($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new P._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    AsyncError$: function(error, stackTrace) {
      var t1 = H.checkNotNullable(error, "error", type$.Object);
      return new P.AsyncError(t1, stackTrace == null ? P.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    AsyncError_defaultStackTrace: function(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return C.C__StringStackTrace;
    },
    _invokeErrorHandler: function(errorHandler, error, stackTrace) {
      if (type$.dynamic_Function_2_Never_and_Never._is(errorHandler))
        return errorHandler.call$2(error, stackTrace);
      else
        return errorHandler.call$1(error);
    },
    Future_Future$value: function(value, $T) {
      var t1 = value == null ? $T._as(value) : value,
        t2 = new P._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t2._asyncComplete$1(t1);
      return t2;
    },
    Future_Future$error: function(error, stackTrace, $T) {
      var t1;
      H.checkNotNullable(error, "error", type$.Object);
      $.Zone__current !== C.C__RootZone;
      if (stackTrace == null)
        stackTrace = P.AsyncError_defaultStackTrace(error);
      t1 = new P._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t1._asyncCompleteError$2(error, stackTrace);
      return t1;
    },
    Future_wait: function(futures, eagerError, $T) {
      var _error_get, _error_set, _stackTrace_get, _stackTrace_set, handleError, future, pos, e, st, t1, _i, t2, exception, _box_0 = {}, cleanUp = null,
        _future = new P._Future($.Zone__current, $T._eval$1("_Future<List<0>>"));
      _box_0.values = null;
      _box_0.remaining = 0;
      _box_0._error = null;
      _error_get = new P.Future_wait__error_get(_box_0);
      _error_set = new P.Future_wait__error_set(_box_0);
      _box_0._stackTrace = null;
      _stackTrace_get = new P.Future_wait__stackTrace_get(_box_0);
      _stackTrace_set = new P.Future_wait__stackTrace_set(_box_0);
      handleError = new P.Future_wait_handleError(_box_0, cleanUp, true, _future, _error_set, _stackTrace_set, _error_get, _stackTrace_get);
      try {
        for (t1 = type$.Null, _i = 0, t2 = 0; _i < 2; ++_i) {
          future = futures[_i];
          pos = t2;
          future.then$1$2$onError(new P.Future_wait_closure(_box_0, pos, _future, cleanUp, true, _error_get, _stackTrace_get, $T), handleError, t1);
          t2 = ++_box_0.remaining;
        }
        if (t2 === 0) {
          t1 = _future;
          t1._completeWithValue$1(H.setRuntimeTypeInfo([], $T._eval$1("JSArray<0>")));
          return t1;
        }
        _box_0.values = P.List_List$filled(t2, null, false, $T._eval$1("0?"));
      } catch (exception) {
        e = H.unwrapException(exception);
        st = H.getTraceFromException(exception);
        t1 = P.Future_Future$error(e, st, $T._eval$1("List<0>"));
        return t1;
      }
      return _future;
    },
    _Future__chainCoreFuture: function(source, target) {
      var t1, t2, listeners;
      for (t1 = type$._Future_dynamic; t2 = source._state, t2 === 2;)
        source = t1._as(source._resultOrListeners);
      if (t2 >= 4) {
        listeners = target._removeListeners$0();
        target._state = source._state;
        target._resultOrListeners = source._resultOrListeners;
        P._Future__propagateToListeners(target, listeners);
      } else {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._state = 2;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners: function(source, listeners) {
      var t2, t3, t4, _box_0, hasError, asyncError, nextListener, nextListener0, t5, sourceResult, t6, t7, zone, oldZone, result, current, _null = null, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.nullable__FutureListener_dynamic_dynamic, t4 = type$.Future_dynamic; true;) {
        _box_0 = {};
        hasError = t1._state === 8;
        if (listeners == null) {
          if (hasError) {
            asyncError = t2._as(t1._resultOrListeners);
            P._rootHandleUncaughtError(_null, _null, t1._zone, asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          P._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t5 = _box_1.source;
        sourceResult = t5._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        t6 = !hasError;
        if (t6) {
          t7 = t1.state;
          t7 = (t7 & 1) !== 0 || (t7 & 15) === 8;
        } else
          t7 = true;
        if (t7) {
          zone = t1.result._zone;
          if (hasError) {
            t7 = t5._zone === zone;
            t7 = !(t7 || t7);
          } else
            t7 = false;
          if (t7) {
            t2._as(sourceResult);
            P._rootHandleUncaughtError(_null, _null, t5._zone, sourceResult.error, sourceResult.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = _null;
          t1 = t1.state;
          if ((t1 & 15) === 8)
            new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t6) {
            if ((t1 & 1) !== 0)
              new P._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new P._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t4._is(t1)) {
            t5 = _box_0.listener.$ti;
            t5 = t5._eval$1("Future<2>")._is(t1) || !t5._rest[1]._is(t1);
          } else
            t5 = false;
          if (t5) {
            t4._as(t1);
            result = _box_0.listener.result;
            if (t1._state >= 4) {
              current = t3._as(result._resultOrListeners);
              result._resultOrListeners = null;
              listeners = result._reverseListeners$1(current);
              result._state = t1._state;
              result._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              P._Future__chainCoreFuture(t1, result);
            return;
          }
        }
        result = _box_0.listener.result;
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t5 = _box_0.listenerValueOrError;
        if (!t1) {
          result.$ti._precomputed1._as(t5);
          result._state = 4;
          result._resultOrListeners = t5;
        } else {
          t2._as(t5);
          result._state = 8;
          result._resultOrListeners = t5;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler: function(errorHandler, zone) {
      var t1;
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      t1 = type$.dynamic_Function_Object;
      if (t1._is(errorHandler))
        return t1._as(errorHandler);
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a valid result"));
    },
    _microtaskLoop: function() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop: function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var _null = null,
        currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(_null, _null, C.C__RootZone, callback);
        return;
      }
      P._rootScheduleMicrotask(_null, _null, currentZone, type$.void_Function._as(currentZone.bindCallbackGuarded$1(callback)));
    },
    StreamIterator_StreamIterator: function(stream, $T) {
      H.checkNotNullable(stream, "stream", type$.Object);
      return new P._StreamIterator($T._eval$1("_StreamIterator<0>"));
    },
    StreamController_StreamController: function(sync, $T) {
      var _null = null;
      return new P._SyncStreamController(_null, _null, _null, _null, $T._eval$1("_SyncStreamController<0>"));
    },
    _runGuarded: function(notificationHandler) {
      var e, s, exception;
      if (notificationHandler == null)
        return;
      try {
        notificationHandler.call$0();
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(null, null, $.Zone__current, type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    _BufferingStreamSubscription__registerDataHandler: function(zone, handleData, $T) {
      var t1 = handleData == null ? P.async___nullDataHandler$closure() : handleData;
      return type$.$env_1_1_void._bind$1($T)._eval$1("1(2)")._as(t1);
    },
    _BufferingStreamSubscription__registerErrorHandler: function(zone, handleError) {
      if (handleError == null)
        handleError = P.async___nullErrorHandler$closure();
      if (type$.void_Function_Object_StackTrace._is(handleError))
        return zone.registerBinaryCallback$3$1(handleError, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.void_Function_Object._is(handleError))
        return type$.dynamic_Function_Object._as(handleError);
      throw H.wrapException(P.ArgumentError$(string$.handle));
    },
    _BufferingStreamSubscription__registerDoneHandler: function(zone, handleDone) {
      var t1 = handleDone == null ? P.async___nullDoneHandler$closure() : handleDone;
      return type$.void_Function._as(t1);
    },
    _nullDataHandler: function(value) {
    },
    _nullErrorHandler: function(error, stackTrace) {
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      P._rootHandleUncaughtError(null, null, $.Zone__current, error, stackTrace);
    },
    _nullDoneHandler: function() {
    },
    _DoneStreamSubscription$: function(_onDone, $T) {
      var t1 = new P._DoneStreamSubscription($.Zone__current, _onDone, $T._eval$1("_DoneStreamSubscription<0>"));
      t1._schedule$0();
      return t1;
    },
    _addErrorWithReplacement: function(sink, error, stackTrace) {
      sink._addError$2(error, stackTrace);
    },
    Timer_Timer: function(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return P.Timer__createTimer(duration, type$.void_Function._as(callback));
      return P.Timer__createTimer(duration, type$.void_Function._as(t1.bindCallbackGuarded$1(callback)));
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(error, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      type$.void_Function._as(f);
      if (C.C__RootZone !== zone)
        f = zone.bindCallbackGuarded$1(f);
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
      this._handle = null;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    Future_wait__error_set: function Future_wait__error_set(t0) {
      this._box_0 = t0;
    },
    Future_wait__stackTrace_set: function Future_wait__stackTrace_set(t0) {
      this._box_0 = t0;
    },
    Future_wait__error_get: function Future_wait__error_get(t0) {
      this._box_0 = t0;
    },
    Future_wait__stackTrace_get: function Future_wait__stackTrace_get(t0) {
      this._box_0 = t0;
    },
    Future_wait_handleError: function Future_wait_handleError(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._box_0 = t0;
      _.cleanUp = t1;
      _.eagerError = t2;
      _._future = t3;
      _._error_set = t4;
      _._stackTrace_set = t5;
      _._error_get = t6;
      _._stackTrace_get = t7;
    },
    Future_wait_closure: function Future_wait_closure(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._box_0 = t0;
      _.pos = t1;
      _._future = t2;
      _.cleanUp = t3;
      _.eagerError = t4;
      _._error_get = t5;
      _._stackTrace_get = t6;
      _.T = t7;
    },
    TimeoutException: function TimeoutException(t0, t1) {
      this.message = t0;
      this.duration = t1;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _SyncCompleter: function _SyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.$this = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _Future_timeout_closure: function _Future_timeout_closure(t0, t1) {
      this._future = t0;
      this.timeLimit = t1;
    },
    _Future_timeout_closure0: function _Future_timeout_closure0(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this._future = t2;
    },
    _Future_timeout_closure1: function _Future_timeout_closure1(t0, t1) {
      this._box_0 = t0;
      this._future = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_pipe_closure: function Stream_pipe_closure(t0) {
      this.streamConsumer = t0;
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    StreamConsumer: function StreamConsumer() {
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    _StreamController: function _StreamController() {
    },
    _StreamController__subscribe_closure: function _StreamController__subscribe_closure(t0) {
      this.$this = t0;
    },
    _StreamController__recordCancel_complete: function _StreamController__recordCancel_complete(t0) {
      this.$this = t0;
    },
    _SyncStreamControllerDispatch: function _SyncStreamControllerDispatch() {
    },
    _SyncStreamController: function _SyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _ControllerStream: function _ControllerStream(t0, t1) {
      this._async$_controller = t0;
      this.$ti = t1;
    },
    _ControllerSubscription: function _ControllerSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._async$_controller = t0;
      _._onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._async$_pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _AddStreamState_cancel_closure: function _AddStreamState_cancel_closure(t0) {
      this.$this = t0;
    },
    _BufferingStreamSubscription: function _BufferingStreamSubscription() {
    },
    _BufferingStreamSubscription_asFuture_closure: function _BufferingStreamSubscription_asFuture_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    _BufferingStreamSubscription_asFuture_closure0: function _BufferingStreamSubscription_asFuture_closure0(t0, t1) {
      this.$this = t0;
      this.result = t1;
    },
    _BufferingStreamSubscription_asFuture__closure: function _BufferingStreamSubscription_asFuture__closure(t0, t1, t2) {
      this.result = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendError_sendError: function _BufferingStreamSubscription__sendError_sendError(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendDone_sendDone: function _BufferingStreamSubscription__sendDone_sendDone(t0) {
      this.$this = t0;
    },
    _StreamImpl: function _StreamImpl() {
    },
    _DelayedEvent: function _DelayedEvent() {
    },
    _DelayedData: function _DelayedData(t0, t1) {
      this.value = t0;
      this.next = null;
      this.$ti = t1;
    },
    _DelayedError: function _DelayedError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
      this.next = null;
    },
    _DelayedDone: function _DelayedDone() {
    },
    _PendingEvents: function _PendingEvents() {
    },
    _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(t0, t1) {
      this.$this = t0;
      this.dispatch = t1;
    },
    _StreamImplEvents: function _StreamImplEvents(t0) {
      var _ = this;
      _.lastPendingEvent = _.firstPendingEvent = null;
      _._state = 0;
      _.$ti = t0;
    },
    _DoneStreamSubscription: function _DoneStreamSubscription(t0, t1, t2) {
      var _ = this;
      _._zone = t0;
      _._state = 0;
      _._onDone = t1;
      _.$ti = t2;
    },
    _DoneStreamSubscription_asFuture_closure: function _DoneStreamSubscription_asFuture_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    _StreamIterator: function _StreamIterator(t0) {
      this.$ti = t0;
    },
    _EmptyStream: function _EmptyStream(t0) {
      this.$ti = t0;
    },
    _ForwardingStream: function _ForwardingStream() {
    },
    _ForwardingStreamSubscription: function _ForwardingStreamSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._stream = t0;
      _._async$_subscription = null;
      _._onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._async$_pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _MapStream: function _MapStream(t0, t1, t2) {
      this._transform = t0;
      this._async$_source = t1;
      this.$ti = t2;
    },
    _HandleErrorStream: function _HandleErrorStream(t0, t1, t2, t3) {
      var _ = this;
      _._transform = t0;
      _._test = t1;
      _._async$_source = t2;
      _.$ti = t3;
    },
    _EventSinkWrapper: function _EventSinkWrapper(t0, t1) {
      this._async$_sink = t0;
      this.$ti = t1;
    },
    _SinkTransformerStreamSubscription: function _SinkTransformerStreamSubscription(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._async$_subscription = _.___SinkTransformerStreamSubscription__transformerSink = null;
      _._onData = t0;
      _._onError = t1;
      _._onDone = t2;
      _._zone = t3;
      _._state = t4;
      _._async$_pending = _._cancelFuture = null;
      _.$ti = t5;
    },
    _BoundSinkStream: function _BoundSinkStream(t0, t1, t2) {
      this._sinkMapper = t0;
      this._stream = t1;
      this.$ti = t2;
    },
    _Zone: function _Zone() {
    },
    _rootHandleUncaughtError_closure: function _rootHandleUncaughtError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    HashMap_HashMap: function($K, $V) {
      return new P._HashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_HashMap<1,2>"));
    },
    _HashMap__getTableEntry: function(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry: function(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__newHashTable: function() {
      var table = Object.create(null);
      P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
      delete table["<non-identifier-key>"];
      return table;
    },
    LinkedHashMap_LinkedHashMap: function($K, $V) {
      return new H.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
      return $K._eval$1("@<0>")._bind$1($V)._eval$1("LinkedHashMap<1,2>")._as(H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"))));
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return new H.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    HashSet_HashSet: function($E) {
      return new P._HashSet($E._eval$1("_HashSet<0>"));
    },
    _HashSet__newHashTable: function() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    HashMap_HashMap$from: function(other, $K, $V) {
      var result = P.HashMap_HashMap($K, $V);
      other.forEach$1(0, new P.HashMap_HashMap$from_closure(result, $K, $V));
      return result;
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = H.setRuntimeTypeInfo([], type$.JSArray_String);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = P.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current(it));
        C.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current(it);
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            C.JSArray_methods.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current(it);
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current(it);
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              C.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        C.JSArray_methods.add$1(parts, elision);
      C.JSArray_methods.add$1(parts, penultimateString);
      C.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashMap_LinkedHashMap$from: function(other, $K, $V) {
      var result = P.LinkedHashMap_LinkedHashMap($K, $V);
      other.forEach$1(0, new P.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    MapBase_mapToString: function(m) {
      var result, t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        J.forEach$1$ax(m, new P.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    ListQueue__calculateCapacity: function(initialCapacity) {
      return 8;
    },
    _HashMap: function _HashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._collection$_map = t0;
      _._keys = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _HashSet: function _HashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._elements = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashSetIterator: function _HashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._elements = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    HashMap_HashMap$from_closure: function HashMap_HashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    MapMixin_entries_closure: function MapMixin_entries_closure(t0) {
      this.$this = t0;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ListQueue: function ListQueue(t0, t1) {
      var _ = this;
      _._table = t0;
      _._modificationCount = _._tail = _._head = 0;
      _.$ti = t1;
    },
    _ListQueueIterator: function _ListQueueIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._queue = t0;
      _._end = t1;
      _._modificationCount = t2;
      _._collection$_position = t3;
      _._collection$_current = null;
      _.$ti = t4;
    },
    SetMixin: function SetMixin() {
    },
    _SetBase: function _SetBase() {
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    __SetBase_Object_SetMixin: function __SetBase_Object_SetMixin() {
    },
    _parseJson: function(source, reviver) {
      var e, exception, t1, parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.FormatException$(String(e), null, null);
        throw H.wrapException(t1);
      }
      t1 = P._convertJsonToDartLazy(parsed);
      return t1;
    },
    _convertJsonToDartLazy: function(object) {
      var i;
      if (object == null)
        return null;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new P._JsonMap(object, Object.create(null));
      for (i = 0; i < object.length; ++i)
        object[i] = P._convertJsonToDartLazy(object[i]);
      return object;
    },
    Base64Codec__checkPadding: function(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      if (C.JSInt_methods.$mod($length, 4) !== 0)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (firstPadding + paddingCount !== $length)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    _Base64Encoder_encodeChunk: function(alphabet, bytes, start, end, isLast, output, outputIndex, state) {
      var t1, t2, i, byteOr, byte, outputIndex0, t3, outputIndex1,
        bits = state >>> 2,
        expectedChars = 3 - (state & 3);
      for (t1 = J.getInterceptor$asx(bytes), t2 = output.length, i = start, byteOr = 0; i < end; ++i) {
        byte = t1.$index(bytes, i);
        byteOr = (byteOr | byte) >>> 0;
        bits = (bits << 8 | byte) & 16777215;
        --expectedChars;
        if (expectedChars === 0) {
          outputIndex0 = outputIndex + 1;
          t3 = C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 18 & 63);
          if (outputIndex >= t2)
            return H.ioore(output, outputIndex);
          output[outputIndex] = t3;
          outputIndex = outputIndex0 + 1;
          t3 = C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 12 & 63);
          if (outputIndex0 >= t2)
            return H.ioore(output, outputIndex0);
          output[outputIndex0] = t3;
          outputIndex0 = outputIndex + 1;
          t3 = C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 6 & 63);
          if (outputIndex >= t2)
            return H.ioore(output, outputIndex);
          output[outputIndex] = t3;
          outputIndex = outputIndex0 + 1;
          t3 = C.JSString_methods._codeUnitAt$1(alphabet, bits & 63);
          if (outputIndex0 >= t2)
            return H.ioore(output, outputIndex0);
          output[outputIndex0] = t3;
          bits = 0;
          expectedChars = 3;
        }
      }
      if (byteOr >= 0 && byteOr <= 255) {
        if (isLast && expectedChars < 3) {
          outputIndex0 = outputIndex + 1;
          outputIndex1 = outputIndex0 + 1;
          if (3 - expectedChars === 1) {
            t1 = C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 2 & 63);
            if (outputIndex >= t2)
              return H.ioore(output, outputIndex);
            output[outputIndex] = t1;
            t1 = C.JSString_methods._codeUnitAt$1(alphabet, bits << 4 & 63);
            if (outputIndex0 >= t2)
              return H.ioore(output, outputIndex0);
            output[outputIndex0] = t1;
            outputIndex = outputIndex1 + 1;
            if (outputIndex1 >= t2)
              return H.ioore(output, outputIndex1);
            output[outputIndex1] = 61;
            if (outputIndex >= t2)
              return H.ioore(output, outputIndex);
            output[outputIndex] = 61;
          } else {
            t1 = C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 10 & 63);
            if (outputIndex >= t2)
              return H.ioore(output, outputIndex);
            output[outputIndex] = t1;
            t1 = C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 4 & 63);
            if (outputIndex0 >= t2)
              return H.ioore(output, outputIndex0);
            output[outputIndex0] = t1;
            outputIndex = outputIndex1 + 1;
            t1 = C.JSString_methods._codeUnitAt$1(alphabet, bits << 2 & 63);
            if (outputIndex1 >= t2)
              return H.ioore(output, outputIndex1);
            output[outputIndex1] = t1;
            if (outputIndex >= t2)
              return H.ioore(output, outputIndex);
            output[outputIndex] = 61;
          }
          return 0;
        }
        return (bits << 2 | 3 - expectedChars) >>> 0;
      }
      for (i = start; i < end;) {
        byte = t1.$index(bytes, i);
        if (byte < 0 || byte > 255)
          break;
        ++i;
      }
      throw H.wrapException(P.ArgumentError$value(bytes, "Not a byte value at index " + i + ": 0x" + J.toRadixString$1$n(t1.$index(bytes, i), 16), null));
    },
    JsonUnsupportedObjectError$: function(unsupportedObject, cause, partialResult) {
      return new P.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    _defaultToEncodable: function(object) {
      return object.toJson$0();
    },
    _JsonStringStringifier$: function(_sink, _toEncodable) {
      return new P._JsonStringStringifier(_sink, [], P.convert___defaultToEncodable$closure());
    },
    _JsonStringStringifier_stringify: function(object, toEncodable, indent) {
      var t1,
        output = new P.StringBuffer("");
      P._JsonStringStringifier_printOn(object, output, toEncodable, indent);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _JsonStringStringifier_printOn: function(object, output, toEncodable, indent) {
      var stringifier = P._JsonStringStringifier$(output, toEncodable);
      stringifier.writeObject$1(object);
    },
    _JsonMap: function _JsonMap(t0, t1) {
      this._original = t0;
      this._processed = t1;
      this._data = null;
    },
    _JsonMapKeyIterable: function _JsonMapKeyIterable(t0) {
      this._convert$_parent = t0;
    },
    _JsonDecoderSink: function _JsonDecoderSink(t0, t1, t2) {
      this._reviver = t0;
      this._convert$_sink = t1;
      this._stringSink = t2;
    },
    Base64Codec: function Base64Codec() {
    },
    Base64Encoder: function Base64Encoder() {
    },
    _Base64Encoder: function _Base64Encoder() {
    },
    _BufferCachingBase64Encoder: function _BufferCachingBase64Encoder(t0) {
      this.bufferCache = null;
      this._convert$_state = 0;
      this._alphabet = t0;
    },
    _Base64EncoderSink: function _Base64EncoderSink() {
    },
    _AsciiBase64EncoderSink: function _AsciiBase64EncoderSink(t0, t1) {
      this._convert$_sink = t0;
      this._encoder = t1;
    },
    ByteConversionSink: function ByteConversionSink() {
    },
    ByteConversionSinkBase: function ByteConversionSinkBase() {
    },
    _ByteAdapterSink: function _ByteAdapterSink(t0) {
      this._convert$_sink = t0;
    },
    ChunkedConversionSink: function ChunkedConversionSink() {
    },
    _ConverterStreamEventSink: function _ConverterStreamEventSink(t0, t1, t2) {
      this._eventSink = t0;
      this._chunkedSink = t1;
      this.$ti = t2;
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    Converter_bind_closure: function Converter_bind_closure(t0) {
      this.$this = t0;
    },
    Encoding: function Encoding() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCodec: function JsonCodec() {
    },
    JsonEncoder: function JsonEncoder(t0) {
      this._toEncodable = t0;
    },
    _JsonEncoderSink: function _JsonEncoderSink(t0, t1, t2) {
      var _ = this;
      _._indent = t0;
      _._toEncodable = t1;
      _._convert$_sink = t2;
      _._isDone = false;
    },
    JsonDecoder: function JsonDecoder(t0) {
      this._reviver = t0;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._convert$_sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    Latin1Codec: function Latin1Codec() {
    },
    _StringConversionSinkAsStringSinkAdapter: function _StringConversionSinkAsStringSinkAdapter(t0, t1) {
      this._buffer = t0;
      this._chunkedSink = t1;
    },
    StringConversionSinkBase: function StringConversionSinkBase() {
    },
    StringConversionSinkMixin: function StringConversionSinkMixin() {
    },
    _StringSinkConversionSink: function _StringSinkConversionSink() {
    },
    _StringAdapterSink: function _StringAdapterSink(t0) {
      this._convert$_sink = t0;
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = this._carry = 0;
      this._buffer = t0;
    },
    _Utf8EncoderSink: function _Utf8EncoderSink(t0, t1) {
      var _ = this;
      _._convert$_sink = t0;
      _._bufferIndex = _._carry = 0;
      _._buffer = t1;
    },
    __Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin: function __Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin() {
    },
    int_parse: function(source, radix) {
      var value = H.Primitives_parseInt(source, radix);
      if (value != null)
        return value;
      throw H.wrapException(P.FormatException$(source, null, null));
    },
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    Stopwatch__now: function() {
      return $.Primitives_timerTicks.call$0();
    },
    List_List$filled: function($length, fill, growable, $E) {
      var i,
        result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < $length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from: function(elements, $E) {
      var t1,
        list = H.setRuntimeTypeInfo([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        C.JSArray_methods.add$1(list, $E._as(t1.get$current(t1)));
      return list;
    },
    String_String$fromCharCodes: function(charCodes, start, end) {
      var array, len;
      if (Array.isArray(charCodes)) {
        array = charCodes;
        len = array.length;
        end = P.RangeError_checkValidRange(start, end, len);
        return H.Primitives_stringFromCharCodes(start > 0 || end < len ? array.slice(start, end) : array);
      }
      if (type$.NativeUint8List._is(charCodes))
        return H.Primitives_stringFromNativeUint8List(charCodes, start, P.RangeError_checkValidRange(start, end, charCodes.length));
      return P.String__stringFromIterable(charCodes, start, end);
    },
    String__stringFromIterable: function(charCodes, start, end) {
      var t1, it, i, list, _null = null;
      if (start < 0)
        throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(charCodes), _null, _null));
      t1 = end == null;
      if (!t1 && end < start)
        throw H.wrapException(P.RangeError$range(end, start, J.get$length$asx(charCodes), _null, _null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw H.wrapException(P.RangeError$range(start, 0, i, _null, _null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current(it));
      else
        for (i = start; i < end; ++i) {
          if (!it.moveNext$0())
            throw H.wrapException(P.RangeError$range(end, start, i, _null, _null));
          list.push(it.get$current(it));
        }
      return H.Primitives_stringFromCharCodes(list);
    },
    RegExp_RegExp: function(source, caseSensitive) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, false, caseSensitive, false, false, false));
    },
    StringBuffer__writeAll: function(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += H.S(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      } else {
        string += H.S(iterator.get$current(iterator));
        for (; iterator.moveNext$0();)
          string = string + separator + H.S(iterator.get$current(iterator));
      }
      return string;
    },
    DateTime__fourDigits: function(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits: function(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Error_safeToString: function(object) {
      if (typeof object == "number" || H._isBool(object) || null == object)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    AssertionError$: function(message) {
      return new P.AssertionError(message);
    },
    ArgumentError$: function(message) {
      return new P.ArgumentError(false, null, null, message);
    },
    ArgumentError$value: function(value, $name, message) {
      return new P.ArgumentError(true, value, $name, message);
    },
    ArgumentError$notNull: function($name) {
      return new P.ArgumentError(false, null, $name, "Must not be null");
    },
    RangeError$value: function(value, $name) {
      return new P.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
      return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValidRange: function(start, end, $length) {
      if (0 > start || start > $length)
        throw H.wrapException(P.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw H.wrapException(P.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative: function(value, $name) {
      if (value < 0)
        throw H.wrapException(P.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$: function(invalidValue, indexable, $name, message, $length) {
      var t1 = H._asInt($length == null ? J.get$length$asx(indexable) : $length);
      return new P.IndexError(t1, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$: function(message) {
      return new P.UnsupportedError(message);
    },
    UnimplementedError$: function(message) {
      return new P.UnimplementedError(message);
    },
    StateError$: function(message) {
      return new P.StateError(message);
    },
    ConcurrentModificationError$: function(modifiedObject) {
      return new P.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception: function(message) {
      return new P._Exception(message);
    },
    FormatException$: function(message, source, offset) {
      return new P.FormatException(message, source, offset);
    },
    Uri_parse: function(uri) {
      var delta, indices, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, t1, t2, schemeAuth, queryStart0, pathStart0, userInfoStart, userInfo, host, portNumber, port, path, query, _null = null,
        end = uri.length;
      if (end >= 5) {
        delta = ((C.JSString_methods._codeUnitAt$1(uri, 4) ^ 58) * 3 | C.JSString_methods._codeUnitAt$1(uri, 0) ^ 100 | C.JSString_methods._codeUnitAt$1(uri, 1) ^ 97 | C.JSString_methods._codeUnitAt$1(uri, 2) ^ 116 | C.JSString_methods._codeUnitAt$1(uri, 3) ^ 97) >>> 0;
        if (delta === 0)
          return P.UriData__parse(end < end ? C.JSString_methods.substring$2(uri, 0, end) : uri, 5, _null).get$uri();
        else if (delta === 32)
          return P.UriData__parse(C.JSString_methods.substring$2(uri, 5, end), 0, _null).get$uri();
      }
      indices = P.List_List$filled(8, 0, false, type$.int);
      C.JSArray_methods.$indexSet(indices, 0, 0);
      C.JSArray_methods.$indexSet(indices, 1, -1);
      C.JSArray_methods.$indexSet(indices, 2, -1);
      C.JSArray_methods.$indexSet(indices, 7, -1);
      C.JSArray_methods.$indexSet(indices, 3, 0);
      C.JSArray_methods.$indexSet(indices, 4, 0);
      C.JSArray_methods.$indexSet(indices, 5, end);
      C.JSArray_methods.$indexSet(indices, 6, end);
      if (P._scan(uri, 0, end, 0, indices) >= 14)
        C.JSArray_methods.$indexSet(indices, 7, end);
      schemeEnd = indices[1];
      if (schemeEnd >= 0)
        if (P._scan(uri, 0, schemeEnd, 20, indices) === 20)
          indices[7] = schemeEnd;
      hostStart = indices[2] + 1;
      portStart = indices[3];
      pathStart = indices[4];
      queryStart = indices[5];
      fragmentStart = indices[6];
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (portStart < hostStart)
        portStart = pathStart;
      isSimple = indices[7] < 0;
      if (isSimple)
        if (hostStart > schemeEnd + 3) {
          scheme = _null;
          isSimple = false;
        } else {
          t1 = portStart > 0;
          if (t1 && portStart + 1 === pathStart) {
            scheme = _null;
            isSimple = false;
          } else {
            if (!(queryStart < end && queryStart === pathStart + 2 && C.JSString_methods.startsWith$2(uri, "..", pathStart)))
              t2 = queryStart > pathStart + 2 && C.JSString_methods.startsWith$2(uri, "/..", queryStart - 3);
            else
              t2 = true;
            if (t2) {
              scheme = _null;
              isSimple = false;
            } else {
              if (schemeEnd === 4)
                if (C.JSString_methods.startsWith$2(uri, "file", 0)) {
                  if (hostStart <= 0) {
                    if (!C.JSString_methods.startsWith$2(uri, "/", pathStart)) {
                      schemeAuth = "file:///";
                      delta = 3;
                    } else {
                      schemeAuth = "file://";
                      delta = 2;
                    }
                    uri = schemeAuth + C.JSString_methods.substring$2(uri, pathStart, end);
                    schemeEnd -= 0;
                    t1 = delta - 0;
                    queryStart += t1;
                    fragmentStart += t1;
                    end = uri.length;
                    hostStart = 7;
                    portStart = 7;
                    pathStart = 7;
                  } else if (pathStart === queryStart) {
                    ++fragmentStart;
                    queryStart0 = queryStart + 1;
                    uri = C.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                    ++end;
                    queryStart = queryStart0;
                  }
                  scheme = "file";
                } else if (C.JSString_methods.startsWith$2(uri, "http", 0)) {
                  if (t1 && portStart + 3 === pathStart && C.JSString_methods.startsWith$2(uri, "80", portStart + 1)) {
                    fragmentStart -= 3;
                    pathStart0 = pathStart - 3;
                    queryStart -= 3;
                    uri = C.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                    end -= 3;
                    pathStart = pathStart0;
                  }
                  scheme = "http";
                } else
                  scheme = _null;
              else if (schemeEnd === 5 && C.JSString_methods.startsWith$2(uri, "https", 0)) {
                if (t1 && portStart + 4 === pathStart && C.JSString_methods.startsWith$2(uri, "443", portStart + 1)) {
                  fragmentStart -= 4;
                  pathStart0 = pathStart - 4;
                  queryStart -= 4;
                  uri = C.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                  end -= 3;
                  pathStart = pathStart0;
                }
                scheme = "https";
              } else
                scheme = _null;
              isSimple = true;
            }
          }
        }
      else
        scheme = _null;
      if (isSimple) {
        if (end < uri.length) {
          uri = C.JSString_methods.substring$2(uri, 0, end);
          schemeEnd -= 0;
          hostStart -= 0;
          portStart -= 0;
          pathStart -= 0;
          queryStart -= 0;
          fragmentStart -= 0;
        }
        return new P._SimpleUri(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      }
      if (scheme == null)
        if (schemeEnd > 0)
          scheme = P._Uri__makeScheme(uri, 0, schemeEnd);
        else {
          if (schemeEnd === 0)
            P._Uri__fail(uri, 0, "Invalid empty scheme");
          scheme = "";
        }
      if (hostStart > 0) {
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? P._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = P._Uri__makeHost(uri, hostStart, portStart, false);
        t1 = portStart + 1;
        if (t1 < pathStart) {
          portNumber = H.Primitives_parseInt(C.JSString_methods.substring$2(uri, t1, pathStart), _null);
          port = P._Uri__makePort(portNumber == null ? H.throwExpression(P.FormatException$("Invalid port", uri, t1)) : portNumber, scheme);
        } else
          port = _null;
      } else {
        port = _null;
        host = port;
        userInfo = "";
      }
      path = P._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      query = queryStart < fragmentStart ? P._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      return new P._Uri(scheme, userInfo, host, port, path, query, fragmentStart < end ? P._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    Uri__parseIPv4Address: function(host, start, end) {
      var i, partStart, partIndex, char, part, partIndex0,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _s37_ = "each part must be in the range 0..255",
        error = new P.Uri__parseIPv4Address_error(host),
        result = new Uint8Array(4);
      for (i = start, partStart = i, partIndex = 0; i < end; ++i) {
        char = C.JSString_methods.codeUnitAt$1(host, i);
        if (char !== 46) {
          if ((char ^ 48) > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = P.int_parse(C.JSString_methods.substring$2(host, partStart, i), null);
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          if (partIndex >= 4)
            return H.ioore(result, partIndex);
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = P.int_parse(C.JSString_methods.substring$2(host, partStart, end), null);
      if (part > 255)
        error.call$2(_s37_, partStart);
      if (partIndex >= 4)
        return H.ioore(result, partIndex);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address: function(host, start, end) {
      var parts, i, partStart, wildcardSeen, seenDot, char, atEnd, t1, last, bytes, wildCardLength, index, value, j, t2,
        error = new P.Uri_parseIPv6Address_error(host),
        parseHex = new P.Uri_parseIPv6Address_parseHex(error, host);
      if (host.length < 2)
        error.call$1("address is too short");
      parts = H.setRuntimeTypeInfo([], type$.JSArray_int);
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; i < end; ++i) {
        char = C.JSString_methods.codeUnitAt$1(host, i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (C.JSString_methods.codeUnitAt$1(host, i) !== 58)
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            C.JSArray_methods.add$1(parts, -1);
            wildcardSeen = true;
          } else
            C.JSArray_methods.add$1(parts, parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        error.call$1("too few parts");
      atEnd = partStart === end;
      t1 = C.JSArray_methods.get$last(parts);
      if (atEnd && t1 !== -1)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          C.JSArray_methods.add$1(parts, parseHex.call$2(partStart, end));
        else {
          last = P.Uri__parseIPv4Address(host, partStart, end);
          C.JSArray_methods.add$1(parts, (last[0] << 8 | last[1]) >>> 0);
          C.JSArray_methods.add$1(parts, (last[2] << 8 | last[3]) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$1("an address with a wildcard must have less than 7 parts");
      } else if (parts.length !== 8)
        error.call$1("an address without a wildcard must contain exactly 8 parts");
      bytes = new Uint8Array(16);
      for (t1 = parts.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            if (index < 0 || index >= 16)
              return H.ioore(bytes, index);
            bytes[index] = 0;
            t2 = index + 1;
            if (t2 >= 16)
              return H.ioore(bytes, t2);
            bytes[t2] = 0;
            index += 2;
          }
        else {
          t2 = C.JSInt_methods._shrOtherPositive$1(value, 8);
          if (index < 0 || index >= 16)
            return H.ioore(bytes, index);
          bytes[index] = t2;
          t2 = index + 1;
          if (t2 >= 16)
            return H.ioore(bytes, t2);
          bytes[t2] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri__Uri: function(host, port) {
      var query, fragment, t1, hasAuthority, path, t2, _null = null,
        userInfo = P._Uri__makeUserInfo(_null, 0, 0);
      host = P._Uri__makeHost(host, 0, host.length, false);
      query = P._Uri__makeQuery(_null, 0, 0, _null);
      fragment = P._Uri__makeFragment(_null, 0, 0);
      port = P._Uri__makePort(port, "");
      if (host == null)
        t1 = userInfo.length !== 0 || port != null || false;
      else
        t1 = false;
      if (t1)
        host = "";
      t1 = host == null;
      hasAuthority = !t1;
      path = P._Uri__makePath(_null, 0, 0, _null, "", hasAuthority);
      t2 = t1 && !C.JSString_methods.startsWith$1(path, "/");
      if (t2)
        path = P._Uri__normalizeRelativePath(path, hasAuthority);
      else
        path = P._Uri__removeDotSegments(path);
      return new P._Uri("", userInfo, t1 && C.JSString_methods.startsWith$1(path, "//") ? "" : host, port, path, query, fragment);
    },
    _Uri__defaultPort: function(scheme) {
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__compareScheme: function(scheme, uri) {
      var t1, i, schemeChar, uriChar, delta, lowerChar;
      for (t1 = scheme.length, i = 0; i < t1; ++i) {
        schemeChar = C.JSString_methods._codeUnitAt$1(scheme, i);
        uriChar = C.JSString_methods._codeUnitAt$1(uri, i);
        delta = schemeChar ^ uriChar;
        if (delta !== 0) {
          if (delta === 32) {
            lowerChar = uriChar | delta;
            if (97 <= lowerChar && lowerChar <= 122)
              continue;
          }
          return false;
        }
      }
      return true;
    },
    _Uri__fail: function(uri, index, message) {
      throw H.wrapException(P.FormatException$(message, uri, index));
    },
    _Uri__makePort: function(port, scheme) {
      if (port != null && port === P._Uri__defaultPort(scheme))
        return null;
      return port;
    },
    _Uri__makeHost: function(host, start, end, strictIPv6) {
      var t1, t2, index, zoneIDstart, zoneID, i;
      if (start === end)
        return "";
      if (C.JSString_methods.codeUnitAt$1(host, start) === 91) {
        t1 = end - 1;
        if (C.JSString_methods.codeUnitAt$1(host, t1) !== 93)
          P._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        t2 = start + 1;
        index = P._Uri__checkZoneID(host, t2, t1);
        if (index < t1) {
          zoneIDstart = index + 1;
          zoneID = P._Uri__normalizeZoneID(host, C.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, t1, "%25");
        } else
          zoneID = "";
        P.Uri_parseIPv6Address(host, t2, index);
        return C.JSString_methods.substring$2(host, start, index).toLowerCase() + zoneID + "]";
      }
      for (i = start; i < end; ++i)
        if (C.JSString_methods.codeUnitAt$1(host, i) === 58) {
          index = C.JSString_methods.indexOf$2(host, "%", start);
          index = index >= start && index < end ? index : end;
          if (index < end) {
            zoneIDstart = index + 1;
            zoneID = P._Uri__normalizeZoneID(host, C.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, end, "%25");
          } else
            zoneID = "";
          P.Uri_parseIPv6Address(host, start, index);
          return "[" + C.JSString_methods.substring$2(host, start, index) + zoneID + "]";
        }
      return P._Uri__normalizeRegName(host, start, end);
    },
    _Uri__checkZoneID: function(host, start, end) {
      var index = C.JSString_methods.indexOf$2(host, "%", start);
      return index >= start && index < end ? index : end;
    },
    _Uri__normalizeZoneID: function(host, start, end, prefix) {
      var index, sectionStart, isNormalized, char, replacement, t1, t2, tail, sourceLength, slice,
        buffer = prefix !== "" ? new P.StringBuffer(prefix) : null;
      for (index = start, sectionStart = index, isNormalized = true; index < end;) {
        char = C.JSString_methods.codeUnitAt$1(host, index);
        if (char === 37) {
          replacement = P._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new P.StringBuffer("");
          t2 = buffer._contents += C.JSString_methods.substring$2(host, sectionStart, index);
          if (t1)
            replacement = C.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%")
            P._Uri__fail(host, index, "ZoneID should not contain % anymore");
          buffer._contents = t2 + replacement;
          index += 3;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t1 = char >>> 4;
            if (t1 >= 8)
              return H.ioore(C.List_nxB, t1);
            t1 = (C.List_nxB[t1] & 1 << (char & 15)) !== 0;
          } else
            t1 = false;
          if (t1) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new P.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += C.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if ((char & 64512) === 55296 && index + 1 < end) {
              tail = C.JSString_methods.codeUnitAt$1(host, index + 1);
              if ((tail & 64512) === 56320) {
                char = (char & 1023) << 10 | tail & 1023 | 65536;
                sourceLength = 2;
              } else
                sourceLength = 1;
            } else
              sourceLength = 1;
            slice = C.JSString_methods.substring$2(host, sectionStart, index);
            if (buffer == null) {
              buffer = new P.StringBuffer("");
              t1 = buffer;
            } else
              t1 = buffer;
            t1._contents += slice;
            t1._contents += P._Uri__escapeChar(char);
            index += sourceLength;
            sectionStart = index;
          }
        }
      }
      if (buffer == null)
        return C.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end)
        buffer._contents += C.JSString_methods.substring$2(host, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__normalizeRegName: function(host, start, end) {
      var index, sectionStart, buffer, isNormalized, char, replacement, t1, slice, t2, sourceLength, tail;
      for (index = start, sectionStart = index, buffer = null, isNormalized = true; index < end;) {
        char = C.JSString_methods.codeUnitAt$1(host, index);
        if (char === 37) {
          replacement = P._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new P.StringBuffer("");
          slice = C.JSString_methods.substring$2(host, sectionStart, index);
          t2 = buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
          if (t1) {
            replacement = C.JSString_methods.substring$2(host, index, index + 3);
            sourceLength = 3;
          } else if (replacement === "%") {
            replacement = "%25";
            sourceLength = 1;
          } else
            sourceLength = 3;
          buffer._contents = t2 + replacement;
          index += sourceLength;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t1 = char >>> 4;
            if (t1 >= 8)
              return H.ioore(C.List_qNA, t1);
            t1 = (C.List_qNA[t1] & 1 << (char & 15)) !== 0;
          } else
            t1 = false;
          if (t1) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new P.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += C.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if (char <= 93) {
              t1 = char >>> 4;
              if (t1 >= 8)
                return H.ioore(C.List_2Vk0, t1);
              t1 = (C.List_2Vk0[t1] & 1 << (char & 15)) !== 0;
            } else
              t1 = false;
            if (t1)
              P._Uri__fail(host, index, "Invalid character");
            else {
              if ((char & 64512) === 55296 && index + 1 < end) {
                tail = C.JSString_methods.codeUnitAt$1(host, index + 1);
                if ((tail & 64512) === 56320) {
                  char = (char & 1023) << 10 | tail & 1023 | 65536;
                  sourceLength = 2;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
              slice = C.JSString_methods.substring$2(host, sectionStart, index);
              if (!isNormalized)
                slice = slice.toLowerCase();
              if (buffer == null) {
                buffer = new P.StringBuffer("");
                t1 = buffer;
              } else
                t1 = buffer;
              t1._contents += slice;
              t1._contents += P._Uri__escapeChar(char);
              index += sourceLength;
              sectionStart = index;
            }
          }
        }
      }
      if (buffer == null)
        return C.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = C.JSString_methods.substring$2(host, sectionStart, end);
        buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeScheme: function(scheme, start, end) {
      var i, containsUpperCase, codeUnit, t1;
      if (start === end)
        return "";
      if (!P._Uri__isAlphabeticCharacter(C.JSString_methods._codeUnitAt$1(scheme, start)))
        P._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      for (i = start, containsUpperCase = false; i < end; ++i) {
        codeUnit = C.JSString_methods._codeUnitAt$1(scheme, i);
        if (codeUnit < 128) {
          t1 = codeUnit >>> 4;
          if (t1 >= 8)
            return H.ioore(C.List_JYB, t1);
          t1 = (C.List_JYB[t1] & 1 << (codeUnit & 15)) !== 0;
        } else
          t1 = false;
        if (!t1)
          P._Uri__fail(scheme, i, "Illegal scheme character");
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
      }
      scheme = C.JSString_methods.substring$2(scheme, start, end);
      return P._Uri__canonicalizeScheme(containsUpperCase ? scheme.toLowerCase() : scheme);
    },
    _Uri__canonicalizeScheme: function(scheme) {
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo: function(userInfo, start, end) {
      if (userInfo == null)
        return "";
      return P._Uri__normalizeOrSubstring(userInfo, start, end, C.List_gRj, false);
    },
    _Uri__makePath: function(path, start, end, pathSegments, scheme, hasAuthority) {
      var result,
        isFile = scheme === "file",
        ensureLeadingSlash = isFile || hasAuthority;
      if (path == null)
        return isFile ? "/" : "";
      else
        result = P._Uri__normalizeOrSubstring(path, start, end, C.List_qg4, true);
      if (result.length === 0) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !C.JSString_methods.startsWith$1(result, "/"))
        result = "/" + result;
      return P._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath: function(path, scheme, hasAuthority) {
      var t1 = scheme.length === 0;
      if (t1 && !hasAuthority && !C.JSString_methods.startsWith$1(path, "/"))
        return P._Uri__normalizeRelativePath(path, !t1 || hasAuthority);
      return P._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery: function(query, start, end, queryParameters) {
      if (query != null)
        return P._Uri__normalizeOrSubstring(query, start, end, C.List_CVk, true);
      return null;
    },
    _Uri__makeFragment: function(fragment, start, end) {
      if (fragment == null)
        return null;
      return P._Uri__normalizeOrSubstring(fragment, start, end, C.List_CVk, true);
    },
    _Uri__normalizeEscape: function(source, index, lowerCase) {
      var firstDigit, secondDigit, firstDigitValue, secondDigitValue, value,
        t1 = index + 2;
      if (t1 >= source.length)
        return "%";
      firstDigit = C.JSString_methods.codeUnitAt$1(source, index + 1);
      secondDigit = C.JSString_methods.codeUnitAt$1(source, t1);
      firstDigitValue = H.hexDigitValue(firstDigit);
      secondDigitValue = H.hexDigitValue(secondDigit);
      if (firstDigitValue < 0 || secondDigitValue < 0)
        return "%";
      value = firstDigitValue * 16 + secondDigitValue;
      if (value < 127) {
        t1 = C.JSInt_methods._shrOtherPositive$1(value, 4);
        if (t1 >= 8)
          return H.ioore(C.List_nxB, t1);
        t1 = (C.List_nxB[t1] & 1 << (value & 15)) !== 0;
      } else
        t1 = false;
      if (t1)
        return H.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (firstDigit >= 97 || secondDigit >= 97)
        return C.JSString_methods.substring$2(source, index, index + 3).toUpperCase();
      return null;
    },
    _Uri__escapeChar: function(char) {
      var codeUnits, flag, encodedBytes, t1, index, byte, t2, t3,
        _s16_ = "0123456789ABCDEF";
      if (char < 128) {
        codeUnits = new Uint8Array(3);
        codeUnits[0] = 37;
        codeUnits[1] = C.JSString_methods._codeUnitAt$1(_s16_, char >>> 4);
        codeUnits[2] = C.JSString_methods._codeUnitAt$1(_s16_, char & 15);
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        t1 = 3 * encodedBytes;
        codeUnits = new Uint8Array(t1);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = C.JSInt_methods._shrReceiverPositive$1(char, 6 * encodedBytes) & 63 | flag;
          if (index >= t1)
            return H.ioore(codeUnits, index);
          codeUnits[index] = 37;
          t2 = index + 1;
          t3 = C.JSString_methods._codeUnitAt$1(_s16_, byte >>> 4);
          if (t2 >= t1)
            return H.ioore(codeUnits, t2);
          codeUnits[t2] = t3;
          t3 = index + 2;
          t2 = C.JSString_methods._codeUnitAt$1(_s16_, byte & 15);
          if (t3 >= t1)
            return H.ioore(codeUnits, t3);
          codeUnits[t3] = t2;
          index += 3;
        }
      }
      return P.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring: function(component, start, end, charTable, escapeDelimiters) {
      var t1 = P._Uri__normalize(component, start, end, charTable, escapeDelimiters);
      return t1 == null ? C.JSString_methods.substring$2(component, start, end) : t1;
    },
    _Uri__normalize: function(component, start, end, charTable, escapeDelimiters) {
      var t1, index, sectionStart, buffer, char, t2, replacement, sourceLength, tail, _null = null;
      for (t1 = !escapeDelimiters, index = start, sectionStart = index, buffer = _null; index < end;) {
        char = C.JSString_methods.codeUnitAt$1(component, index);
        if (char < 127) {
          t2 = char >>> 4;
          if (t2 >= 8)
            return H.ioore(charTable, t2);
          t2 = (charTable[t2] & 1 << (char & 15)) !== 0;
        } else
          t2 = false;
        if (t2)
          ++index;
        else {
          if (char === 37) {
            replacement = P._Uri__normalizeEscape(component, index, false);
            if (replacement == null) {
              index += 3;
              continue;
            }
            if ("%" === replacement) {
              replacement = "%25";
              sourceLength = 1;
            } else
              sourceLength = 3;
          } else {
            if (t1)
              if (char <= 93) {
                t2 = char >>> 4;
                if (t2 >= 8)
                  return H.ioore(C.List_2Vk0, t2);
                t2 = (C.List_2Vk0[t2] & 1 << (char & 15)) !== 0;
              } else
                t2 = false;
            else
              t2 = false;
            if (t2) {
              P._Uri__fail(component, index, "Invalid character");
              sourceLength = _null;
              replacement = sourceLength;
            } else {
              if ((char & 64512) === 55296) {
                t2 = index + 1;
                if (t2 < end) {
                  tail = C.JSString_methods.codeUnitAt$1(component, t2);
                  if ((tail & 64512) === 56320) {
                    char = (char & 1023) << 10 | tail & 1023 | 65536;
                    sourceLength = 2;
                  } else
                    sourceLength = 1;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
              replacement = P._Uri__escapeChar(char);
            }
          }
          if (buffer == null) {
            buffer = new P.StringBuffer("");
            t2 = buffer;
          } else
            t2 = buffer;
          t2._contents += C.JSString_methods.substring$2(component, sectionStart, index);
          t2._contents += H.S(replacement);
          if (typeof sourceLength !== "number")
            return H.iae(sourceLength);
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return _null;
      if (sectionStart < end)
        buffer._contents += C.JSString_methods.substring$2(component, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__mayContainDotSegments: function(path) {
      if (C.JSString_methods.startsWith$1(path, "."))
        return true;
      return C.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments: function(path) {
      var output, t1, t2, appendSlash, _i, segment, t3;
      if (!P._Uri__mayContainDotSegments(path))
        return path;
      output = H.setRuntimeTypeInfo([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (J.$eq$(segment, "..")) {
          t3 = output.length;
          if (t3 !== 0) {
            if (0 >= t3)
              return H.ioore(output, -1);
            output.pop();
            if (output.length === 0)
              C.JSArray_methods.add$1(output, "");
          }
          appendSlash = true;
        } else if ("." === segment)
          appendSlash = true;
        else {
          C.JSArray_methods.add$1(output, segment);
          appendSlash = false;
        }
      }
      if (appendSlash)
        C.JSArray_methods.add$1(output, "");
      return C.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath: function(path, allowScheme) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!P._Uri__mayContainDotSegments(path))
        return !allowScheme ? P._Uri__escapeScheme(path) : path;
      output = H.setRuntimeTypeInfo([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (".." === segment)
          if (output.length !== 0 && C.JSArray_methods.get$last(output) !== "..") {
            if (0 >= output.length)
              return H.ioore(output, -1);
            output.pop();
            appendSlash = true;
          } else {
            C.JSArray_methods.add$1(output, "..");
            appendSlash = false;
          }
        else if ("." === segment)
          appendSlash = true;
        else {
          C.JSArray_methods.add$1(output, segment);
          appendSlash = false;
        }
      }
      t1 = output.length;
      if (t1 !== 0)
        if (t1 === 1) {
          if (0 >= t1)
            return H.ioore(output, 0);
          t1 = output[0].length === 0;
        } else
          t1 = false;
      else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || C.JSArray_methods.get$last(output) === "..")
        C.JSArray_methods.add$1(output, "");
      if (!allowScheme) {
        if (0 >= output.length)
          return H.ioore(output, 0);
        C.JSArray_methods.$indexSet(output, 0, P._Uri__escapeScheme(output[0]));
      }
      return C.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme: function(path) {
      var i, char, t2,
        t1 = path.length;
      if (t1 >= 2 && P._Uri__isAlphabeticCharacter(C.JSString_methods._codeUnitAt$1(path, 0)))
        for (i = 1; i < t1; ++i) {
          char = C.JSString_methods._codeUnitAt$1(path, i);
          if (char === 58)
            return C.JSString_methods.substring$2(path, 0, i) + "%3A" + C.JSString_methods.substring$1(path, i + 1);
          if (char <= 127) {
            t2 = char >>> 4;
            if (t2 >= 8)
              return H.ioore(C.List_JYB, t2);
            t2 = (C.List_JYB[t2] & 1 << (char & 15)) === 0;
          } else
            t2 = true;
          if (t2)
            break;
        }
      return path;
    },
    _Uri__packageNameEnd: function(uri, path) {
      if (uri.isScheme$1("package") && uri._core$_host == null)
        return P._skipPackageNameChars(path, 0, path.length);
      return -1;
    },
    _Uri__isAlphabeticCharacter: function(codeUnit) {
      var lowerCase = codeUnit | 32;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    UriData__parse: function(text, start, sourceUri) {
      var t1, i, slashIndex, char, equalsIndex, lastSeparator, t2, data,
        _s17_ = "Invalid MIME type",
        indices = H.setRuntimeTypeInfo([start - 1], type$.JSArray_int);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = C.JSString_methods._codeUnitAt$1(text, i);
        if (char === 44 || char === 59)
          break;
        if (char === 47) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw H.wrapException(P.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw H.wrapException(P.FormatException$(_s17_, text, i));
      for (; char !== 44;) {
        C.JSArray_methods.add$1(indices, i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          char = C.JSString_methods._codeUnitAt$1(text, i);
          if (char === 61) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (char === 59 || char === 44)
            break;
        }
        if (equalsIndex >= 0)
          C.JSArray_methods.add$1(indices, equalsIndex);
        else {
          lastSeparator = C.JSArray_methods.get$last(indices);
          if (char !== 44 || i !== lastSeparator + 7 || !C.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1))
            throw H.wrapException(P.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      C.JSArray_methods.add$1(indices, i);
      t2 = i + 1;
      if ((indices.length & 1) === 1)
        text = C.C_Base64Codec.normalize$3(0, text, t2, t1);
      else {
        data = P._Uri__normalize(text, t2, t1, C.List_CVk, true);
        if (data != null)
          text = C.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return new P.UriData(text, indices, sourceUri);
    },
    _createTables: function() {
      var _i, t1, t2, t3, t4, t5,
        _s77_ = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=",
        _s1_ = ".", _s1_0 = ":", _s1_1 = "/", _s1_2 = "?", _s1_3 = "#",
        tables = H.setRuntimeTypeInfo(new Array(22), type$.JSArray_Uint8List);
      for (_i = 0; _i < 22; ++_i)
        tables[_i] = new Uint8Array(96);
      t1 = new P._createTables_build(tables);
      t2 = new P._createTables_setChars();
      t3 = new P._createTables_setRange();
      t4 = type$.Uint8List;
      t5 = t4._as(t1.call$2(0, 225));
      t2.call$3(t5, _s77_, 1);
      t2.call$3(t5, _s1_, 14);
      t2.call$3(t5, _s1_0, 34);
      t2.call$3(t5, _s1_1, 3);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(14, 225));
      t2.call$3(t5, _s77_, 1);
      t2.call$3(t5, _s1_, 15);
      t2.call$3(t5, _s1_0, 34);
      t2.call$3(t5, _s1_1, 234);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(15, 225));
      t2.call$3(t5, _s77_, 1);
      t2.call$3(t5, "%", 225);
      t2.call$3(t5, _s1_0, 34);
      t2.call$3(t5, _s1_1, 9);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(1, 225));
      t2.call$3(t5, _s77_, 1);
      t2.call$3(t5, _s1_0, 34);
      t2.call$3(t5, _s1_1, 10);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(2, 235));
      t2.call$3(t5, _s77_, 139);
      t2.call$3(t5, _s1_1, 131);
      t2.call$3(t5, _s1_, 146);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(3, 235));
      t2.call$3(t5, _s77_, 11);
      t2.call$3(t5, _s1_1, 68);
      t2.call$3(t5, _s1_, 18);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(4, 229));
      t2.call$3(t5, _s77_, 5);
      t3.call$3(t5, "AZ", 229);
      t2.call$3(t5, _s1_0, 102);
      t2.call$3(t5, "@", 68);
      t2.call$3(t5, "[", 232);
      t2.call$3(t5, _s1_1, 138);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(5, 229));
      t2.call$3(t5, _s77_, 5);
      t3.call$3(t5, "AZ", 229);
      t2.call$3(t5, _s1_0, 102);
      t2.call$3(t5, "@", 68);
      t2.call$3(t5, _s1_1, 138);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(6, 231));
      t3.call$3(t5, "19", 7);
      t2.call$3(t5, "@", 68);
      t2.call$3(t5, _s1_1, 138);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(7, 231));
      t3.call$3(t5, "09", 7);
      t2.call$3(t5, "@", 68);
      t2.call$3(t5, _s1_1, 138);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t2.call$3(t4._as(t1.call$2(8, 8)), "]", 5);
      t5 = t4._as(t1.call$2(9, 235));
      t2.call$3(t5, _s77_, 11);
      t2.call$3(t5, _s1_, 16);
      t2.call$3(t5, _s1_1, 234);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(16, 235));
      t2.call$3(t5, _s77_, 11);
      t2.call$3(t5, _s1_, 17);
      t2.call$3(t5, _s1_1, 234);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(17, 235));
      t2.call$3(t5, _s77_, 11);
      t2.call$3(t5, _s1_1, 9);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(10, 235));
      t2.call$3(t5, _s77_, 11);
      t2.call$3(t5, _s1_, 18);
      t2.call$3(t5, _s1_1, 234);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(18, 235));
      t2.call$3(t5, _s77_, 11);
      t2.call$3(t5, _s1_, 19);
      t2.call$3(t5, _s1_1, 234);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(19, 235));
      t2.call$3(t5, _s77_, 11);
      t2.call$3(t5, _s1_1, 234);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(11, 235));
      t2.call$3(t5, _s77_, 11);
      t2.call$3(t5, _s1_1, 10);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(12, 236));
      t2.call$3(t5, _s77_, 12);
      t2.call$3(t5, _s1_2, 12);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(13, 237));
      t2.call$3(t5, _s77_, 13);
      t2.call$3(t5, _s1_2, 13);
      t3.call$3(t4._as(t1.call$2(20, 245)), "az", 21);
      t1 = t4._as(t1.call$2(21, 245));
      t3.call$3(t1, "az", 21);
      t3.call$3(t1, "09", 21);
      t2.call$3(t1, "+-.", 21);
      return tables;
    },
    _scan: function(uri, start, end, state, indices) {
      var i, table, char, transition,
        tables = $.$get$_scannerTables();
      for (i = start; i < end; ++i) {
        if (state < 0 || state >= tables.length)
          return H.ioore(tables, state);
        table = tables[state];
        char = C.JSString_methods._codeUnitAt$1(uri, i) ^ 96;
        transition = table[char > 95 ? 31 : char];
        state = transition & 31;
        C.JSArray_methods.$indexSet(indices, transition >>> 5, i);
      }
      return state;
    },
    _SimpleUri__packageNameEnd: function(uri) {
      if (uri._schemeEnd === 7 && C.JSString_methods.startsWith$1(uri._core$_uri, "package") && uri._hostStart <= 0)
        return P._skipPackageNameChars(uri._core$_uri, uri._pathStart, uri._queryStart);
      return -1;
    },
    _skipPackageNameChars: function(source, start, end) {
      var i, dots, char;
      for (i = start, dots = 0; i < end; ++i) {
        char = C.JSString_methods.codeUnitAt$1(source, i);
        if (char === 47)
          return dots !== 0 ? i : -1;
        if (char === 37 || char === 58)
          return -1;
        dots |= char ^ 46;
      }
      return -1;
    },
    DateTime: function DateTime(t0, t1) {
      this._value = t0;
      this.isUtc = t1;
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    Duration_toString_sixDigits: function Duration_toString_sixDigits() {
    },
    Duration_toString_twoDigits: function Duration_toString_twoDigits() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    Iterable: function Iterable() {
    },
    Iterator: function Iterator() {
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    Stopwatch: function Stopwatch() {
      this._stop = this._start = 0;
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1) {
      this.error = t0;
      this.host = t1;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._core$_host = t2;
      _._core$_port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode = _.___Uri__text = null;
    },
    UriData: function UriData(t0, t1, t2) {
      this._text = t0;
      this._separatorIndices = t1;
      this._uriCache = t2;
    },
    _createTables_build: function _createTables_build(t0) {
      this.tables = t0;
    },
    _createTables_setChars: function _createTables_setChars() {
    },
    _createTables_setRange: function _createTables_setRange() {
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._core$_uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._core$_host = t2;
      _._core$_port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode = _.___Uri__text = null;
    },
    _getTraceClock: function() {
      var t1 = $._clockValue;
      $._clockValue = t1 + 1;
      return t1;
    },
    _argumentsAsJson: function($arguments) {
      if ($arguments == null || $arguments.get$length($arguments) === 0)
        return "{}";
      return C.C_JsonCodec.encode$1($arguments);
    },
    TimelineTask: function TimelineTask(t0, t1, t2, t3) {
      var _ = this;
      _._parent = t0;
      _._filterKey = t1;
      _._taskId = t2;
      _._stack = t3;
    },
    _AsyncBlock: function _AsyncBlock(t0, t1) {
      this.name = t0;
      this._taskId = t1;
    },
    _Namespace__namespacePointer: function() {
      throw H.wrapException(P.UnsupportedError$("_Namespace"));
    },
    _isDirectIOCapableTypedList: function(buffer) {
      throw H.wrapException(P.UnsupportedError$("_isDirectIOCapableTypedList"));
    },
    _Platform__environment: function() {
      throw H.wrapException(P.UnsupportedError$("Platform._environment"));
    },
    _Platform__version: function() {
      throw H.wrapException(P.UnsupportedError$("Platform._version"));
    },
    InternetAddress_InternetAddress: function(address) {
      throw H.wrapException(P.UnsupportedError$("InternetAddress"));
    },
    InternetAddress__cloneWithNewHost: function(address, host) {
      throw H.wrapException(P.UnsupportedError$("InternetAddress._cloneWithNewHost"));
    },
    RawSocket_startConnect: function(host, port) {
      throw H.wrapException(P.UnsupportedError$("RawSocket constructor"));
    },
    Socket__startConnect: function(host, port, sourceAddress) {
      throw H.wrapException(P.UnsupportedError$("Socket constructor"));
    },
    SecureSocket_SecureSocket$_: function(rawSocket) {
      throw H.wrapException(P.UnsupportedError$("SecureSocket constructor"));
    },
    SecurityContext_defaultContext: function() {
      throw H.wrapException(P.UnsupportedError$("default SecurityContext getter"));
    },
    _SecureFilter__SecureFilter$_: function() {
      throw H.wrapException(P.UnsupportedError$("_SecureFilter._SecureFilter"));
    },
    RawZLibFilter__makeZLibInflateFilter: function(windowBits, dictionary, raw) {
      throw H.wrapException(P.UnsupportedError$("_newZLibInflateFilter"));
    },
    _IOService__dispatch: function(request, data) {
      throw H.wrapException(P.UnsupportedError$("_IOService._dispatch"));
    },
    _exceptionFromResponse: function(response, message, path) {
      var t1 = J.getInterceptor$asx(response);
      switch (t1.$index(response, 0)) {
        case 1:
          return new P.ArgumentError(false, null, null, message + ": " + path);
        case 2:
          return new P.FileSystemException(message, path, new P.OSError(H._asString(t1.$index(response, 2)), H._asInt(t1.$index(response, 1))));
        case 3:
          return new P.FileSystemException("File closed", path, null);
        default:
          return new P._Exception("Unknown error");
      }
    },
    _ensureFastAndSerializableByteData: function(buffer, start, end) {
      var $length, newBuffer;
      if (P._isDirectIOCapableTypedList(buffer))
        return new P._BufferAndStart(buffer, start);
      $length = end - start;
      newBuffer = new Uint8Array($length);
      C.NativeUint8List_methods.setRange$4(newBuffer, 0, $length, buffer, start);
      return new P._BufferAndStart(newBuffer, 0);
    },
    ZLibDecoder$: function(dictionary, raw, windowBits) {
      P._validateZLibWindowBits(windowBits);
      return new P.ZLibDecoder(windowBits, dictionary, false);
    },
    _validateZLibWindowBits: function(windowBits) {
      if (8 > windowBits || 15 < windowBits)
        throw H.wrapException(P.RangeError$range(windowBits, 8, 15, null, null));
    },
    File_File: function(path) {
      P.IOOverrides_current();
      return new P._File(path, P.FileSystemEntity__toNullTerminatedUtf8Array(C.C_Utf8Encoder.convert$1(path)));
    },
    FileSystemException$: function(message, path, osError) {
      return new P.FileSystemException(message, path, osError);
    },
    _File__namespacePointer: function() {
      return P._Namespace__namespacePointer();
    },
    _File__dispatchWithNamespace: function(request, data) {
      C.JSArray_methods.$indexSet(data, 0, P._File__namespacePointer());
    },
    FileSystemEntity__toNullTerminatedUtf8Array: function(l) {
      var t2, tmp,
        t1 = l.length;
      if (t1 !== 0) {
        t2 = t1 - 1;
        if (t2 < 0)
          return H.ioore(l, t2);
        t2 = l[t2] !== 0;
      } else
        t2 = false;
      if (t2) {
        tmp = new Uint8Array(t1 + 1);
        C.NativeUint8List_methods.setRange$3(tmp, 0, t1, l);
        return tmp;
      } else
        return l;
    },
    isInsecureConnectionAllowed: function(host) {
      var exception;
      try {
        if ("localhost" === host || P.InternetAddress_InternetAddress(host).get$isLoopback())
          return true;
      } catch (exception) {
        if (!(H.unwrapException(exception) instanceof P.ArgumentError))
          throw exception;
      }
      P._findBestDomainNetworkPolicy(host);
      H.throwUnsupportedError("bool.fromEnvironment can only be used as a const constructor");
    },
    _findBestDomainNetworkPolicy: function(domain) {
      var t2, topScore, topPolicy, _i, policy, score,
        t1 = $.___domainPolicies;
      if (t1 == null)
        t1 = $.___domainPolicies = P._constructDomainPolicies(null);
      t2 = t1.length;
      topScore = 0;
      topPolicy = null;
      _i = 0;
      for (; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        policy = t1[_i];
        score = policy.matchScore$1(domain);
        if (score > topScore) {
          topPolicy = policy;
          topScore = score;
        }
      }
      return topPolicy;
    },
    _constructDomainPolicies: function(domainPoliciesString) {
      var t1, policiesJson, t2, policyJson, t3, t4, t5, policy,
        domainPolicies = H.setRuntimeTypeInfo([], type$.JSArray__DomainNetworkPolicy);
      domainPoliciesString = H.throwUnsupportedError("String.fromEnvironment can only be used as a const constructor");
      domainPoliciesString.get$length(domainPoliciesString);
      t1 = type$.List_dynamic;
      policiesJson = t1._as(C.C_JsonCodec.decode$1(0, domainPoliciesString));
      for (t2 = J.get$iterator$ax(policiesJson); t2.moveNext$0();) {
        policyJson = t1._as(t2.get$current(t2));
        t3 = J.getInterceptor$asx(policyJson);
        t4 = H._asString(t3.$index(policyJson, 0));
        t5 = H._asBool(t3.$index(policyJson, 1));
        policy = new P._DomainNetworkPolicy(t4, H._asBool(t3.$index(policyJson, 2)), t5);
        if (t4.length <= 255) {
          t3 = $.$get$_DomainNetworkPolicy__domainMatcher()._nativeRegExp;
          t3 = !t3.test(t4);
        } else
          t3 = true;
        if (t3)
          H.throwExpression(P.ArgumentError$value(t4, "domain", "Invalid domain name"));
        if (policy.checkConflict$1(domainPolicies))
          C.JSArray_methods.add$1(domainPolicies, policy);
      }
      return domainPolicies;
    },
    IOOverrides_current: function() {
      $.$get$_ioOverridesToken();
      return null;
    },
    _Platform_environment: function() {
      var t1 = $._Platform__environmentCache;
      if (t1 == null)
        P._Platform__environment();
      t1.toString;
      return type$.Map_String_String._as(t1);
    },
    _Platform_version: function() {
      return P._Platform__version();
    },
    SecureSocket_startConnect: function(host, port, context, onBadCertificate) {
      return P.RawSecureSocket_startConnect(host, port, context, onBadCertificate, null).then$1$1(new P.SecureSocket_startConnect_closure(), type$.ConnectionTask_SecureSocket);
    },
    SecureSocket_secure: function(socket, context, host, onBadCertificate) {
      return socket._detachRaw$0().then$1$1(new P.SecureSocket_secure_closure(host, context, onBadCertificate, null), type$.RawSecureSocket).then$1$1(new P.SecureSocket_secure_closure0(), type$.SecureSocket);
    },
    RawSecureSocket_startConnect: function(host, port, context, onBadCertificate, supportedProtocols) {
      return P.RawSocket_startConnect(host, port).then$1$1(new P.RawSecureSocket_startConnect_closure(context, onBadCertificate, supportedProtocols), type$.ConnectionTask_RawSecureSocket);
    },
    RawSecureSocket_secure: function(socket, context, host, onBadCertificate, subscription, supportedProtocols) {
      var supportedProtocols0, t1, address, t2, t3, t4;
      socket.set$readEventsEnabled(false);
      socket.set$writeEventsEnabled(false);
      if (!(host != null)) {
        t1 = socket.get$address();
        host = t1.get$host(t1);
      }
      t1 = socket.get$port(socket);
      if (t1.$lt(0, 0) || t1.$gt(0, 65535))
        H.throwExpression(P.ArgumentError$("requestedPort is not in the range 0..65535"));
      address = socket.get$address();
      address = P.InternetAddress__cloneWithNewHost(address, host);
      t2 = P.SecurityContext_defaultContext();
      supportedProtocols0 = supportedProtocols;
      supportedProtocols0 = supportedProtocols0;
      t3 = $.Zone__current;
      t4 = new P._Future(t3, type$._Future__RawSecureSocket);
      new P._RawSecureSocket(socket, new P._AsyncCompleter(t4, type$._AsyncCompleter__RawSecureSocket), P.StreamController_StreamController(true, type$.RawSocketEvent), null, address, false, t2, false, false, onBadCertificate, new P._AsyncCompleter(new P._Future(t3, type$._Future_RawSecureSocket), type$._AsyncCompleter_RawSecureSocket), new P._FilterStatus(), P._SecureFilter__SecureFilter$_())._RawSecureSocket$11(address, t1, false, t2, socket, subscription, null, false, false, onBadCertificate, supportedProtocols0);
      return t4;
    },
    HandshakeException$: function(message) {
      return new P.HandshakeException("HandshakeException", message, null);
    },
    SecurityContext__protocolsToLengthEncoding: function(protocols) {
      return new Uint8Array(0);
    },
    Socket_startConnect: function(host, port) {
      var t1;
      P.IOOverrides_current();
      t1 = P.Socket__startConnect(host, port, null);
      return t1;
    },
    SocketException$: function(message) {
      return new P.SocketException(message);
    },
    OSError: function OSError(t0, t1) {
      this.message = t0;
      this.errorCode = t1;
    },
    _BufferAndStart: function _BufferAndStart(t0, t1) {
      this.buffer = t0;
      this.start = t1;
    },
    ZLibDecoder: function ZLibDecoder(t0, t1, t2) {
      this.windowBits = t0;
      this.dictionary = t1;
      this.raw = t2;
    },
    _ZLibDecoderSink: function _ZLibDecoderSink(t0, t1) {
      var _ = this;
      _._filter = t0;
      _._sink = t1;
      _._closed = false;
      _._empty = true;
    },
    _FilterSink: function _FilterSink() {
    },
    FileMode: function FileMode(t0) {
      this._mode = t0;
    },
    FileSystemException: function FileSystemException(t0, t1, t2) {
      this.message = t0;
      this.path = t1;
      this.osError = t2;
    },
    _FileStreamConsumer: function _FileStreamConsumer(t0, t1) {
      this._file = t0;
      this._openFuture = t1;
    },
    _FileStreamConsumer_addStream_closure: function _FileStreamConsumer_addStream_closure(t0, t1, t2) {
      this.$this = t0;
      this.completer = t1;
      this.stream = t2;
    },
    _FileStreamConsumer_addStream_closure___subscription_set: function _FileStreamConsumer_addStream_closure___subscription_set(t0) {
      this._box_0 = t0;
    },
    _FileStreamConsumer_addStream_closure___subscription_get: function _FileStreamConsumer_addStream_closure___subscription_get(t0) {
      this._box_0 = t0;
    },
    _FileStreamConsumer_addStream_closure_error: function _FileStreamConsumer_addStream_closure_error(t0, t1, t2) {
      this.__subscription_get = t0;
      this.openedFile = t1;
      this.completer = t2;
    },
    _FileStreamConsumer_addStream__closure: function _FileStreamConsumer_addStream__closure(t0, t1, t2) {
      this.__subscription_get = t0;
      this.openedFile = t1;
      this.error = t2;
    },
    _FileStreamConsumer_addStream___closure: function _FileStreamConsumer_addStream___closure(t0) {
      this.__subscription_get = t0;
    },
    _FileStreamConsumer_addStream__closure0: function _FileStreamConsumer_addStream__closure0(t0, t1) {
      this.$this = t0;
      this.completer = t1;
    },
    _FileStreamConsumer_close_closure: function _FileStreamConsumer_close_closure() {
    },
    _FileStreamConsumer_close_closure0: function _FileStreamConsumer_close_closure0(t0) {
      this.$this = t0;
    },
    _File: function _File(t0, t1) {
      this._path = t0;
      this._rawPath = t1;
    },
    _File_open_closure: function _File_open_closure(t0) {
      this.$this = t0;
    },
    _File_length_closure: function _File_length_closure(t0) {
      this.$this = t0;
    },
    _RandomAccessFile_close_closure: function _RandomAccessFile_close_closure(t0) {
      this.$this = t0;
    },
    _RandomAccessFile_writeFrom_closure: function _RandomAccessFile_writeFrom_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.start = t2;
    },
    FileSystemEntity: function FileSystemEntity() {
    },
    _StreamSinkImpl: function _StreamSinkImpl() {
    },
    _StreamSinkImpl_addStream_closure: function _StreamSinkImpl_addStream_closure(t0, t1) {
      this.$this = t0;
      this.stream = t1;
    },
    _StreamSinkImpl_addStream_closure0: function _StreamSinkImpl_addStream_closure0(t0) {
      this.$this = t0;
    },
    _StreamSinkImpl__controller_closure1: function _StreamSinkImpl__controller_closure1(t0) {
      this.$this = t0;
    },
    _StreamSinkImpl__controller_closure2: function _StreamSinkImpl__controller_closure2(t0) {
      this.$this = t0;
    },
    _IOSinkImpl: function _IOSinkImpl(t0, t1, t2) {
      var _ = this;
      _._encoding = t0;
      _._io$_target = t1;
      _._doneCompleter = t2;
      _._controllerCompleter = _._controllerInstance = null;
      _._hasError = _._isBound = _._isClosed = false;
    },
    _DomainNetworkPolicy: function _DomainNetworkPolicy(t0, t1, t2) {
      this.domain = t0;
      this.allowInsecureConnections = t1;
      this.includesSubDomains = t2;
    },
    SecureSocket_startConnect_closure: function SecureSocket_startConnect_closure() {
    },
    SecureSocket_startConnect__closure: function SecureSocket_startConnect__closure() {
    },
    SecureSocket_secure_closure: function SecureSocket_secure_closure(t0, t1, t2, t3) {
      var _ = this;
      _.host = t0;
      _.context = t1;
      _.onBadCertificate = t2;
      _.supportedProtocols = t3;
    },
    SecureSocket_secure_closure0: function SecureSocket_secure_closure0() {
    },
    RawSecureSocket_startConnect_closure: function RawSecureSocket_startConnect_closure(t0, t1, t2) {
      this.context = t0;
      this.onBadCertificate = t1;
      this.supportedProtocols = t2;
    },
    RawSecureSocket_startConnect__closure: function RawSecureSocket_startConnect__closure(t0, t1, t2) {
      this.context = t0;
      this.onBadCertificate = t1;
      this.supportedProtocols = t2;
    },
    _FilterStatus: function _FilterStatus() {
      var _ = this;
      _.progress = false;
      _.writeEmpty = _.readEmpty = true;
      _.writeEncryptedNoLongerEmpty = _.readEncryptedNoLongerFull = _.writePlaintextNoLongerFull = _.readPlaintextNoLongerEmpty = false;
    },
    _RawSecureSocket: function _RawSecureSocket(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _._io$_socket = t0;
      _._handshakeComplete = t1;
      _._io$_controller = t2;
      _.___RawSecureSocket__socketSubscription = null;
      _._bufferedData = t3;
      _._bufferedDataIndex = 0;
      _.address = t4;
      _.isServer = t5;
      _.context = t6;
      _.requestClientCertificate = t7;
      _.requireClientCertificate = t8;
      _.onBadCertificate = t9;
      _._status = 201;
      _._readEventsEnabled = _._writeEventsEnabled = true;
      _._pauseCount = 0;
      _._closedWrite = _._closedRead = _._socketClosedWrite = _._socketClosedRead = _._pendingReadEvent = false;
      _._closeCompleter = t10;
      _._filterStatus = t11;
      _._connectPending = true;
      _._filterActive = _._filterPending = false;
      _._secureFilter = t12;
    },
    _RawSecureSocket__secureHandshakeCompleteHandler_closure: function _RawSecureSocket__secureHandshakeCompleteHandler_closure(t0) {
      this.$this = t0;
    },
    TlsException: function TlsException() {
    },
    HandshakeException: function HandshakeException(t0, t1, t2) {
      this.type = t0;
      this.message = t1;
      this.osError = t2;
    },
    SocketDirection: function SocketDirection() {
    },
    SocketOption: function SocketOption() {
    },
    RawSocketEvent: function RawSocketEvent(t0) {
      this._io$_value = t0;
    },
    ConnectionTask: function ConnectionTask(t0, t1, t2) {
      this.socket = t0;
      this._io$_onCancel = t1;
      this.$ti = t2;
    },
    SocketException: function SocketException(t0) {
      this.message = t0;
    },
    Length: function Length() {
    },
    LengthList: function LengthList() {
    },
    Number: function Number() {
    },
    NumberList: function NumberList() {
    },
    PointList: function PointList() {
    },
    StringList: function StringList() {
    },
    Transform: function Transform() {
    },
    TransformList: function TransformList() {
    },
    _LengthList_Interceptor_ListMixin: function _LengthList_Interceptor_ListMixin() {
    },
    _LengthList_Interceptor_ListMixin_ImmutableListMixin: function _LengthList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _NumberList_Interceptor_ListMixin: function _NumberList_Interceptor_ListMixin() {
    },
    _NumberList_Interceptor_ListMixin_ImmutableListMixin: function _NumberList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _StringList_Interceptor_ListMixin: function _StringList_Interceptor_ListMixin() {
    },
    _StringList_Interceptor_ListMixin_ImmutableListMixin: function _StringList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _TransformList_Interceptor_ListMixin: function _TransformList_Interceptor_ListMixin() {
    },
    _TransformList_Interceptor_ListMixin_ImmutableListMixin: function _TransformList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    AudioBuffer: function AudioBuffer() {
    },
    AudioParamMap: function AudioParamMap() {
    },
    AudioParamMap_keys_closure: function AudioParamMap_keys_closure(t0) {
      this.keys = t0;
    },
    AudioTrackList: function AudioTrackList() {
    },
    BaseAudioContext: function BaseAudioContext() {
    },
    OfflineAudioContext: function OfflineAudioContext() {
    },
    _AudioParamMap_Interceptor_MapMixin: function _AudioParamMap_Interceptor_MapMixin() {
    },
    SqlError: function SqlError() {
    },
    SqlResultSetRowList: function SqlResultSetRowList() {
    },
    _SqlResultSetRowList_Interceptor_ListMixin: function _SqlResultSetRowList_Interceptor_ListMixin() {
    },
    _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin: function _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    convertNativeToDart_Dictionary: function(object) {
      var dict, keys, t1, _i, t2;
      if (object == null)
        return null;
      dict = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      keys = Object.getOwnPropertyNames(object);
      for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
        t2 = H._asString(keys[_i]);
        dict.$indexSet(0, t2, object[t2]);
      }
      return dict;
    },
    Isolate_current: function() {
      throw H.wrapException(P.UnsupportedError$("Isolate.current"));
    }
  },
  W = {
    _JenkinsSmiHash_combine: function(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_hash4: function(a, b, c, d) {
      var t1 = W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, a), b), c), d),
        hash = t1 + ((t1 & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    HtmlElement: function HtmlElement() {
    },
    AccessibleNodeList: function AccessibleNodeList() {
    },
    AnchorElement: function AnchorElement() {
    },
    ApplicationCacheErrorEvent: function ApplicationCacheErrorEvent() {
    },
    AreaElement: function AreaElement() {
    },
    Blob: function Blob() {
    },
    CharacterData: function CharacterData() {
    },
    CssPerspective: function CssPerspective() {
    },
    CssRule: function CssRule() {
    },
    CssStyleDeclaration: function CssStyleDeclaration() {
    },
    CssStyleDeclarationBase: function CssStyleDeclarationBase() {
    },
    CssStyleValue: function CssStyleValue() {
    },
    CssTransformComponent: function CssTransformComponent() {
    },
    CssTransformValue: function CssTransformValue() {
    },
    CssUnparsedValue: function CssUnparsedValue() {
    },
    DataTransferItemList: function DataTransferItemList() {
    },
    DeprecationReport: function DeprecationReport() {
    },
    DomError: function DomError() {
    },
    DomException: function DomException() {
    },
    DomRectList: function DomRectList() {
    },
    DomRectReadOnly: function DomRectReadOnly() {
    },
    DomStringList: function DomStringList() {
    },
    DomTokenList: function DomTokenList() {
    },
    Element: function Element() {
    },
    ErrorEvent: function ErrorEvent() {
    },
    Event: function Event() {
    },
    EventTarget: function EventTarget() {
    },
    File: function File() {
    },
    FileList: function FileList() {
    },
    FileWriter: function FileWriter() {
    },
    FormElement: function FormElement() {
    },
    Gamepad: function Gamepad() {
    },
    History: function History() {
    },
    HtmlCollection: function HtmlCollection() {
    },
    InterventionReport: function InterventionReport() {
    },
    Location: function Location() {
    },
    MediaError: function MediaError() {
    },
    MediaKeyMessageEvent: function MediaKeyMessageEvent() {
    },
    MediaList: function MediaList() {
    },
    MidiInputMap: function MidiInputMap() {
    },
    MidiInputMap_keys_closure: function MidiInputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MidiOutputMap: function MidiOutputMap() {
    },
    MidiOutputMap_keys_closure: function MidiOutputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MimeType: function MimeType() {
    },
    MimeTypeArray: function MimeTypeArray() {
    },
    NavigatorUserMediaError: function NavigatorUserMediaError() {
    },
    Node: function Node() {
    },
    NodeList: function NodeList() {
    },
    OverconstrainedError: function OverconstrainedError() {
    },
    Plugin: function Plugin() {
    },
    PluginArray: function PluginArray() {
    },
    PositionError: function PositionError() {
    },
    PresentationConnectionCloseEvent: function PresentationConnectionCloseEvent() {
    },
    ReportBody: function ReportBody() {
    },
    RtcStatsReport: function RtcStatsReport() {
    },
    RtcStatsReport_keys_closure: function RtcStatsReport_keys_closure(t0) {
      this.keys = t0;
    },
    SelectElement: function SelectElement() {
    },
    SourceBuffer: function SourceBuffer() {
    },
    SourceBufferList: function SourceBufferList() {
    },
    SpeechGrammar: function SpeechGrammar() {
    },
    SpeechGrammarList: function SpeechGrammarList() {
    },
    SpeechRecognitionError: function SpeechRecognitionError() {
    },
    SpeechRecognitionResult: function SpeechRecognitionResult() {
    },
    Storage: function Storage() {
    },
    Storage_keys_closure: function Storage_keys_closure(t0) {
      this.keys = t0;
    },
    StyleSheet: function StyleSheet() {
    },
    TextTrack: function TextTrack() {
    },
    TextTrackCue: function TextTrackCue() {
    },
    TextTrackCueList: function TextTrackCueList() {
    },
    TextTrackList: function TextTrackList() {
    },
    TimeRanges: function TimeRanges() {
    },
    Touch: function Touch() {
    },
    TouchList: function TouchList() {
    },
    TrackDefaultList: function TrackDefaultList() {
    },
    Url: function Url() {
    },
    VideoTrackList: function VideoTrackList() {
    },
    _CssRuleList: function _CssRuleList() {
    },
    _DomRect: function _DomRect() {
    },
    _GamepadList: function _GamepadList() {
    },
    _NamedNodeMap: function _NamedNodeMap() {
    },
    _SpeechRecognitionResultList: function _SpeechRecognitionResultList() {
    },
    _StyleSheetList: function _StyleSheetList() {
    },
    ImmutableListMixin: function ImmutableListMixin() {
    },
    FixedSizeListIterator: function FixedSizeListIterator(t0, t1, t2) {
      var _ = this;
      _._array = t0;
      _._length = t1;
      _._position = -1;
      _._current = null;
      _.$ti = t2;
    },
    _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase: function _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase() {
    },
    _DomRectList_Interceptor_ListMixin: function _DomRectList_Interceptor_ListMixin() {
    },
    _DomRectList_Interceptor_ListMixin_ImmutableListMixin: function _DomRectList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _DomStringList_Interceptor_ListMixin: function _DomStringList_Interceptor_ListMixin() {
    },
    _DomStringList_Interceptor_ListMixin_ImmutableListMixin: function _DomStringList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _FileList_Interceptor_ListMixin: function _FileList_Interceptor_ListMixin() {
    },
    _FileList_Interceptor_ListMixin_ImmutableListMixin: function _FileList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _HtmlCollection_Interceptor_ListMixin: function _HtmlCollection_Interceptor_ListMixin() {
    },
    _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin: function _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _MidiInputMap_Interceptor_MapMixin: function _MidiInputMap_Interceptor_MapMixin() {
    },
    _MidiOutputMap_Interceptor_MapMixin: function _MidiOutputMap_Interceptor_MapMixin() {
    },
    _MimeTypeArray_Interceptor_ListMixin: function _MimeTypeArray_Interceptor_ListMixin() {
    },
    _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin: function _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _NodeList_Interceptor_ListMixin: function _NodeList_Interceptor_ListMixin() {
    },
    _NodeList_Interceptor_ListMixin_ImmutableListMixin: function _NodeList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _PluginArray_Interceptor_ListMixin: function _PluginArray_Interceptor_ListMixin() {
    },
    _PluginArray_Interceptor_ListMixin_ImmutableListMixin: function _PluginArray_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _RtcStatsReport_Interceptor_MapMixin: function _RtcStatsReport_Interceptor_MapMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin: function _SourceBufferList_EventTarget_ListMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin: function _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _SpeechGrammarList_Interceptor_ListMixin: function _SpeechGrammarList_Interceptor_ListMixin() {
    },
    _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin: function _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _Storage_Interceptor_MapMixin: function _Storage_Interceptor_MapMixin() {
    },
    _TextTrackCueList_Interceptor_ListMixin: function _TextTrackCueList_Interceptor_ListMixin() {
    },
    _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin: function _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin: function _TextTrackList_EventTarget_ListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin_ImmutableListMixin: function _TextTrackList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _TouchList_Interceptor_ListMixin: function _TouchList_Interceptor_ListMixin() {
    },
    _TouchList_Interceptor_ListMixin_ImmutableListMixin: function _TouchList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __CssRuleList_Interceptor_ListMixin: function __CssRuleList_Interceptor_ListMixin() {
    },
    __CssRuleList_Interceptor_ListMixin_ImmutableListMixin: function __CssRuleList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __GamepadList_Interceptor_ListMixin: function __GamepadList_Interceptor_ListMixin() {
    },
    __GamepadList_Interceptor_ListMixin_ImmutableListMixin: function __GamepadList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin: function __NamedNodeMap_Interceptor_ListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin: function __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin: function __SpeechRecognitionResultList_Interceptor_ListMixin() {
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin: function __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __StyleSheetList_Interceptor_ListMixin: function __StyleSheetList_Interceptor_ListMixin() {
    },
    __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin: function __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin() {
    }
  },
  F = {
    main: function(args) {
      return F.main$body(args);
    },
    main$body: function(args) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$next = [], exception, t1, url, response, version, os;
      var $async$main = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              version = ["0.2.1"][0];
              os = "Linux";
              try {
              } catch (exception) {
                H.unwrapException(exception);
                t1 = P.Exception_Exception("Can't detect runner OS!");
                throw H.wrapException(t1);
              }
              $async$goto = version.length === 40 ? 2 : 4;
              break;
            case 2:
              // then
              throw H.wrapException(P.Exception_Exception("Currently not supporting commit hash!"));
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              url = "https://github.com/vlang/v/archive/refs/tags/" + version;
              switch (os) {
                case "Linux":
                  url += "/v_linux";
                  break;
                case "Windows":
                  url += "/v_windows";
                  break;
                case "macOS":
                  url += "/v_macos";
                  break;
              }
              url += ".zip";
              $async$goto = 6;
              return P._asyncAwait(H.HttpClient_HttpClient()._openUrl$2("get", P.Uri_parse(url)), $async$main);
            case 6:
              // returning from await.
              $async$goto = 5;
              return P._asyncAwait($async$result.close$0(0), $async$main);
            case 5:
              // returning from await.
              response = $async$result;
              t1 = P.File_File("v.zip");
              $async$goto = 7;
              return P._asyncAwait(response.pipe$1(new P._IOSinkImpl(C.C_Utf8Codec, new P._FileStreamConsumer(t1, t1.open$1$mode(0, C.FileMode_1)), new P._AsyncCompleter(new P._Future($.Zone__current, type$._Future_dynamic), type$._AsyncCompleter_dynamic))), $async$main);
            case 7:
              // returning from await.
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$main, $async$completer);
    }
  };
  var holders = [C, H, J, P, W, F];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.JS_CONST.prototype = {};
  H.HttpClientResponseCompressionState.prototype = {
    toString$0: function(_) {
      return this.__http$_name;
    }
  };
  H.HttpException.prototype = {
    toString$0: function(_) {
      var t1 = "" + "HttpException: " + this.message,
        uri = this.uri;
      if (uri != null)
        t1 += ", uri = " + uri.toString$0(0);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  H.RedirectException.prototype = {
    toString$0: function(_) {
      return "RedirectException: " + this.message;
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  H.HttpDate__parseCookieDate_error.prototype = {
    call$0: function() {
      throw H.wrapException(H.HttpException$("Invalid cookie date " + this.date, null));
    },
    $signature: 80
  };
  H.HttpDate__parseCookieDate_isEnd.prototype = {
    call$0: function() {
      return this._box_0.position === this.date.length;
    },
    $signature: 13
  };
  H.HttpDate__parseCookieDate_isDelimiter.prototype = {
    call$1: function(s) {
      var char = C.JSString_methods._codeUnitAt$1(s, 0);
      if (char === 9)
        return true;
      if (char >= 32 && char <= 47)
        return true;
      if (char >= 59 && char <= 64)
        return true;
      if (char >= 91 && char <= 96)
        return true;
      if (char >= 123 && char <= 126)
        return true;
      return false;
    },
    $signature: 8
  };
  H.HttpDate__parseCookieDate_isNonDelimiter.prototype = {
    call$1: function(s) {
      var char = C.JSString_methods._codeUnitAt$1(s, 0);
      if (char <= 8)
        return true;
      if (char >= 10 && char <= 31)
        return true;
      if (char >= 48 && char <= 57)
        return true;
      if (char === 58)
        return true;
      if (char >= 65 && char <= 90)
        return true;
      if (char >= 97 && char <= 122)
        return true;
      if (char >= 127 && char <= 255)
        return true;
      return false;
    },
    $signature: 8
  };
  H.HttpDate__parseCookieDate_isDigit.prototype = {
    call$1: function(s) {
      var char = C.JSString_methods._codeUnitAt$1(s, 0);
      if (char > 47 && char < 58)
        return true;
      return false;
    },
    $signature: 8
  };
  H.HttpDate__parseCookieDate_getMonth.prototype = {
    call$1: function(month) {
      H._asString(month);
      if (month.length < 3)
        return -1;
      return C.JSArray_methods.indexOf$1(C.List_UI5, C.JSString_methods.substring$2(month, 0, 3));
    },
    $signature: 17
  };
  H.HttpDate__parseCookieDate_toInt.prototype = {
    call$1: function(s) {
      var t1, t2, index;
      H._asString(s);
      t1 = s.length;
      t2 = this.isDigit;
      index = 0;
      while (true) {
        if (!(index < t1 && H.boolConversionCheck(t2.call$1(s[index]))))
          break;
        ++index;
      }
      return P.int_parse(C.JSString_methods.substring$2(s, 0, index), null);
    },
    $signature: 17
  };
  H._HttpHeaders.prototype = {
    _HttpHeaders$3$defaultPortForScheme$initialHeaders: function(protocolVersion, defaultPortForScheme, initialHeaders) {
      if (this.protocolVersion === "1.0")
        this._chunkedTransferEncoding = this._persistentConnection = false;
    },
    $index: function(_, $name) {
      return this._headers.$index(0, H._HttpHeaders__validateField(H._asString($name)));
    },
    value$1: function(_, $name) {
      var values, t1;
      $name = H._HttpHeaders__validateField($name);
      values = this._headers.$index(0, $name);
      if (values == null)
        return null;
      t1 = J.getInterceptor$asx(values);
      if (t1.get$length(values) > 1)
        throw H.wrapException(H.HttpException$("More than one value for header " + $name, null));
      return t1.$index(values, 0);
    },
    add$2: function(_, $name, value) {
      var lowercaseName, t1;
      if (!this._mutable)
        H.throwExpression(H.HttpException$("HTTP headers are not mutable", null));
      lowercaseName = H._HttpHeaders__validateField($name);
      t1 = this._originalHeaderNames;
      if (t1 != null)
        t1.remove$1(0, lowercaseName);
      this._addAll$2(lowercaseName, value);
    },
    _addAll$2: function($name, value) {
      var t1, t2;
      if (type$.Iterable_dynamic._is(value))
        for (t1 = J.get$iterator$ax(value), t2 = type$.Object; t1.moveNext$0();)
          this.__http$_add$2(0, $name, H._HttpHeaders__validateValue(t2._as(t1.get$current(t1))));
      else
        this.__http$_add$2(0, $name, H._HttpHeaders__validateValue(value));
    },
    $set$2: function(_, $name, value) {
      var lowercaseName, t1, _this = this;
      if (!_this._mutable)
        H.throwExpression(H.HttpException$("HTTP headers are not mutable", null));
      lowercaseName = H._HttpHeaders__validateField($name);
      _this._headers.remove$1(0, lowercaseName);
      t1 = _this._originalHeaderNames;
      if (t1 != null)
        t1.remove$1(0, lowercaseName);
      if (lowercaseName === "content-length")
        _this._contentLength = -1;
      if (lowercaseName === "transfer-encoding")
        _this._chunkedTransferEncoding = false;
      _this._addAll$2(lowercaseName, value);
    },
    removeAll$1: function($name) {
      var t1;
      if (!this._mutable)
        H.throwExpression(H.HttpException$("HTTP headers are not mutable", null));
      $name = H._HttpHeaders__validateField($name);
      this._headers.remove$1(0, $name);
      t1 = this._originalHeaderNames;
      if (t1 != null)
        t1.remove$1(0, $name);
    },
    forEach$1: function(_, action) {
      this._headers.forEach$1(0, new H._HttpHeaders_forEach_closure(this, type$.void_Function_2_String_and_List_String._as(action)));
    },
    set$contentLength: function(contentLength) {
      var t1, _this = this,
        _s14_ = "content-length";
      if (!_this._mutable)
        H.throwExpression(H.HttpException$("HTTP headers are not mutable", null));
      t1 = _this.protocolVersion;
      if (t1 === "1.0" && _this._persistentConnection && contentLength === -1)
        throw H.wrapException(H.HttpException$("Trying to clear ContentLength on HTTP 1.0 headers with 'Connection: Keep-Alive' set", null));
      if (_this._contentLength === contentLength)
        return;
      _this._contentLength = contentLength;
      if (contentLength >= 0) {
        if (_this._chunkedTransferEncoding)
          _this.set$chunkedTransferEncoding(false);
        _this._headers.$indexSet(0, _s14_, H.setRuntimeTypeInfo([C.JSInt_methods.toString$0(contentLength)], type$.JSArray_String));
      } else {
        _this._headers.remove$1(0, _s14_);
        if (t1 === "1.1")
          _this.set$chunkedTransferEncoding(true);
      }
    },
    set$chunkedTransferEncoding: function(chunkedTransferEncoding) {
      var values, $name, value, t1, t2, _this = this,
        _s17_ = "transfer-encoding",
        _s7_ = "chunked";
      if (!_this._mutable)
        H.throwExpression(H.HttpException$("HTTP headers are not mutable", null));
      if (chunkedTransferEncoding && _this.protocolVersion === "1.0")
        throw H.wrapException(H.HttpException$("Trying to set 'Transfer-Encoding: Chunked' on HTTP 1.0 headers", null));
      if (chunkedTransferEncoding === _this._chunkedTransferEncoding)
        return;
      if (chunkedTransferEncoding) {
        values = _this._headers.$index(0, _s17_);
        if (values == null || !J.contains$1$asx(values, _s7_))
          _this._addValue$2(_s17_, _s7_);
        _this.set$contentLength(-1);
      } else {
        $name = H._HttpHeaders__validateField(_s17_);
        value = H._HttpHeaders__validateValue(_s7_);
        t1 = _this._headers;
        values = t1.$index(0, $name);
        if (values != null) {
          t2 = J.getInterceptor$ax(values);
          t2.remove$1(values, _this._valueToString$1(value));
          if (t2.get$length(values) === 0) {
            t1.remove$1(0, $name);
            t1 = _this._originalHeaderNames;
            if (t1 != null)
              t1.remove$1(0, $name);
          }
        }
        if ($name === _s17_ && J.$eq$(value, _s7_))
          _this._chunkedTransferEncoding = false;
      }
      _this._chunkedTransferEncoding = chunkedTransferEncoding;
    },
    __http$_add$2: function(_, $name, value) {
      var lowerCaseValue, _this = this, _null = null,
        _s28_ = "HTTP headers are not mutable",
        _s33_ = "Unexpected type for header named ",
        _s17_ = "transfer-encoding",
        _s17_0 = "if-modified-since";
      switch ($name.length) {
        case 4:
          if ("date" === $name) {
            if (value instanceof P.DateTime) {
              if (!_this._mutable)
                H.throwExpression(H.HttpException$(_s28_, _null));
              _this._headers.$indexSet(0, "date", H.setRuntimeTypeInfo([H.HttpDate_format(value.toUtc$0())], type$.JSArray_String));
            } else if (typeof value == "string")
              _this._headers.$indexSet(0, "date", H.setRuntimeTypeInfo([value], type$.JSArray_String));
            else
              H.throwExpression(H.HttpException$(_s33_ + $name, _null));
            return;
          }
          if ("host" === $name) {
            _this._addHost$2($name, value);
            return;
          }
          break;
        case 7:
          if ("expires" === $name) {
            if (value instanceof P.DateTime) {
              if (!_this._mutable)
                H.throwExpression(H.HttpException$(_s28_, _null));
              _this._headers.$indexSet(0, "expires", H.setRuntimeTypeInfo([H.HttpDate_format(value.toUtc$0())], type$.JSArray_String));
            } else if (typeof value == "string")
              _this._headers.$indexSet(0, "expires", H.setRuntimeTypeInfo([value], type$.JSArray_String));
            else
              H.throwExpression(H.HttpException$(_s33_ + $name, _null));
            return;
          }
          break;
        case 10:
          if ("connection" === $name) {
            lowerCaseValue = J.toLowerCase$0$s(value);
            if (lowerCaseValue === "close")
              _this._persistentConnection = false;
            else if (lowerCaseValue === "keep-alive")
              _this._persistentConnection = true;
            _this._addValue$2($name, value);
            return;
          }
          break;
        case 12:
          if ("content-type" === $name) {
            _this._headers.$indexSet(0, "content-type", H.setRuntimeTypeInfo([H._asString(value)], type$.JSArray_String));
            return;
          }
          break;
        case 14:
          if ("content-length" === $name) {
            if (H._isInt(value))
              _this.set$contentLength(value);
            else if (typeof value == "string")
              _this.set$contentLength(P.int_parse(value, _null));
            else
              H.throwExpression(H.HttpException$(_s33_ + $name, _null));
            return;
          }
          break;
        case 17:
          if (_s17_ === $name) {
            if (J.$eq$(value, "chunked"))
              _this.set$chunkedTransferEncoding(true);
            else
              _this._addValue$2(_s17_, value);
            return;
          }
          if (_s17_0 === $name) {
            if (value instanceof P.DateTime) {
              if (!_this._mutable)
                H.throwExpression(H.HttpException$(_s28_, _null));
              _this._headers.$indexSet(0, _s17_0, H.setRuntimeTypeInfo([H.HttpDate_format(value.toUtc$0())], type$.JSArray_String));
            } else if (typeof value == "string")
              _this._headers.$indexSet(0, _s17_0, H.setRuntimeTypeInfo([value], type$.JSArray_String));
            else
              H.throwExpression(H.HttpException$(_s33_ + $name, _null));
            return;
          }
          break;
      }
      _this._addValue$2($name, value);
    },
    _addHost$2: function($name, value) {
      var pos, t1, exception, _this = this;
      if (typeof value == "string") {
        pos = C.JSString_methods.indexOf$1(value, ":");
        if (J.$eq$(pos, -1)) {
          _this._host = value;
          _this._port = 80;
        } else {
          t1 = pos;
          if (typeof t1 !== "number")
            return t1.$gt();
          if (t1 > 0)
            _this._host = C.JSString_methods.substring$2(value, 0, pos);
          else
            _this._host = null;
          t1 = pos;
          if (typeof t1 !== "number")
            return t1.$add();
          if (t1 + 1 === value.length)
            _this._port = 80;
          else
            try {
              t1 = pos;
              if (typeof t1 !== "number")
                return t1.$add();
              _this._port = P.int_parse(C.JSString_methods.substring$1(value, t1 + 1), null);
            } catch (exception) {
              if (H.unwrapException(exception) instanceof P.FormatException)
                _this._port = null;
              else
                throw exception;
            }
        }
        _this._headers.$indexSet(0, "host", H.setRuntimeTypeInfo([value], type$.JSArray_String));
      } else
        throw H.wrapException(H.HttpException$("Unexpected type for header named " + $name, null));
    },
    _addValue$2: function($name, value) {
      var t1 = this._headers,
        values = t1.$index(0, $name);
      if (values == null) {
        values = H.setRuntimeTypeInfo([], type$.JSArray_String);
        t1.$indexSet(0, $name, values);
      }
      J.add$1$ax(values, this._valueToString$1(value));
    },
    _valueToString$1: function(value) {
      if (value instanceof P.DateTime)
        return H.HttpDate_format(value);
      else if (typeof value == "string")
        return value;
      else
        return H._asString(H._HttpHeaders__validateValue(J.toString$0$(value)));
    },
    _updateHostHeader$0: function() {
      var t1, _this = this,
        host = _this._host;
      if (host != null) {
        t1 = _this._port;
        _this._headers.$indexSet(0, "host", H.setRuntimeTypeInfo([t1 == null || t1 === _this._defaultPortForScheme ? host : host + ":" + H.S(t1)], type$.JSArray_String));
      }
    },
    _foldHeader$1: function($name) {
      if ($name === "set-cookie")
        return false;
      return true;
    },
    _build$1: function(builder) {
      this._headers.forEach$1(0, new H._HttpHeaders__build_closure(this, builder));
    },
    toString$0: function(_) {
      var t1,
        sb = new P.StringBuffer("");
      this._headers.forEach$1(0, new H._HttpHeaders_toString_closure(this, sb));
      t1 = sb._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _originalHeaderName$1: function($name) {
      var t1 = this._originalHeaderNames;
      t1 = t1 == null ? null : t1.$index(0, $name);
      return t1 == null ? $name : t1;
    }
  };
  H._HttpHeaders_forEach_closure.prototype = {
    call$2: function($name, values) {
      H._asString($name);
      type$.List_String._as(values);
      this.action.call$2(this.$this._originalHeaderName$1($name), values);
    },
    $signature: 12
  };
  H._HttpHeaders__build_closure.prototype = {
    call$2: function($name, values) {
      var t1, originalName, fold, nameData, t2, i;
      H._asString($name);
      type$.List_String._as(values);
      t1 = this.$this;
      originalName = t1._originalHeaderName$1($name);
      fold = t1._foldHeader$1($name);
      nameData = new H.CodeUnits(originalName);
      t1 = this.builder;
      t1.add$1(0, nameData);
      t1.addByte$1(58);
      t1.addByte$1(32);
      for (t2 = J.getInterceptor$asx(values), i = 0; i < t2.get$length(values); ++i) {
        if (i > 0)
          if (fold) {
            t1.addByte$1(44);
            t1.addByte$1(32);
          } else {
            t1.addByte$1(13);
            t1.addByte$1(10);
            t1.add$1(0, nameData);
            t1.addByte$1(58);
            t1.addByte$1(32);
          }
        t1.add$1(0, new H.CodeUnits(t2.$index(values, i)));
      }
      t1.addByte$1(13);
      t1.addByte$1(10);
    },
    $signature: 12
  };
  H._HttpHeaders_toString_closure.prototype = {
    call$2: function($name, values) {
      var t1, originalName, t2, t3, fold, i;
      H._asString($name);
      type$.List_String._as(values);
      t1 = this.$this;
      originalName = t1._originalHeaderName$1($name);
      t2 = this.sb;
      t3 = t2._contents += originalName;
      t2._contents = t3 + ": ";
      fold = t1._foldHeader$1($name);
      for (t1 = J.getInterceptor$asx(values), i = 0; i < t1.get$length(values); ++i) {
        if (i > 0) {
          t3 = t2._contents;
          if (fold)
            t2._contents = t3 + ", ";
          else {
            t3 += "\n";
            t2._contents = t3;
            t3 += originalName;
            t2._contents = t3;
            t2._contents = t3 + ": ";
          }
        }
        t2._contents += H.S(t1.$index(values, i));
      }
      t2._contents += "\n";
    },
    $signature: 12
  };
  H._HeaderValue.prototype = {
    _HeaderValue$2: function(_value, parameters) {
      var t1 = parameters.get$length(parameters);
      if (t1 !== 0)
        this.set$_parameters(P.HashMap_HashMap$from(parameters, type$.String, type$.nullable_String));
    },
    _ensureParameters$0: function() {
      var t1 = this._parameters;
      if (t1 == null) {
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.nullable_String);
        this.set$_parameters(t1);
      }
      return t1;
    },
    get$parameters: function(_) {
      var t1 = this._unmodifiableParameters;
      if (t1 == null) {
        t1 = new P.UnmodifiableMapView(this._ensureParameters$0(), type$.UnmodifiableMapView_of_String_and_nullable_String);
        this.set$_unmodifiableParameters(t1);
      }
      return t1;
    },
    toString$0: function(_) {
      var parameters, t1,
        sb = new P.StringBuffer("");
      sb._contents = "" + this.__http$_value;
      parameters = this._parameters;
      if (parameters != null && parameters.get$length(parameters) > 0)
        parameters.forEach$1(0, new H._HeaderValue_toString_closure(sb));
      t1 = sb._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _parse$4: function(s, parameterSeparator, valueSeparator, preserveBackslash) {
      var t2, t3, t4, t5, t6, t1 = {};
      t1.index = 0;
      t2 = new H._HeaderValue__parse_done(t1, s);
      t3 = new H._HeaderValue__parse_skipWS(t1, t2, s);
      t4 = new H._HeaderValue__parse_parseValue(t1, t2, s, valueSeparator, parameterSeparator);
      t5 = new H._HeaderValue__parse_maybeExpect(t1, t2, s);
      t3.call$0();
      this.set$__http$_value(t4.call$0());
      t3.call$0();
      if (H.boolConversionCheck(t2.call$0()))
        return;
      t6 = t1.index;
      if (t6 >= s.length)
        return H.ioore(s, t6);
      t5.call$1(parameterSeparator);
      new H._HeaderValue__parse_parseParameters(t1, this, t2, s, parameterSeparator, valueSeparator, false, t4, t3, t5, new H._HeaderValue__parse_expect(t1, t2, s)).call$0();
    },
    set$__http$_value: function(_value) {
      this.__http$_value = H._asString(_value);
    },
    set$_parameters: function(_parameters) {
      this._parameters = type$.nullable_Map_of_String_and_nullable_String._as(_parameters);
    },
    set$_unmodifiableParameters: function(_unmodifiableParameters) {
      this._unmodifiableParameters = type$.nullable_Map_of_String_and_nullable_String._as(_unmodifiableParameters);
    }
  };
  H._HeaderValue_toString_closure.prototype = {
    call$2: function($name, value) {
      var t1, t2, t3, start, i, codeUnit;
      H._asString($name);
      H._asStringQ(value);
      t1 = this.sb;
      t2 = t1._contents += "; ";
      t2 += $name;
      t1._contents = t2;
      if (value != null) {
        t1._contents = t2 + "=";
        t2 = H._HeaderValue__isToken(value);
        t3 = t1._contents;
        if (t2)
          t1._contents = t3 + value;
        else {
          t1._contents = t3 + '"';
          for (t2 = value.length, start = 0, i = 0; i < t2; ++i) {
            codeUnit = C.JSString_methods._codeUnitAt$1(value, i);
            if (codeUnit === 92 || codeUnit === 34) {
              t3 = t1._contents += C.JSString_methods.substring$2(value, start, i);
              t1._contents = t3 + "\\";
              start = i;
            }
          }
          t2 = t1._contents += C.JSString_methods.substring$1(value, start);
          t1._contents = t2 + '"';
        }
      }
    },
    $signature: 50
  };
  H._HeaderValue__parse_done.prototype = {
    call$0: function() {
      return this._box_0.index === this.s.length;
    },
    $signature: 13
  };
  H._HeaderValue__parse_skipWS.prototype = {
    call$0: function() {
      var t1, t2, t3, t4, t5, t6;
      for (t1 = this.done, t2 = this._box_0, t3 = this.s, t4 = t3.length; !H.boolConversionCheck(t1.call$0());) {
        t5 = t2.index;
        if (t5 >= t4)
          return H.ioore(t3, t5);
        t6 = t3[t5];
        if (t6 !== " " && t6 !== "\t")
          return;
        t2.index = t5 + 1;
      }
    },
    $signature: 0
  };
  H._HeaderValue__parse_parseValue.prototype = {
    call$0: function() {
      var t2, t3, t4, t5, t6, char, t7, _this = this,
        t1 = _this._box_0,
        start = t1.index;
      for (t2 = _this.done, t3 = _this.s, t4 = t3.length, t5 = _this.parameterSeparator; !H.boolConversionCheck(t2.call$0());) {
        t6 = t1.index;
        if (t6 >= t4)
          return H.ioore(t3, t6);
        char = t3[t6];
        if (char !== " ")
          if (char !== "\t")
            t7 = char === t5;
          else
            t7 = true;
        else
          t7 = true;
        if (t7)
          break;
        t1.index = t6 + 1;
      }
      return C.JSString_methods.substring$2(t3, start, t1.index);
    },
    $signature: 2
  };
  H._HeaderValue__parse_expect.prototype = {
    call$1: function(expected) {
      var t1, t2, _this = this;
      if (!H.boolConversionCheck(_this.done.call$0())) {
        t1 = _this.s;
        t2 = _this._box_0.index;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        t2 = t1[t2] !== expected;
        t1 = t2;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(H.HttpException$("Failed to parse header value", null));
      ++_this._box_0.index;
    },
    $signature: 34
  };
  H._HeaderValue__parse_maybeExpect.prototype = {
    call$1: function(expected) {
      var _this = this;
      if (H.boolConversionCheck(_this.done.call$0()) || !C.JSString_methods.startsWith$2(_this.s, expected, _this._box_0.index))
        return false;
      ++_this._box_0.index;
      return true;
    },
    $signature: 8
  };
  H._HeaderValue__parse_parseParameters.prototype = {
    call$0: function() {
      var t6, t7, t8, t9, $name, value, t10, _this = this,
        t1 = _this.$this,
        parameters = t1._ensureParameters$0(),
        t2 = _this._box_0,
        t3 = _this.done,
        t4 = _this.s,
        t5 = _this.parameterSeparator,
        parseParameterName = new H._HeaderValue__parse_parseParameters_parseParameterName(t2, t3, t4, t5, _this.valueSeparator),
        parseParameterValue = new H._HeaderValue__parse_parseParameters_parseParameterValue(t2, t3, t4, _this.preserveBackslash, _this.parseValue);
      for (t6 = _this.expect, t7 = t4.length, t8 = _this.maybeExpect, t9 = _this.skipWS, t1 = t1 instanceof H._ContentType; !H.boolConversionCheck(t3.call$0());) {
        t9.call$0();
        if (H.boolConversionCheck(t3.call$0()))
          return;
        $name = parseParameterName.call$0();
        t9.call$0();
        if (H.boolConversionCheck(t8.call$1("="))) {
          t9.call$0();
          value = parseParameterValue.call$0();
          parameters.$indexSet(0, $name, $name === "charset" && t1 ? value.toLowerCase() : value);
          t9.call$0();
        } else if ($name.length !== 0)
          parameters.$indexSet(0, $name, null);
        if (H.boolConversionCheck(t3.call$0()))
          return;
        t10 = t2.index;
        if (t10 >= t7)
          return H.ioore(t4, t10);
        t6.call$1(t5);
      }
    },
    $signature: 0
  };
  H._HeaderValue__parse_parseParameters_parseParameterName.prototype = {
    call$0: function() {
      var t2, t3, t4, t5, t6, char, _this = this,
        t1 = _this._box_0,
        start = t1.index;
      for (t2 = _this.done, t3 = _this.s, t4 = t3.length, t5 = _this.parameterSeparator; !H.boolConversionCheck(t2.call$0());) {
        t6 = t1.index;
        if (t6 >= t4)
          return H.ioore(t3, t6);
        char = t3[t6];
        if (char === " " || char === "\t" || char === "=" || char === t5 || false)
          break;
        t1.index = t6 + 1;
      }
      return C.JSString_methods.substring$2(t3, start, t1.index).toLowerCase();
    },
    $signature: 2
  };
  H._HeaderValue__parse_parseParameters_parseParameterValue.prototype = {
    call$0: function() {
      var t2, t3, t4, t5, t6, char, _this = this,
        _s28_ = "Failed to parse header value",
        t1 = _this.done;
      if (!H.boolConversionCheck(t1.call$0())) {
        t2 = _this.s;
        t3 = _this._box_0.index;
        if (t3 >= t2.length)
          return H.ioore(t2, t3);
        t3 = t2[t3] === '"';
        t2 = t3;
      } else
        t2 = false;
      if (t2) {
        t2 = _this._box_0;
        ++t2.index;
        for (t3 = _this.s, t4 = t3.length, t5 = ""; !H.boolConversionCheck(t1.call$0());) {
          t6 = t2.index;
          if (t6 >= t4)
            return H.ioore(t3, t6);
          char = t3[t6];
          if (char === "\\") {
            ++t6;
            if (t6 === t4)
              throw H.wrapException(H.HttpException$(_s28_, null));
            t2.index = t6;
          } else if (char === '"') {
            t2.index = t6 + 1;
            return t5.charCodeAt(0) == 0 ? t5 : t5;
          }
          if (t6 >= t4)
            return H.ioore(t3, t6);
          t5 += t3[t6];
          t2.index = t6 + 1;
        }
        throw H.wrapException(H.HttpException$(_s28_, null));
      } else
        return _this.parseValue.call$0();
    },
    $signature: 2
  };
  H._ContentType.prototype = {};
  H._Cookie.prototype = {
    _parseSetCookieValue$1: function(s) {
      var t2, _this = this, t1 = {};
      t1.index = 0;
      t2 = new H._Cookie__parseSetCookieValue_done(t1, s);
      _this.__http$_name = H._Cookie__validateName(new H._Cookie__parseSetCookieValue_parseName(t1, t2, s).call$0());
      if (H.boolConversionCheck(t2.call$0()) || _this.__http$_name.length === 0)
        throw H.wrapException(H.HttpException$("Failed to parse header value [" + s + "]", null));
      ++t1.index;
      _this.__http$_value = H._Cookie__validateValue(new H._Cookie__parseSetCookieValue_parseValue(t1, t2, s).call$0());
      if (H.boolConversionCheck(t2.call$0()))
        return;
      ++t1.index;
      new H._Cookie__parseSetCookieValue_parseAttributes(t1, _this, t2, s).call$0();
    },
    toString$0: function(_) {
      var t2, _this = this,
        t1 = "" + _this.__http$_name + "=" + _this.__http$_value,
        expires = _this.expires;
      if (expires != null)
        t1 = t1 + "; Expires=" + H.HttpDate_format(expires);
      t2 = _this.maxAge;
      if (t2 != null)
        t1 = t1 + "; Max-Age=" + H.S(t2);
      t2 = _this.domain;
      if (t2 != null)
        t1 = t1 + "; Domain=" + t2;
      t2 = _this.__http$_path;
      if (t2 != null)
        t1 = t1 + "; Path=" + t2;
      if (_this.secure)
        t1 += "; Secure";
      if (_this.httpOnly)
        t1 += "; HttpOnly";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isCookie: 1
  };
  H._Cookie__parseSetCookieValue_done.prototype = {
    call$0: function() {
      return this._box_0.index === this.s.length;
    },
    $signature: 13
  };
  H._Cookie__parseSetCookieValue_parseName.prototype = {
    call$0: function() {
      var t2, t3, t4, t5,
        t1 = this._box_0,
        start = t1.index;
      for (t2 = this.done, t3 = this.s, t4 = t3.length; !H.boolConversionCheck(t2.call$0());) {
        t5 = t1.index;
        if (t5 >= t4)
          return H.ioore(t3, t5);
        if (t3[t5] === "=")
          break;
        t1.index = t5 + 1;
      }
      return C.JSString_methods.trim$0(C.JSString_methods.substring$2(t3, start, t1.index));
    },
    $signature: 2
  };
  H._Cookie__parseSetCookieValue_parseValue.prototype = {
    call$0: function() {
      var t2, t3, t4, t5,
        t1 = this._box_0,
        start = t1.index;
      for (t2 = this.done, t3 = this.s, t4 = t3.length; !H.boolConversionCheck(t2.call$0());) {
        t5 = t1.index;
        if (t5 >= t4)
          return H.ioore(t3, t5);
        if (t3[t5] === ";")
          break;
        t1.index = t5 + 1;
      }
      return C.JSString_methods.trim$0(C.JSString_methods.substring$2(t3, start, t1.index));
    },
    $signature: 2
  };
  H._Cookie__parseSetCookieValue_parseAttributes.prototype = {
    call$0: function() {
      var t4, t5, $name, t6, value, _this = this,
        t1 = _this._box_0,
        t2 = _this.done,
        t3 = _this.s,
        parseAttributeName = new H._Cookie__parseSetCookieValue_parseAttributes_parseAttributeName(t1, t2, t3),
        parseAttributeValue = new H._Cookie__parseSetCookieValue_parseAttributes_parseAttributeValue(t1, t2, t3);
      for (t4 = t3.length, t5 = _this.$this; !H.boolConversionCheck(t2.call$0());) {
        $name = parseAttributeName.call$0();
        if (!H.boolConversionCheck(t2.call$0())) {
          t6 = t1.index;
          if (t6 >= t4)
            return H.ioore(t3, t6);
          t6 = t3[t6] === "=";
        } else
          t6 = false;
        if (t6) {
          ++t1.index;
          value = parseAttributeValue.call$0();
        } else
          value = "";
        if ($name === "expires")
          t5.expires = H.HttpDate__parseCookieDate(value);
        else if ($name === "max-age")
          t5.maxAge = P.int_parse(value, null);
        else if ($name === "domain")
          t5.domain = value;
        else if ($name === "path") {
          H._Cookie__validatePath(value);
          t5.__http$_path = value;
        } else if ($name === "httponly")
          t5.httpOnly = true;
        else if ($name === "secure")
          t5.secure = true;
        if (!H.boolConversionCheck(t2.call$0()))
          ++t1.index;
      }
    },
    $signature: 0
  };
  H._Cookie__parseSetCookieValue_parseAttributes_parseAttributeName.prototype = {
    call$0: function() {
      var t2, t3, t4, t5, t6,
        t1 = this._box_0,
        start = t1.index;
      for (t2 = this.done, t3 = this.s, t4 = t3.length; !H.boolConversionCheck(t2.call$0());) {
        t5 = t1.index;
        if (t5 >= t4)
          return H.ioore(t3, t5);
        t6 = t3[t5];
        if (t6 === "=" || t6 === ";")
          break;
        t1.index = t5 + 1;
      }
      return C.JSString_methods.trim$0(C.JSString_methods.substring$2(t3, start, t1.index)).toLowerCase();
    },
    $signature: 2
  };
  H._Cookie__parseSetCookieValue_parseAttributes_parseAttributeValue.prototype = {
    call$0: function() {
      var t2, t3, t4, t5,
        t1 = this._box_0,
        start = t1.index;
      for (t2 = this.done, t3 = this.s, t4 = t3.length; !H.boolConversionCheck(t2.call$0());) {
        t5 = t1.index;
        if (t5 >= t4)
          return H.ioore(t3, t5);
        if (t3[t5] === ";")
          break;
        t1.index = t5 + 1;
      }
      return C.JSString_methods.trim$0(C.JSString_methods.substring$2(t3, start, t1.index)).toLowerCase();
    },
    $signature: 2
  };
  H._HttpProfileEvent.prototype = {
    toJson$0: function() {
      var t1 = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      t1.$indexSet(0, "timestamp", this.timestamp);
      t1.$indexSet(0, "event", this.name);
      return t1;
    }
  };
  H._HttpProfileData.prototype = {
    requestEvent$1: function($name) {
      this._timeline.instant$2$arguments($name, null);
      C.JSArray_methods.add$1(this.requestEvents, new H._HttpProfileEvent(P._getTraceClock(), $name, null));
      P._getTraceClock();
    },
    formatHeaders$1: function(r) {
      var headers = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.List_String);
      r.get$headers(r).forEach$1(0, new H._HttpProfileData_formatHeaders_closure(headers));
      return headers;
    },
    formatConnectionInfo$1: function(r) {
      var t1, t2, t3, t4, _null = null;
      if (r.get$connectionInfo() == null)
        t1 = _null;
      else {
        t1 = r.get$connectionInfo();
        t1 = t1 == null ? _null : t1.localPort;
        t2 = r.get$connectionInfo();
        t2 = t2 == null ? _null : t2.remoteAddress.get$address();
        t3 = r.get$connectionInfo();
        t3 = t3 == null ? _null : t3.remotePort;
        t4 = type$.dynamic;
        t4 = P.LinkedHashMap_LinkedHashMap$_literal(["localPort", t1, "remoteAddress", t2, "remotePort", t3], t4, t4);
        t1 = t4;
      }
      return t1;
    },
    finishRequest$1$request: function(request) {
      var t1, t2, t3, t4, t5, t6, _i, _this = this;
      _this.requestInProgress = false;
      t1 = P._getTraceClock();
      if (_this.___HttpProfileData_requestEndTimestamp == null)
        _this.___HttpProfileData_requestEndTimestamp = t1;
      else
        H.throwExpression(H.LateError$fieldAI("requestEndTimestamp"));
      t1 = _this.formatHeaders$1(request);
      t2 = _this.formatConnectionInfo$1(request);
      t3 = request.headers;
      t4 = t3._contentLength;
      t5 = H.setRuntimeTypeInfo([], type$.JSArray_String);
      for (t6 = request.cookies, _i = 0; false; ++_i)
        t5.push(t6[_i].toString$0(0));
      _this.set$requestDetails(P.LinkedHashMap_LinkedHashMap$_literal(["headers", t1, "connectionInfo", t2, "contentLength", t4, "cookies", t5, "followRedirects", true, "maxRedirects", request._maxRedirects, "method", request.method, "persistentConnection", t3._persistentConnection, "uri", request.uri.toString$0(0)], type$.String, type$.dynamic));
      _this._timeline.finish$1$arguments(0, _this.requestDetails);
      P._getTraceClock();
    },
    startResponse$1$response: function(response) {
      var t7, t8, _i, t9, t10, _this = this,
        t1 = _this.formatHeaders$1(response),
        t2 = _this.formatConnectionInfo$1(response),
        t3 = response._incoming,
        t4 = t3.headers,
        t5 = t4._contentLength,
        t6 = H.setRuntimeTypeInfo([], type$.JSArray_String);
      for (t7 = response.get$cookies(), t8 = t7.length, _i = 0; _i < t7.length; t7.length === t8 || (0, H.throwConcurrentModificationError)(t7), ++_i)
        t6.push(t7[_i].toString$0(0));
      t7 = response.get$isRedirect();
      t4 = t4._persistentConnection;
      t8 = t3.reasonPhrase;
      t8.toString;
      t9 = new H._HttpProfileData_startResponse_formatRedirectInfo(response).call$0();
      t3 = t3.statusCode;
      t3.toString;
      t10 = type$.dynamic;
      _this.set$responseDetails(P.LinkedHashMap_LinkedHashMap$_literal(["headers", t1, "compressionState", response.compressionState.__http$_name, "connectionInfo", t2, "contentLength", t5, "cookies", t6, "isRedirect", t7, "persistentConnection", t4, "reasonPhrase", t8, "redirects", t9, "statusCode", t3], type$.String, t10));
      _this.responseInProgress = true;
      _this.___HttpProfileData__responseTimeline = new P.TimelineTask(_this._timeline, "HTTP/client", 0, H.setRuntimeTypeInfo([], type$.JSArray__AsyncBlock));
      t3 = P._getTraceClock();
      if (_this.___HttpProfileData_responseStartTimestamp == null)
        _this.___HttpProfileData_responseStartTimestamp = t3;
      else
        H.throwExpression(H.LateError$fieldAI("responseStartTimestamp"));
      t1 = _this.get$_responseTimeline();
      t2 = "HTTP CLIENT response of " + _this.method;
      t10 = P.LinkedHashMap_LinkedHashMap$_empty(t10, t10);
      t10.$indexSet(0, "requestUri", _this.uri.toString$0(0));
      for (t3 = _this.responseDetails, t3 = t3.get$entries(t3), t3 = t3.get$iterator(t3); t3.moveNext$0();) {
        t4 = t3.get$current(t3);
        t10.$indexSet(0, t4.key, t4.value);
      }
      t1.start$2$arguments(0, t2, t10);
      P._getTraceClock();
    },
    finishResponseWithError$1: function(error) {
      var _this = this,
        t1 = _this.responseInProgress;
      t1.toString;
      if (!t1)
        return;
      _this.responseInProgress = false;
      t1 = P._getTraceClock();
      if (_this.___HttpProfileData_responseEndTimestamp == null)
        _this.___HttpProfileData_responseEndTimestamp = t1;
      else
        H.throwExpression(H.LateError$fieldAI("responseEndTimestamp"));
      _this.responseError = error;
      t1 = type$.dynamic;
      _this.get$_responseTimeline().finish$1$arguments(0, P.LinkedHashMap_LinkedHashMap$_literal(["error", error], t1, t1));
      P._getTraceClock();
    },
    toJson$0: function() {
      var t4, t5, t6, t7, _i, _this = this,
        _s9_ = "startTime",
        t1 = type$.String,
        t2 = type$.dynamic,
        t3 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      t3.$indexSet(0, "type", "@HttpProfileRequest");
      t3.$indexSet(0, "id", _this.get$id(_this));
      t3.$indexSet(0, "isolateId", $.$get$_HttpProfileData_isolateId());
      t3.$indexSet(0, "method", _this.method);
      t3.$indexSet(0, "uri", _this.uri.toString$0(0));
      t4 = _this.___HttpProfileData_requestStartTimestamp;
      t3.$indexSet(0, _s9_, t4 == null ? H.throwExpression(H.LateError$fieldNI("requestStartTimestamp")) : t4);
      if (!_this.requestInProgress) {
        t4 = _this.___HttpProfileData_requestEndTimestamp;
        t3.$indexSet(0, "endTime", t4 == null ? H.throwExpression(H.LateError$fieldNI("requestEndTimestamp")) : t4);
      }
      if (!_this.requestInProgress) {
        t4 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
        t5 = H.setRuntimeTypeInfo([], type$.JSArray_Map_String_dynamic);
        for (t6 = _this.requestEvents, t7 = t6.length, _i = 0; _i < t6.length; t6.length === t7 || (0, H.throwConcurrentModificationError)(t6), ++_i)
          t5.push(t6[_i].toJson$0());
        t4.$indexSet(0, "events", t5);
        t5 = _this.proxyDetails;
        if (t5 != null)
          t4.$indexSet(0, "proxyDetails", t5);
        t5 = _this.requestDetails;
        if (t5 != null)
          for (t5 = t5.get$entries(t5), t5 = t5.get$iterator(t5); t5.moveNext$0();) {
            t6 = t5.get$current(t5);
            t4.$indexSet(0, t6.key, t6.value);
          }
        t5 = _this.requestError;
        if (t5 != null)
          t4.$indexSet(0, "error", t5);
        t3.$indexSet(0, "request", t4);
      }
      if (_this.responseInProgress != null) {
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
        t2 = _this.___HttpProfileData_responseStartTimestamp;
        t1.$indexSet(0, _s9_, t2 == null ? H.throwExpression(H.LateError$fieldNI("responseStartTimestamp")) : t2);
        for (t2 = _this.responseDetails, t2 = t2.get$entries(t2), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
          t4 = t2.get$current(t2);
          t1.$indexSet(0, t4.key, t4.value);
        }
        t2 = _this.responseInProgress;
        t2.toString;
        if (!t2) {
          t2 = _this.___HttpProfileData_responseEndTimestamp;
          t1.$indexSet(0, "endTime", t2 == null ? H.throwExpression(H.LateError$fieldNI("responseEndTimestamp")) : t2);
        }
        t2 = _this.responseError;
        if (t2 != null)
          t1.$indexSet(0, "error", t2);
        t3.$indexSet(0, "response", t1);
      }
      return t3;
    },
    get$id: function(_) {
      var t1 = this.___HttpProfileData_id;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("id")) : t1;
    },
    get$_responseTimeline: function() {
      var t1 = this.___HttpProfileData__responseTimeline;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_responseTimeline")) : t1;
    },
    set$requestDetails: function(requestDetails) {
      this.requestDetails = type$.nullable_Map_String_dynamic._as(requestDetails);
    },
    set$proxyDetails: function(proxyDetails) {
      this.proxyDetails = type$.nullable_Map_String_dynamic._as(proxyDetails);
    },
    set$responseDetails: function(responseDetails) {
      this.responseDetails = type$.nullable_Map_String_dynamic._as(responseDetails);
    }
  };
  H._HttpProfileData_formatHeaders_closure.prototype = {
    call$2: function($name, values) {
      this.headers.$indexSet(0, $name, type$.List_String._as(values));
    },
    $signature: 4
  };
  H._HttpProfileData_startResponse_formatRedirectInfo.prototype = {
    call$0: function() {
      var t1, t2, t3, t4, _i, redirect,
        redirects = H.setRuntimeTypeInfo([], type$.JSArray_Map_String_dynamic);
      for (t1 = this.response._httpRequest._responseRedirects, t2 = t1.length, t3 = type$.String, t4 = type$.dynamic, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        redirect = t1[_i];
        C.JSArray_methods.add$1(redirects, P.LinkedHashMap_LinkedHashMap$_literal(["location", redirect.location.toString$0(0), "method", redirect.method, "statusCode", redirect.statusCode], t3, t4));
      }
      return redirects;
    },
    $signature: 54
  };
  H._CopyingBytesBuilder.prototype = {
    add$1: function(_, bytes) {
      var t1, bytesLength, required, i, t2, _this = this;
      type$.List_int._as(bytes);
      t1 = J.getInterceptor$asx(bytes);
      bytesLength = t1.get$length(bytes);
      if (bytesLength === 0)
        return;
      required = _this.__http$_length + bytesLength;
      if (_this.__http$_buffer.length < required)
        _this._grow$1(required);
      for (i = 0; i < bytesLength; ++i) {
        t2 = _this.__http$_buffer;
        (t2 && C.NativeUint8List_methods).$indexSet(t2, _this.__http$_length + i, t1.$index(bytes, i));
      }
      _this.__http$_length = required;
    },
    addByte$1: function(byte) {
      var _this = this,
        t1 = _this.__http$_buffer.length,
        t2 = _this.__http$_length;
      if (t1 === t2)
        _this._grow$1(t2);
      t1 = _this.__http$_buffer;
      t2 = _this.__http$_length;
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = byte;
      _this.__http$_length = t2 + 1;
    },
    _grow$1: function(required) {
      var newBuffer, t1,
        newSize = required * 2;
      newSize = newSize < 1024 ? 1024 : H._CopyingBytesBuilder__pow2roundup(newSize);
      newBuffer = new Uint8Array(newSize);
      t1 = this.__http$_buffer;
      C.NativeUint8List_methods.setRange$3(newBuffer, 0, t1.length, t1);
      this.__http$_buffer = newBuffer;
    },
    takeBytes$0: function() {
      var t2, buffer, _this = this,
        t1 = _this.__http$_length;
      if (t1 === 0)
        return $.$get$_CopyingBytesBuilder__emptyList();
      t2 = _this.__http$_buffer;
      buffer = H.NativeUint8List_NativeUint8List$view(t2.buffer, t2.byteOffset, t1);
      _this.__http$_length = 0;
      _this.set$__http$_buffer($.$get$_CopyingBytesBuilder__emptyList());
      return buffer;
    },
    get$length: function(_) {
      return this.__http$_length;
    },
    set$__http$_buffer: function(_buffer) {
      this.__http$_buffer = type$.Uint8List._as(_buffer);
    },
    $isBytesBuilder: 1
  };
  H._HttpIncoming.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1;
      type$.nullable_void_Function_Uint8List._as(onData);
      type$.nullable_void_Function._as(onDone);
      this.hasSubscriber = true;
      t1 = this.__http$_stream;
      return new P._HandleErrorStream(new H._HttpIncoming_listen_closure(this), type$.nullable_bool_Function_dynamic._as(null), t1, t1.$ti._eval$1("_HandleErrorStream<Stream.T>")).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$3$cancelOnError$onDone: function(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$2$cancelOnError: function(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    }
  };
  H._HttpIncoming_listen_closure.prototype = {
    call$1: function(error) {
      throw H.wrapException(H.HttpException$(H._asString(J.get$message$x(error)), this.$this.uri));
    },
    $signature: 5
  };
  H._HttpInboundMessageListInt.prototype = {
    get$headers: function(_) {
      return this._incoming.headers;
    },
    set$_cookies: function(_cookies) {
      this._cookies = type$.nullable_List_Cookie._as(_cookies);
    }
  };
  H._HttpClientResponse.prototype = {
    get$cookies: function() {
      var t1, t2,
        cookies = this._cookies;
      if (cookies != null)
        return cookies;
      cookies = H.setRuntimeTypeInfo([], type$.JSArray_Cookie);
      t1 = this._incoming.headers._headers.$index(0, H._HttpHeaders__validateField("set-cookie"));
      if (t1 != null)
        for (t1 = J.get$iterator$ax(t1); t1.moveNext$0();) {
          t2 = new H._Cookie("", "", false);
          t2._parseSetCookieValue$1(t1.get$current(t1));
          C.JSArray_methods.add$1(cookies, t2);
        }
      this.set$_cookies(cookies);
      return cookies;
    },
    get$isRedirect: function() {
      var t1 = this._httpRequest.method;
      if (t1 === "GET" || t1 === "HEAD") {
        t1 = this._incoming.statusCode;
        t1.toString;
        return t1 === 301 || t1 === 308 || t1 === 302 || t1 === 303 || t1 === 307;
      } else if (t1 === "POST") {
        t1 = this._incoming.statusCode;
        t1.toString;
        return t1 === 303;
      }
      return false;
    },
    redirect$0: function(_) {
      var method, url, t1, $location, t2, _i, _this = this, _box_0 = {};
      _box_0.method = method;
      _box_0.url = url;
      _box_0.url = _box_0.method = null;
      t1 = _this._incoming.statusCode;
      t1.toString;
      if (t1 === 303 && _this._httpRequest.method === "POST")
        _box_0.method = "GET";
      else
        _box_0.method = _this._httpRequest.method;
      $location = _this._incoming.headers.value$1(0, "location");
      if ($location == null)
        throw H.wrapException(P.StateError$("Response has no Location header for redirect"));
      _box_0.url = P.Uri_parse($location);
      for (t1 = _this._httpRequest._responseRedirects, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        if (t1[_i].location.$eq(0, _box_0.url))
          return P.Future_Future$error(new H.RedirectException("Redirect loop detected"), null, type$.HttpClientResponse);
      return _this._httpClient._openUrlFromRequest$3(_box_0.method, _box_0.url, _this._httpRequest).then$1$1(new H._HttpClientResponse_redirect_closure(_box_0, _this), type$.HttpClientResponse);
    },
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var stream, t2, _this = this,
        t1 = type$.nullable_void_Function_Uint8List;
      t1._as(onData);
      type$.nullable_void_Function._as(onDone);
      stream = _this._incoming;
      if (stream.upgraded) {
        t2 = _this._profileData;
        if (t2 != null)
          t2.finishResponseWithError$1("Connection was upgraded");
        _this._httpRequest._httpClientConnection.destroy$0();
        t1._as(null);
        return P._DoneStreamSubscription$(onDone, type$.Uint8List);
      }
      if (_this.compressionState === C.HttpClientResponseCompressionState_1) {
        t1 = H._instanceType(stream)._eval$1("CastStream<Stream.T,List<int>>");
        t1 = t1._eval$1("StreamTransformer<Stream.T,List<int>>")._as(P.ZLibDecoder$(null, false, 15)).bind$1(new H.CastStream(stream, t1));
        stream = t1.$ti._eval$1("StreamTransformer<Stream.T,Uint8List>")._as(C.C__ToUint8List).bind$1(t1);
      }
      if (_this._profileData != null) {
        t1 = H._instanceType(stream);
        stream = new P._MapStream(t1._eval$1("Uint8List(Stream.T)")._as(new H._HttpClientResponse_listen_closure(_this)), stream, t1._eval$1("_MapStream<Stream.T,Uint8List>"));
      }
      return stream.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, new H._HttpClientResponse_listen_closure0(_this, onDone), new H._HttpClientResponse_listen_closure1(_this, onError));
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$3$cancelOnError$onDone: function(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$2$cancelOnError: function(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    },
    get$connectionInfo: function() {
      return H._HttpConnectionInfo_create(this._httpRequest._httpClientConnection._socket);
    },
    _authenticate$1: function(proxyAuth) {
      var header, scheme, realm, _this = this, t1 = {},
        t2 = _this._httpRequest._HttpClientRequest__profileData;
      if (t2 != null)
        t2.requestEvent$1("Authentication");
      t2 = new H._HttpClientResponse__authenticate_authChallenge(_this, proxyAuth).call$0();
      t2.toString;
      header = H._HeaderValue_parse(J.$index$asx(t2, 0), ",");
      scheme = H._AuthenticationScheme__AuthenticationScheme$fromString(header.__http$_value);
      realm = header.get$parameters(header)._collection$_map.$index(0, "realm");
      t1.cr = new H._HttpClientResponse__authenticate_findCredentials(_this, proxyAuth).call$1(scheme);
      return new H._HttpClientResponse__authenticate_requestAuthentication(_this, proxyAuth).call$2(scheme, realm).then$1$1(new H._HttpClientResponse__authenticate_closure(t1, _this, scheme, new H._HttpClientResponse__authenticate_retry(_this)), type$.HttpClientResponse);
    },
    $isHttpClientResponse: 1
  };
  H._HttpClientResponse_redirect_closure.prototype = {
    call$1: function(request) {
      var t1, t2, t3, t4;
      type$._HttpClientRequest._as(request);
      t1 = request._responseRedirects;
      t2 = this.$this;
      C.JSArray_methods.addAll$1(t1, t2._httpRequest._responseRedirects);
      t2 = t2._incoming.statusCode;
      t2.toString;
      t3 = this._box_0;
      t4 = t3.method;
      t4.toString;
      t3 = t3.url;
      t3.toString;
      C.JSArray_methods.add$1(t1, new H._RedirectInfo(t2, t4, t3));
      return request.close$0(0);
    },
    $signature: 28
  };
  H._HttpClientResponse_listen_closure.prototype = {
    call$1: function(data) {
      var t1;
      type$.Uint8List._as(data);
      t1 = this.$this._profileData;
      if (t1 != null) {
        C.JSArray_methods.addAll$1(t1.responseBody, data);
        P._getTraceClock();
      }
      return data;
    },
    $signature: 79
  };
  H._HttpClientResponse_listen_closure1.prototype = {
    call$2: function(e, st) {
      var t1 = this.$this._profileData;
      if (t1 != null)
        t1.finishResponseWithError$1(J.toString$0$(e));
      t1 = this.onError;
      if (t1 == null)
        return;
      if (type$.void_Function_Object._is(t1))
        t1.call$1(type$.Object._as(e));
      else
        t1.call$2(e, st);
    },
    $signature: 4
  };
  H._HttpClientResponse_listen_closure0.prototype = {
    call$0: function() {
      var t2,
        t1 = this.$this._profileData;
      if (t1 != null) {
        t1.responseInProgress = false;
        t2 = P._getTraceClock();
        if (t1.___HttpProfileData_responseEndTimestamp == null)
          t1.___HttpProfileData_responseEndTimestamp = t2;
        else
          H.throwExpression(H.LateError$fieldAI("responseEndTimestamp"));
        t1.requestEvent$1("Content Download");
        t1.get$_responseTimeline().finish$0(0);
        P._getTraceClock();
      }
      t1 = this.onDone;
      if (t1 != null)
        t1.call$0();
    },
    $signature: 0
  };
  H._HttpClientResponse__authenticate_retry.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._httpRequest._HttpClientRequest__profileData;
      if (t2 != null)
        t2.requestEvent$1("Retrying");
      return t1.drain$1$0(type$.dynamic).then$1$1(new H._HttpClientResponse__authenticate_retry_closure(t1), type$.HttpClientResponse);
    },
    $signature: 40
  };
  H._HttpClientResponse__authenticate_retry_closure.prototype = {
    call$1: function(_) {
      var t1 = this.$this,
        t2 = t1._httpRequest;
      return t1._httpClient._openUrlFromRequest$3(t2.method, t2.uri, t2).then$1$1(new H._HttpClientResponse__authenticate_retry__closure(), type$.HttpClientResponse);
    },
    $signature: 16
  };
  H._HttpClientResponse__authenticate_retry__closure.prototype = {
    call$1: function(request) {
      return type$._HttpClientRequest._as(request).close$0(0);
    },
    $signature: 28
  };
  H._HttpClientResponse__authenticate_authChallenge.prototype = {
    call$0: function() {
      var t1 = this.$this._incoming;
      return this.proxyAuth ? t1.headers._headers.$index(0, H._HttpHeaders__validateField("proxy-authenticate")) : t1.headers._headers.$index(0, H._HttpHeaders__validateField("www-authenticate"));
    },
    $signature: 53
  };
  H._HttpClientResponse__authenticate_findCredentials.prototype = {
    call$1: function(scheme) {
      var t1 = this.$this,
        t2 = t1._httpClient;
      t1 = t1._httpRequest;
      return this.proxyAuth ? t2._findProxyCredentials$2(t1._proxy, scheme) : t2._findCredentials$2(t1.uri, scheme);
    },
    $signature: 103
  };
  H._HttpClientResponse__authenticate_requestAuthentication.prototype = {
    call$2: function(scheme, realm) {
      var t1;
      if (this.proxyAuth) {
        t1 = P.Future_Future$value(false, type$.bool);
        return t1;
      } else {
        t1 = P.Future_Future$value(false, type$.bool);
        return t1;
      }
    },
    $signature: 57
  };
  H._HttpClientResponse__authenticate_closure.prototype = {
    call$1: function(credsAvailable) {
      var _this = this,
        t1 = _this.$this;
      if (H._asBool(credsAvailable)) {
        _this._box_0.cr = t1._httpClient._findCredentials$2(t1._httpRequest.uri, _this.scheme);
        return _this.retry.call$0();
      } else
        return t1;
    },
    $signature: 70
  };
  H._ToUint8List.prototype = {
    startChunkedConversion$1: function(sink) {
      return new H._Uint8ListConversionSink(type$.Sink_Uint8List._as(sink));
    }
  };
  H._Uint8ListConversionSink.prototype = {
    add$1: function(_, data) {
      var t1 = this.__http$_target,
        t2 = t1._async$_sink;
      t1 = t2.$ti._rest[1]._as(t1.$ti._precomputed1._as(new Uint8Array(H._ensureNativeList(type$.List_int._as(data)))));
      if ((t2._state & 2) !== 0)
        H.throwExpression(P.StateError$("Stream is already closed"));
      t2.super$_BufferingStreamSubscription$_add(0, t1);
    },
    close$0: function(_) {
      var t1 = this.__http$_target._async$_sink;
      if ((t1._state & 2) !== 0)
        H.throwExpression(P.StateError$("Stream is already closed"));
      t1.super$_BufferingStreamSubscription$_close();
    },
    $isSink: 1
  };
  H._StreamSinkImpl0.prototype = {
    add$1: function(_, data) {
      H._instanceType(this)._eval$1("_StreamSinkImpl0.T")._as(data);
      if (this.__http$_isClosed)
        throw H.wrapException(P.StateError$("StreamSink is closed"));
      this.get$_controller().add$1(0, data);
    },
    addError$2: function(error, stackTrace) {
      if (this.__http$_isClosed)
        throw H.wrapException(P.StateError$("StreamSink is closed"));
      this.get$_controller().addError$2(error, stackTrace);
    },
    close$0: function(_) {
      var controller, _this = this;
      if (_this.__http$_isBound)
        throw H.wrapException(P.StateError$("StreamSink is bound to a stream"));
      if (!_this.__http$_isClosed) {
        _this.__http$_isClosed = true;
        controller = _this.__http$_controllerInstance;
        if (controller != null)
          controller.close$0(0);
        else
          _this.__http$_closeTarget$0();
      }
      return _this.get$done();
    },
    __http$_closeTarget$0: function() {
      this.__http$_target.close$0(0).then$1$2$onError(this.get$__http$_completeDoneValue(), this.get$__http$_completeDoneError(), type$.void);
    },
    get$done: function() {
      return this.__http$_doneCompleter.future;
    },
    __http$_completeDoneValue$1: function(value) {
      var t1 = this.__http$_doneCompleter;
      if (t1.future._state === 0)
        t1.complete$1(0, value);
    },
    __http$_completeDoneError$2: function(error, stackTrace) {
      var t1;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      t1 = this.__http$_doneCompleter;
      if (t1.future._state === 0) {
        this.__http$_hasError = true;
        t1.completeError$2(error, stackTrace);
      }
    },
    get$_controller: function() {
      var t1, _this = this;
      if (_this.__http$_isBound)
        throw H.wrapException(P.StateError$("StreamSink is bound to a stream"));
      if (_this.__http$_isClosed)
        throw H.wrapException(P.StateError$("StreamSink is closed"));
      if (_this.__http$_controllerInstance == null) {
        _this.set$__http$_controllerInstance(P.StreamController_StreamController(true, H._instanceType(_this)._eval$1("_StreamSinkImpl0.T")));
        _this.__http$_controllerCompleter = new P._AsyncCompleter(new P._Future($.Zone__current, type$._Future_dynamic), type$._AsyncCompleter_dynamic);
        t1 = _this.get$_controller();
        _this.__http$_target.addStream$1(0, new P._ControllerStream(t1, H._instanceType(t1)._eval$1("_ControllerStream<1>"))).then$1$2$onError(new H._StreamSinkImpl__controller_closure(_this), new H._StreamSinkImpl__controller_closure0(_this), type$.Null);
      }
      t1 = _this.__http$_controllerInstance;
      t1.toString;
      return t1;
    },
    set$__http$_controllerInstance: function(_controllerInstance) {
      this.__http$_controllerInstance = H._instanceType(this)._eval$1("StreamController<_StreamSinkImpl0.T>?")._as(_controllerInstance);
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isSink: 1
  };
  H._StreamSinkImpl__controller_closure.prototype = {
    call$1: function(_) {
      var t1 = this.$this;
      if (t1.__http$_isBound) {
        t1.__http$_controllerCompleter.complete$1(0, t1);
        t1.__http$_controllerCompleter = null;
        t1.set$__http$_controllerInstance(null);
      } else
        t1.__http$_closeTarget$0();
    },
    $signature: 1
  };
  H._StreamSinkImpl__controller_closure0.prototype = {
    call$2: function(error, stackTrace) {
      var t1;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      t1 = this.$this;
      if (t1.__http$_isBound) {
        t1.__http$_controllerCompleter.completeError$2(error, stackTrace);
        t1.__http$_controllerCompleter = null;
        t1.set$__http$_controllerInstance(null);
      } else
        t1.__http$_completeDoneError$2(error, stackTrace);
    },
    $signature: 11
  };
  H._IOSinkImpl0.prototype = {$isStringSink: 1};
  H._HttpOutboundMessage.prototype = {
    add$1: function(_, data) {
      var t1, t2;
      type$.List_int._as(data);
      if (J.get$length$asx(data) === 0)
        return;
      t1 = this._HttpClientRequest__profileData;
      if (t1 != null) {
        t2 = new Uint8Array(H._ensureNativeList(data));
        C.JSArray_methods.addAll$1(t1.requestBody, t2);
        P._getTraceClock();
      }
      this.super$_StreamSinkImpl$add(0, data);
    },
    get$headers: function(receiver) {
      return this.headers;
    }
  };
  H._HttpClientRequest.prototype = {
    _HttpClientRequest$7: function(outgoing, uri, method, _proxy, _httpClient, _httpClientConnection, _profileData) {
      var t3, t4, _this = this,
        t1 = _this._HttpClientRequest__profileData,
        t2 = t1 == null;
      if (!t2)
        t1.requestEvent$1("Request sent");
      t3 = _this.method;
      t3 = t3 === "GET" || t3 === "HEAD";
      t4 = _this.headers;
      if (t3)
        t4.set$contentLength(0);
      else
        t4.set$chunkedTransferEncoding(true);
      if (!t2)
        t1.finishRequest$1$request(_this);
      _this._responseCompleter.future.then$1$2$onError(new H._HttpClientRequest_closure(_this), new H._HttpClientRequest_closure0(), type$.Null);
    },
    get$done: function() {
      var _this = this,
        t1 = _this._response;
      if (t1 == null) {
        t1 = P.Future_wait(H.setRuntimeTypeInfo([_this._responseCompleter.future, H._StreamSinkImpl0.prototype.get$done.call(_this)], type$.JSArray_Future_dynamic), true, type$.dynamic).then$1$1(new H._HttpClientRequest_done_closure(), type$.HttpClientResponse);
        _this.set$_response(t1);
      }
      return t1;
    },
    close$0: function(_) {
      this.super$_StreamSinkImpl$close(0);
      return this.get$done();
    },
    get$connectionInfo: function() {
      return H._HttpConnectionInfo_create(this._httpClientConnection._socket);
    },
    _onIncoming$1: function(incoming) {
      var future, t3, _this = this,
        t1 = _this._httpClient,
        t2 = incoming.headers,
        response = new H._HttpClientResponse(t1, _this, H._HttpClientResponse__getCompressionState(t1, t2), _this._HttpClientRequest__profileData, incoming);
      incoming.uri = _this.uri;
      t1 = response.get$isRedirect();
      if (t1) {
        t1 = type$.dynamic;
        t2 = type$.HttpClientResponse;
        future = _this._responseRedirects.length < _this._maxRedirects ? response.drain$1$0(t1).then$1$1(new H._HttpClientRequest__onIncoming_closure(response), t2) : response.drain$1$0(t1).then$1$1(new H._HttpClientRequest__onIncoming_closure0(response), t2);
      } else {
        t1 = t2._headers;
        t2 = t1.$index(0, H._HttpHeaders__validateField("proxy-authenticate"));
        t3 = incoming.statusCode;
        t3.toString;
        if (t3 === 407 && t2 != null && J.get$length$asx(t2) === 1)
          future = response._authenticate$1(true);
        else {
          t1 = t1.$index(0, H._HttpHeaders__validateField("www-authenticate"));
          t2 = incoming.statusCode;
          t2.toString;
          future = t2 === 401 && t1 != null && J.get$length$asx(t1) === 1 ? response._authenticate$1(false) : P.Future_Future$value(response, type$.HttpClientResponse);
        }
      }
      future.then$1$2$onError(new H._HttpClientRequest__onIncoming_closure1(_this), new H._HttpClientRequest__onIncoming_closure2(_this), type$.Null);
    },
    _requestUri$0: function() {
      var _this = this,
        t1 = new H._HttpClientRequest__requestUri_uriStartingFromPath(_this);
      if (_this._proxy.isDirect)
        return t1.call$0();
      else if (_this.method === "CONNECT") {
        t1 = _this.uri;
        return t1.get$host(t1) + ":" + t1.get$port(t1);
      } else if (_this._httpClientConnection._proxyTunnel)
        return t1.call$0();
      else
        return _this.uri.removeFragment$0().toString$0(0);
    },
    add$1: function(_, data) {
      type$.List_int._as(data);
      if (J.get$length$asx(data) === 0 || false)
        return;
      this.super$_HttpOutboundMessage$add(0, data);
    },
    _writeHeader$0: function() {
      var buffer, headerBytes, t2, _this = this,
        t1 = H._CopyingBytesBuilder__pow2roundup(8192);
      t1 = new Uint8Array(t1);
      buffer = new H._CopyingBytesBuilder(t1);
      buffer.add$1(0, new H.CodeUnits(_this.method));
      buffer.addByte$1(32);
      buffer.add$1(0, new H.CodeUnits(_this._requestUri$0()));
      buffer.addByte$1(32);
      buffer.add$1(0, C.List_2Vk);
      buffer.addByte$1(13);
      buffer.addByte$1(10);
      t1 = _this.headers;
      t1._mutable = false;
      t1._build$1(buffer);
      buffer.addByte$1(13);
      buffer.addByte$1(10);
      headerBytes = buffer.takeBytes$0();
      t1 = _this._outgoing;
      t2 = headerBytes.length;
      t1.__http$_buffer = type$.List_int._as(headerBytes);
      t1.__http$_length = t2;
    },
    set$_response: function(_response) {
      this._response = type$.nullable_Future_HttpClientResponse._as(_response);
    },
    $isHttpClientRequest: 1
  };
  H._HttpClientRequest_closure.prototype = {
    call$1: function(response) {
      var t1, t2;
      type$.HttpClientResponse._as(response);
      t1 = this.$this._HttpClientRequest__profileData;
      t2 = t1 == null;
      if (!t2)
        t1.requestEvent$1("Waiting (TTFB)");
      if (!t2)
        t1.startResponse$1$response(response);
    },
    $signature: 35
  };
  H._HttpClientRequest_closure0.prototype = {
    call$1: function(e) {
    },
    $signature: 1
  };
  H._HttpClientRequest_done_closure.prototype = {
    call$1: function(list) {
      return type$.FutureOr_HttpClientResponse._as(J.$index$asx(type$.List_dynamic._as(list), 0));
    },
    $signature: 56
  };
  H._HttpClientRequest__onIncoming_closure.prototype = {
    call$1: function(_) {
      return this.response.redirect$0(0);
    },
    $signature: 16
  };
  H._HttpClientRequest__onIncoming_closure0.prototype = {
    call$1: function(_) {
      return P.Future_Future$error(new H.RedirectException("Redirect limit exceeded"), null, type$.HttpClientResponse);
    },
    $signature: 16
  };
  H._HttpClientRequest__onIncoming_closure1.prototype = {
    call$1: function(v) {
      var t1;
      type$.HttpClientResponse._as(v);
      t1 = this.$this._responseCompleter;
      if (t1.future._state === 0)
        t1.complete$1(0, v);
    },
    $signature: 35
  };
  H._HttpClientRequest__onIncoming_closure2.prototype = {
    call$2: function(e, s) {
      var t1 = this.$this._responseCompleter;
      if (t1.future._state === 0)
        t1.completeError$2(type$.Object._as(e), type$.nullable_StackTrace._as(s));
    },
    $signature: 4
  };
  H._HttpClientRequest__requestUri_uriStartingFromPath.prototype = {
    call$0: function() {
      var t1 = this.$this.uri,
        result = t1.get$path(t1);
      if (result.length === 0)
        result = "/";
      return t1.get$hasQuery() ? result + "?" + t1.get$query(t1) : result;
    },
    $signature: 2
  };
  H._HttpOutgoing.prototype = {
    writeHeaders$0: function() {
      var response, t1, contentLength, _this = this;
      if (_this.headersWritten)
        return null;
      _this.headersWritten = true;
      response = _this.outbound;
      t1 = response.headers;
      contentLength = t1._contentLength;
      if (t1._chunkedTransferEncoding)
        _this.chunked = true;
      else if (contentLength >= 0)
        _this.contentLength = contentLength;
      response._writeHeader$0();
      return null;
    },
    addStream$1: function(_, stream) {
      var controller, sub, _this = this;
      type$.Stream_List_int._as(stream);
      if (_this._socketError) {
        stream.listen$1(null).cancel$0(0);
        return P.Future_Future$value(_this.outbound, type$.dynamic);
      }
      controller = P.StreamController_StreamController(true, type$.List_int);
      sub = stream.listen$4$cancelOnError$onDone$onError(new H._HttpOutgoing_addStream_onData(_this, controller), true, controller.get$close(controller), controller.get$addError());
      controller.set$onPause(0, sub.get$pause(sub));
      controller.set$onResume(0, sub.get$resume(sub));
      if (!_this.headersWritten)
        _this.writeHeaders$0();
      return _this.socket.addStream$1(0, new P._ControllerStream(controller, H._instanceType(controller)._eval$1("_ControllerStream<1>"))).then$1$2$onError(new H._HttpOutgoing_addStream_closure(_this), new H._HttpOutgoing_addStream_closure0(_this), type$.dynamic);
    },
    close$0: function(_) {
      var t1, t2, t3, error, contentLength, _this = this,
        closeFuture = _this._closeFuture;
      if (closeFuture != null)
        return closeFuture;
      t1 = _this.outbound;
      t1.toString;
      if (_this._socketError)
        return P.Future_Future$value(t1, type$.dynamic);
      if (!_this.headersWritten && true) {
        t2 = t1.headers;
        t3 = t2._contentLength;
        if (t3 === -1) {
          t2.set$chunkedTransferEncoding(false);
          t2.set$contentLength(0);
        } else if (t3 > 0) {
          error = new H.HttpException("No content even though contentLength was specified to be greater than 0: " + t3 + ".", t1._uri);
          _this.__http$_doneCompleter.completeError$1(error);
          return _this._closeFuture = P.Future_Future$error(error, null, type$.dynamic);
        }
      }
      contentLength = _this.contentLength;
      if (contentLength != null) {
        t2 = _this._bytesWritten;
        if (t2 < contentLength) {
          error = new H.HttpException("Content size below specified contentLength.  " + t2 + " bytes written but expected " + H.S(contentLength) + ".", t1._uri);
          _this.__http$_doneCompleter.completeError$1(error);
          return _this._closeFuture = P.Future_Future$error(error, null, type$.dynamic);
        }
      }
      _this.writeHeaders$0();
      t1 = new H._HttpOutgoing_close_finalize(_this, t1).call$0();
      _this.set$_closeFuture(t1);
      return t1;
    },
    _addGZipChunk$2: function(chunk, add) {
      var t1, t2, t3, t4, currentLength, newLength, _this = this;
      type$.List_int._as(chunk);
      type$.void_Function_List_int._as(add);
      _this.outbound.toString;
      t1 = _this._gzipBuffer;
      t1.toString;
      t2 = J.getInterceptor$asx(chunk);
      t3 = t2.get$length(chunk);
      t4 = _this._gzipBufferLength;
      if (t3 > 8192 - t4) {
        add.call$1(H.NativeUint8List_NativeUint8List$view(t1.buffer, t1.byteOffset, t4));
        _this._gzipBuffer = new Uint8Array(8192);
        _this._gzipBufferLength = 0;
      }
      if (t2.get$length(chunk) > 8192)
        add.call$1(chunk);
      else {
        currentLength = _this._gzipBufferLength;
        newLength = currentLength + t2.get$length(chunk);
        t1 = _this._gzipBuffer;
        t1.toString;
        C.NativeUint8List_methods.setRange$3(t1, currentLength, newLength, chunk);
        _this._gzipBufferLength = newLength;
      }
    },
    _addChunk$2: function(chunk, add) {
      var t1, t2, t3, t4, t5, _this = this;
      type$.List_int._as(chunk);
      type$.void_Function_List_int._as(add);
      _this.outbound.toString;
      t1 = J.getInterceptor$asx(chunk);
      t2 = t1.get$length(chunk);
      t3 = _this.__http$_buffer;
      t4 = t3.length;
      t5 = _this.__http$_length;
      if (t2 > t4 - t5) {
        add.call$1(H.NativeUint8List_NativeUint8List$view(t3.buffer, t3.byteOffset, t5));
        _this.__http$_buffer = new Uint8Array(8192);
        _this.__http$_length = 0;
      }
      if (t1.get$length(chunk) > 8192)
        add.call$1(chunk);
      else {
        t2 = _this.__http$_buffer;
        t2.toString;
        t3 = _this.__http$_length;
        C.NativeUint8List_methods.setRange$3(t2, t3, t3 + t1.get$length(chunk), chunk);
        _this.__http$_length = _this.__http$_length + t1.get$length(chunk);
      }
    },
    _chunkHeader$1: function($length) {
      var size, len, size0, t1, footerAndHeader, index, t2;
      if ($length === 0) {
        if (this._pendingChunkedFooter === 2)
          return C.List_E7y;
        return C.List_yTu;
      }
      size = this._pendingChunkedFooter;
      for (len = $length, size0 = size; len > 0;) {
        ++size0;
        len = C.JSInt_methods._shrOtherPositive$1(len, 4);
      }
      t1 = size0 + 2;
      footerAndHeader = new Uint8Array(t1);
      if (size === 2) {
        footerAndHeader[0] = 13;
        footerAndHeader[1] = 10;
      }
      for (index = size0; index > size;) {
        --index;
        t2 = C.List_cGl[$length & 15];
        if (index >= t1)
          return H.ioore(footerAndHeader, index);
        footerAndHeader[index] = t2;
        $length = C.JSInt_methods._shrOtherPositive$1($length, 4);
      }
      if (size0 >= t1)
        return H.ioore(footerAndHeader, size0);
      footerAndHeader[size0] = 13;
      t2 = size0 + 1;
      if (t2 >= t1)
        return H.ioore(footerAndHeader, t2);
      footerAndHeader[t2] = 10;
      return footerAndHeader;
    },
    set$_closeFuture: function(_closeFuture) {
      this._closeFuture = type$.nullable_Future_dynamic._as(_closeFuture);
    },
    set$_gzipAdd: function(_gzipAdd) {
      this._gzipAdd = type$.nullable_void_Function_List_int._as(_gzipAdd);
    },
    $isStreamConsumer: 1
  };
  H._HttpOutgoing_addStream_onData.prototype = {
    call$1: function(data) {
      var t1, t2, t3, contentLength, _this = this;
      type$.List_int._as(data);
      t1 = _this.$this;
      if (t1._socketError)
        return;
      t2 = J.getInterceptor$asx(data);
      if (t2.get$length(data) === 0)
        return;
      if (t1.chunked) {
        if (t1._gzip) {
          t2 = _this.controller;
          t1.set$_gzipAdd(t2.get$add(t2));
          t2 = t1._gzipSink;
          t1._addGZipChunk$2(data, t2.get$add(t2));
          t1.set$_gzipAdd(null);
          return;
        }
        t3 = _this.controller;
        t1._addChunk$2(t1._chunkHeader$1(t2.get$length(data)), t3.get$add(t3));
        t1._pendingChunkedFooter = 2;
      } else {
        contentLength = t1.contentLength;
        if (contentLength != null) {
          t2 = t1._bytesWritten = t1._bytesWritten + t2.get$length(data);
          if (t2 > contentLength) {
            _this.controller.addError$1(new H.HttpException("Content size exceeds specified contentLength. " + t2 + " bytes written while expected " + H.S(contentLength) + ". [" + P.String_String$fromCharCodes(data, 0, null) + "]", null));
            return;
          }
        }
      }
      t2 = _this.controller;
      t1._addChunk$2(data, t2.get$add(t2));
    },
    $signature: 18
  };
  H._HttpOutgoing_addStream_closure.prototype = {
    call$1: function(_) {
      return this.$this.outbound;
    },
    $signature: 66
  };
  H._HttpOutgoing_addStream_closure0.prototype = {
    call$2: function(error, stackTrace) {
      var t1 = this.$this;
      if (t1._gzip)
        t1._gzipSink.close$0(0);
      t1._socketError = true;
      t1.__http$_doneCompleter.completeError$2(error, stackTrace);
      throw H.wrapException(error);
    },
    $signature: 68
  };
  H._HttpOutgoing_close_finalize.prototype = {
    call$0: function() {
      var t2, t3, t4,
        t1 = this.$this;
      if (t1.chunked) {
        if (t1._gzip) {
          t2 = t1.socket;
          t1.set$_gzipAdd(t2.get$add(t2));
          t2 = t1._gzipBufferLength;
          if (t2 > 0) {
            t3 = t1._gzipSink;
            t3.toString;
            t4 = t1._gzipBuffer;
            t2 = type$.List_int._as(H.NativeUint8List_NativeUint8List$view(t4.buffer, t4.byteOffset, t2));
            t3.addSlice$4(t2, 0, t2.length, false);
          }
          t1._gzipBuffer = null;
          t1._gzipSink.close$0(0);
          t1.set$_gzipAdd(null);
        }
        t2 = t1.socket;
        t1._addChunk$2(t1._chunkHeader$1(0), t2.get$add(t2));
      }
      t2 = t1.__http$_length;
      if (t2 > 0) {
        t3 = t1.__http$_buffer;
        t1.socket.add$1(0, H.NativeUint8List_NativeUint8List$view(t3.buffer, t3.byteOffset, t2));
      }
      t1.__http$_buffer = null;
      t2 = this.outbound;
      return t1.socket.flush$0(0).then$1$2$onError(new H._HttpOutgoing_close_finalize_closure(t1, t2), new H._HttpOutgoing_close_finalize_closure0(t1, t2), type$.dynamic);
    },
    $signature: 19
  };
  H._HttpOutgoing_close_finalize_closure.prototype = {
    call$1: function(_) {
      var t1 = this.$this;
      t1.__http$_doneCompleter.complete$1(0, t1.socket);
      return this.outbound;
    },
    $signature: 71
  };
  H._HttpOutgoing_close_finalize_closure0.prototype = {
    call$2: function(error, stackTrace) {
      this.$this.__http$_doneCompleter.completeError$2(error, stackTrace);
      throw H.wrapException(error);
    },
    $signature: 72
  };
  H._HttpClientConnection.prototype = {
    _HttpClientConnection$5: function(key, _socket, _httpClient, _proxyTunnel, _context) {
      var _this = this,
        t1 = _this._httpParser;
      t1.set$__http$_socketSubscription(type$.Stream_Uint8List._as(_this._socket).listen$3$onDone$onError(t1.get$__http$_onData(), t1.get$__http$_onDone(), t1._controller.get$addError()));
      _this._subscription = t1.listen$3$onDone$onError(new H._HttpClientConnection_closure(_this), new H._HttpClientConnection_closure0(_this), new H._HttpClientConnection_closure1(_this));
    },
    send$5: function(_, uri, port, method, proxy, profileData) {
      var t2, t3, request, host, t4, t5, _this = this,
        _s28_ = "HTTP headers are not mutable",
        t1 = {};
      if (_this.closed)
        throw H.wrapException(H.HttpException$("Socket closed before request was sent", uri));
      _this._currentUri = uri;
      _this._subscription.pause$0(0);
      if (method === "CONNECT")
        _this._httpParser.connectMethod = true;
      t1.creds = t1.proxyCreds = null;
      t2 = new P._Future($.Zone__current, type$._Future_Socket);
      t3 = _this._httpClient;
      request = H._HttpClientRequest$(new H._HttpOutgoing(new P._AsyncCompleter(t2, type$._AsyncCompleter_Socket), _this._socket), uri, method, proxy, t3, _this, profileData);
      host = uri.get$host(uri);
      if (H.stringContainsUnchecked(host, ":", 0))
        host = "[" + host + "]";
      t4 = request.headers;
      if (!t4._mutable)
        H.throwExpression(H.HttpException$(_s28_, null));
      t4._host = host;
      t4._updateHostHeader$0();
      if (!t4._mutable)
        H.throwExpression(H.HttpException$(_s28_, null));
      t4._port = port;
      t4._updateHostHeader$0();
      t4.add$2(0, "accept-encoding", "gzip");
      t4.add$2(0, "user-agent", t3.userAgent);
      t5 = proxy.username;
      if (t5 != null) {
        t5 = type$.Utf8Codec._eval$1("Codec.S")._as(t5 + ":" + H.S(proxy.password));
        t4.$set$2(0, "proxy-authorization", "Basic " + H._CryptoUtils_bytesToBase64(C.C_Utf8Codec.get$encoder().convert$1(t5)));
      } else if (!proxy.isDirect && t3._proxyCredentials.length > 0)
        t1.proxyCreds = t3._findProxyCredentials$1(proxy);
      uri.get$userInfo();
      t5 = uri.get$userInfo();
      if (t5.length !== 0) {
        t3 = type$.Utf8Codec._eval$1("Codec.S")._as(uri.get$userInfo());
        t4.$set$2(0, "authorization", "Basic " + H._CryptoUtils_bytesToBase64(C.C_Utf8Codec.get$encoder().convert$1(t3)));
      } else
        t1.creds = t3._findCredentials$1(uri);
      _this._httpParser._noMessageBody = H.valueOfNonNullableParamWithDefault(method === "HEAD", false, type$.bool);
      _this.set$_streamFuture(t2.then$1$1(new H._HttpClientConnection_send_closure(t1, _this, method, request, uri), type$.Socket));
      P.Future_Future$value(_this._streamFuture, type$.nullable_Socket).catchError$1(new H._HttpClientConnection_send_closure0(_this));
      return request;
    },
    destroy$0: function() {
      var _this = this;
      _this.closed = true;
      _this._httpClient._connectionClosed$1(_this);
      _this._socket.destroy$0();
    },
    close$0: function(_) {
      var _this = this;
      _this.closed = true;
      _this._httpClient._connectionClosed$1(_this);
      _this._streamFuture.timeout$1(0, C.Duration_15000000).then$1$1(new H._HttpClientConnection_close_closure(_this), type$.void);
    },
    createProxyTunnel$5: function(host, port, proxy, callback, profileData) {
      var uri, t1, t2, t3, t4, proxyProfileData, request;
      type$.bool_Function_X509Certificate._as(callback);
      uri = P._Uri__Uri(host, port);
      t1 = profileData == null;
      if (!t1) {
        t2 = type$.dynamic;
        t3 = P.LinkedHashMap_LinkedHashMap$_empty(type$.String, t2);
        t4 = proxy.host;
        if (t4 != null)
          t3.$indexSet(0, "host", t4);
        t4 = proxy.port;
        if (t4 != null)
          t3.$indexSet(0, "port", t4);
        t4 = proxy.username;
        if (t4 != null)
          t3.$indexSet(0, "username", t4);
        profileData.set$proxyDetails(t3);
        profileData._timeline.instant$2$arguments("Establishing proxy tunnel", P.LinkedHashMap_LinkedHashMap$_literal(["proxyDetails", profileData.proxyDetails], t2, t2));
        P._getTraceClock();
      }
      proxyProfileData = !t1 ? H.HttpProfiler_startRequest("CONNECT", uri, profileData) : null;
      request = this.send$5(0, P._Uri__Uri(host, port), port, "CONNECT", proxy, proxyProfileData);
      t1 = proxy.username;
      if (t1 != null) {
        t1 = type$.Utf8Codec._eval$1("Codec.S")._as(t1 + ":" + H.S(proxy.password));
        request.headers.$set$2(0, "proxy-authorization", "Basic " + H._CryptoUtils_bytesToBase64(C.C_Utf8Codec.get$encoder().convert$1(t1)));
      }
      return request.close$0(0).then$1$1(new H._HttpClientConnection_createProxyTunnel_closure(this, profileData, request, host, callback), type$.SecureSocket).then$1$1(new H._HttpClientConnection_createProxyTunnel_closure0(host, port, profileData, request), type$._HttpClientConnection);
    },
    stopTimer$0: function() {
      var t1 = this._idleTimer;
      if (t1 != null)
        t1.cancel$0(0);
      this._idleTimer = null;
    },
    startTimer$0: function() {
      this._idleTimer = P.Timer_Timer(C.Duration_15000000, new H._HttpClientConnection_startTimer_closure(this));
    },
    set$_nextResponseCompleter: function(_nextResponseCompleter) {
      this._nextResponseCompleter = type$.nullable_Completer__HttpIncoming._as(_nextResponseCompleter);
    },
    set$_streamFuture: function(_streamFuture) {
      this._streamFuture = type$.nullable_Future_Socket._as(_streamFuture);
    }
  };
  H._HttpClientConnection_closure.prototype = {
    call$1: function(incoming) {
      var t1, t2;
      type$._HttpIncoming._as(incoming);
      t1 = this.$this;
      t1._subscription.pause$0(0);
      t2 = t1._nextResponseCompleter;
      if (t2 == null)
        throw H.wrapException(H.HttpException$("Unexpected response (unsolicited response without request).", t1._currentUri));
      if (incoming.statusCode === 100)
        incoming.drain$1$0(type$.dynamic).then$1$1(new H._HttpClientConnection__closure(t1), type$.Null).catchError$1(new H._HttpClientConnection__closure0(t1));
      else {
        t2.complete$1(0, incoming);
        t1.set$_nextResponseCompleter(null);
      }
    },
    $signature: 74
  };
  H._HttpClientConnection__closure.prototype = {
    call$1: function(_) {
      this.$this._subscription.resume$0(0);
    },
    $signature: 1
  };
  H._HttpClientConnection__closure0.prototype = {
    call$2: function(error, stackTrace) {
      var t1, t2;
      type$.StackTrace._as(stackTrace);
      t1 = this.$this;
      t2 = t1._nextResponseCompleter;
      t2.toString;
      t2.completeError$2(new H.HttpException(H._asString(J.get$message$x(error)), t1._currentUri), stackTrace);
      t1.set$_nextResponseCompleter(null);
    },
    $signature: 15
  };
  H._HttpClientConnection_closure1.prototype = {
    call$2: function(error, stackTrace) {
      var t1, t2;
      type$.StackTrace._as(stackTrace);
      t1 = this.$this;
      t2 = t1._nextResponseCompleter;
      if (t2 != null)
        t2.completeError$2(new H.HttpException(H._asString(J.get$message$x(error)), t1._currentUri), stackTrace);
      t1.set$_nextResponseCompleter(null);
    },
    $signature: 15
  };
  H._HttpClientConnection_closure0.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._nextResponseCompleter;
      if (t2 != null)
        t2.completeError$1(new H.HttpException("Connection closed before response was received", t1._currentUri));
      t1.set$_nextResponseCompleter(null);
      t1.close$0(0);
    },
    $signature: 0
  };
  H._HttpClientConnection_send_closure.prototype = {
    call$1: function(s) {
      var t1, t2, t3, _this = this;
      type$.Socket._as(s);
      t1 = new P._Future($.Zone__current, type$._Future__HttpIncoming);
      t2 = _this.$this;
      t2.set$_nextResponseCompleter(new P._AsyncCompleter(t1, type$._AsyncCompleter__HttpIncoming));
      t3 = _this.request;
      t1.then$1$1(new H._HttpClientConnection_send__closure(_this._box_0, t2, _this.method, t3), type$.Null).catchError$2$test(new H._HttpClientConnection_send__closure0(_this.uri), new H._HttpClientConnection_send__closure1()).catchError$1(new H._HttpClientConnection_send__closure2(t2, t3));
      t2._subscription.resume$0(0);
      return s;
    },
    $signature: 36
  };
  H._HttpClientConnection_send__closure.prototype = {
    call$1: function(incoming) {
      var t1, t2;
      type$._HttpIncoming._as(incoming);
      t1 = this.$this;
      t1._currentUri = null;
      t2 = this.request;
      incoming._dataCompleter.future.then$1$1(new H._HttpClientConnection_send___closure(t1, incoming, this.method, t2), type$.Null);
      t2._onIncoming$1(incoming);
    },
    $signature: 89
  };
  H._HttpClientConnection_send___closure.prototype = {
    call$1: function(closing) {
      var t2, t3, _this = this,
        t1 = _this.incoming;
      if (t1.upgraded) {
        t1 = _this.$this;
        t1._httpClient._connectionClosed$1(t1);
        t1.startTimer$0();
        return;
      }
      t2 = _this.$this;
      if (!t2.closed)
        t3 = _this.method === "CONNECT" && t1.statusCode === 200;
      else
        t3 = true;
      if (t3)
        return;
      if (!H._asBool(closing) && !t2._dispose && t1.headers._persistentConnection && _this.request.headers._persistentConnection) {
        t1 = t2._httpClient._connectionTargets.$index(0, t2.key);
        t1._active.remove$1(0, t2);
        t1._idle.add$1(0, t2);
        t2.startTimer$0();
        t1._checkPending$0();
        t2._subscription.resume$0(0);
      } else
        t2.destroy$0();
    },
    $signature: 1
  };
  H._HttpClientConnection_send__closure0.prototype = {
    call$1: function(error) {
      throw H.wrapException(H.HttpException$("Connection closed before data was received", this.uri));
    },
    $signature: 5
  };
  H._HttpClientConnection_send__closure1.prototype = {
    call$1: function(error) {
      return type$.Object._as(error) instanceof P.StateError;
    },
    $signature: 93
  };
  H._HttpClientConnection_send__closure2.prototype = {
    call$2: function(error, stackTrace) {
      var t1;
      this.$this.destroy$0();
      type$.StackTrace._as(stackTrace);
      t1 = this.request._responseCompleter;
      if (t1.future._state === 0)
        t1.completeError$2(type$.Object._as(error), stackTrace);
    },
    $signature: 4
  };
  H._HttpClientConnection_send_closure0.prototype = {
    call$1: function(e) {
      this.$this.destroy$0();
    },
    $signature: 1
  };
  H._HttpClientConnection_close_closure.prototype = {
    call$1: function(_) {
      type$.Socket._as(_);
      return this.$this._socket.destroy$0();
    },
    $signature: 37
  };
  H._HttpClientConnection_createProxyTunnel_closure.prototype = {
    call$1: function(response) {
      var t1, t2, error, _this = this;
      type$.HttpClientResponse._as(response);
      t1 = response._incoming;
      t2 = t1.statusCode;
      t2.toString;
      if (t2 !== 200) {
        t2 = "Proxy failed to establish tunnel (" + t2 + " ";
        t1 = t1.reasonPhrase;
        t1.toString;
        error = t2 + t1 + ")";
        t1 = _this.profileData;
        if (t1 != null)
          t1.requestEvent$1(error);
        throw H.wrapException(H.HttpException$(error, _this.request.uri));
      }
      return P.SecureSocket_secure(response._httpRequest._httpClientConnection._socket, _this.$this._context, _this.host, _this.callback);
    },
    $signature: 38
  };
  H._HttpClientConnection_createProxyTunnel_closure0.prototype = {
    call$1: function(secureSocket) {
      var key, t1, _this = this;
      type$.SecureSocket._as(secureSocket);
      key = "ssh:" + _this.host + ":" + _this.port;
      t1 = _this.profileData;
      if (t1 != null)
        t1.requestEvent$1("Proxy tunnel established");
      return H._HttpClientConnection$(key, secureSocket, _this.request._httpClient, true, null);
    },
    $signature: 39
  };
  H._HttpClientConnection_startTimer_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._idleTimer = null;
      t1.close$0(0);
    },
    $signature: 0
  };
  H._ConnectionInfo.prototype = {};
  H._ConnectionTarget.prototype = {
    get$isEmpty: function(_) {
      return this._idle._collection$_length === 0 && this._active._collection$_length === 0 && this._connecting === 0;
    },
    _checkPending$0: function() {
      var t2, t3, result,
        t1 = this._pending;
      if (!t1.get$isEmpty(t1)) {
        t2 = t1._head;
        if (t2 === t1._tail)
          H.throwExpression(H.IterableElementError_noElement());
        ++t1._modificationCount;
        t3 = t1._table;
        if (t2 >= t3.length)
          return H.ioore(t3, t2);
        result = t1.$ti._precomputed1._as(t3[t2]);
        C.JSArray_methods.$indexSet(t3, t2, null);
        t1._head = (t1._head + 1 & t1._table.length - 1) >>> 0;
        result.call$0();
      }
    },
    connectionClosed$1: function(connection) {
      this._active.remove$1(0, connection);
      this._idle.remove$1(0, connection);
      this._checkPending$0();
    },
    connect$5: function(uriHost, uriPort, proxy, client, profileData) {
      var it, connection, t2, t3, t4, connectionTask, _this = this,
        t1 = _this._idle;
      if (t1._collection$_length !== 0) {
        it = t1.get$iterator(t1);
        if (!it.moveNext$0())
          H.throwExpression(H.IterableElementError_noElement());
        connection = it.get$current(it);
        t1.remove$1(0, connection);
        connection.stopTimer$0();
        _this._active.add$1(0, connection);
        return P.Future_Future$value(new H._ConnectionInfo(connection, proxy), type$._ConnectionInfo);
      }
      t1 = new H._ConnectionTarget_connect_callback(null, uriHost, uriPort);
      t2 = _this.isSecure && proxy.isDirect;
      t3 = _this.host;
      t4 = _this.port;
      connectionTask = t2 ? P.SecureSocket_startConnect(t3, t4, _this.context, t1) : P.Socket_startConnect(t3, t4);
      ++_this._connecting;
      return connectionTask.then$1$2$onError(new H._ConnectionTarget_connect_closure(_this, client, proxy, uriHost, uriPort, t1, profileData), new H._ConnectionTarget_connect_closure0(_this), type$._ConnectionInfo);
    }
  };
  H._ConnectionTarget_connect_callback.prototype = {
    call$1: function(certificate) {
      return false;
    },
    $signature: 21
  };
  H._ConnectionTarget_connect_closure.prototype = {
    call$1: function(task) {
      var socketFuture, _this = this,
        t1 = _this.$this;
      t1._socketTasks.add$1(0, task);
      socketFuture = task.get$socket();
      return socketFuture.then$1$2$onError(new H._ConnectionTarget_connect__closure(t1, _this.client, _this.proxy, _this.uriHost, _this.uriPort, _this.callback, _this.profileData, task), new H._ConnectionTarget_connect__closure0(t1, null, task), type$._ConnectionInfo);
    },
    $signature: 41
  };
  H._ConnectionTarget_connect__closure.prototype = {
    call$1: function(socket) {
      var t2, connection, t3, t4, t5, t6, _this = this,
        t1 = _this.$this;
      --t1._connecting;
      socket.setOption$2(C.C_SocketOption, true);
      t2 = _this.client;
      connection = H._HttpClientConnection$(t1.key, socket, t2, false, t1.context);
      t3 = t1.isSecure && !_this.proxy.isDirect;
      t4 = _this.task;
      t5 = _this.proxy;
      if (t3) {
        connection._dispose = true;
        t3 = _this.uriHost;
        t6 = _this.uriPort;
        return connection.createProxyTunnel$5(t3, t6, t5, _this.callback, _this.profileData).then$1$1(new H._ConnectionTarget_connect___closure(t1, t2, t3, t6, t4, t5), type$._ConnectionInfo);
      } else {
        t1._active.add$1(0, connection);
        t1._socketTasks.remove$1(0, t4);
        return new H._ConnectionInfo(connection, t5);
      }
    },
    $signature: 42
  };
  H._ConnectionTarget_connect___closure.prototype = {
    call$1: function(tunnel) {
      var _this = this;
      type$._HttpClientConnection._as(tunnel);
      _this.client._getConnectionTarget$3(_this.uriHost, _this.uriPort, true)._active.add$1(0, tunnel);
      _this.$this._socketTasks.remove$1(0, _this.task);
      return new H._ConnectionInfo(tunnel, _this.proxy);
    },
    $signature: 43
  };
  H._ConnectionTarget_connect__closure0.prototype = {
    call$1: function(error) {
      var t2,
        t1 = this.$this;
      --t1._connecting;
      t2 = this.task;
      t1._socketTasks.remove$1(0, t2);
      t2.cancel$0(0);
      t1 = P.SocketException$("HTTP connection timed out after " + H.S(this.connectionTimeout) + ", host: " + t1.host + ", port: " + t1.port);
      throw H.wrapException(t1);
    },
    $signature: 5
  };
  H._ConnectionTarget_connect_closure0.prototype = {
    call$1: function(error) {
      --this.$this._connecting;
      throw H.wrapException(error);
    },
    $signature: 5
  };
  H._HttpClient.prototype = {
    _openUrl$2: function(method, uri) {
      var findProxy, error, stackTrace, isSecure, port, t2, proxyConf, t3, exception, t1 = {};
      t1.uri = uri;
      uri = t1.uri = uri.removeFragment$0();
      if (method !== "CONNECT")
        if (uri.get$host(uri).length === 0)
          throw H.wrapException(P.ArgumentError$("No host specified in URI " + uri.toString$0(0)));
        else if (uri.get$scheme() !== "http" && uri.get$scheme() !== "https")
          throw H.wrapException(P.ArgumentError$("Unsupported scheme '" + uri.get$scheme() + "' in URI " + uri.toString$0(0)));
      isSecure = uri.isScheme$1("https");
      if (!isSecure && !P.isInsecureConnectionAllowed(uri.get$host(uri)))
        throw H.wrapException(P.StateError$("Insecure HTTP is not allowed by platform: " + uri.toString$0(0)));
      port = t1.port = uri.get$port(uri);
      if (port === 0)
        t2 = t1.port = isSecure ? 443 : 80;
      else
        t2 = port;
      t1.proxyConf = C._ProxyConfiguration_8Zd;
      findProxy = H._http_HttpClient_findProxyFromEnvironment$closure();
      if (findProxy != null)
        try {
          proxyConf = H._ProxyConfiguration$(H._asString(findProxy.call$1(uri)));
          t1.proxyConf = proxyConf;
          t3 = proxyConf;
        } catch (exception) {
          error = H.unwrapException(exception);
          stackTrace = H.getTraceFromException(exception);
          t1 = P.Future_Future$error(error, stackTrace, type$._HttpClientRequest);
          return t1;
        }
      else
        t3 = C._ProxyConfiguration_8Zd;
      t1.profileData = null;
      return this._getConnection$5(uri.get$host(uri), t2, t3, isSecure, null).then$1$2$onError(new H._HttpClient__openUrl_closure(t1, this, method, isSecure), new H._HttpClient__openUrl_closure0(t1), type$._HttpClientRequest);
    },
    _openUrlFromRequest$3: function(method, uri, previous) {
      return this._openUrl$2(H._asString(method), previous.uri.resolveUri$1(type$.Uri._as(uri))).then$1$1(new H._HttpClient__openUrlFromRequest_closure(previous), type$._HttpClientRequest);
    },
    _connectionClosed$1: function(connection) {
      var t1, t2, connectionTarget;
      connection.stopTimer$0();
      t1 = this._connectionTargets;
      t2 = connection.key;
      connectionTarget = t1.$index(0, t2);
      if (connectionTarget != null) {
        connectionTarget.connectionClosed$1(connection);
        if (connectionTarget.get$isEmpty(connectionTarget))
          t1.remove$1(0, t2);
      }
    },
    _getConnectionTarget$3: function(host, port, isSecure) {
      var key = isSecure ? "ssh:" + host + ":" + port : host + ":" + port;
      return this._connectionTargets.putIfAbsent$2(0, key, new H._HttpClient__getConnectionTarget_closure(this, key, host, port, isSecure));
    },
    _getConnection$5: function(uriHost, uriPort, proxyConf, isSecure, profileData) {
      var t1 = proxyConf.proxies;
      return new H._HttpClient__getConnection_connect(this, new J.ArrayIterator(t1, t1.length, H._arrayInstanceType(t1)._eval$1("ArrayIterator<1>")), uriHost, uriPort, isSecure, profileData).call$1(new H.HttpException("No proxies given", null));
    },
    _findCredentials$2: function(url, scheme) {
      return C.JSArray_methods.fold$1$2(this._credentials, null, new H._HttpClient__findCredentials_closure(url, scheme), type$.nullable__SiteCredentials);
    },
    _findCredentials$1: function(url) {
      return this._findCredentials$2(url, null);
    },
    _findProxyCredentials$2: function(proxy, scheme) {
      var t1, t2, _i, current;
      for (t1 = this._proxyCredentials, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        current = t1[_i];
        if (current.applies$2(proxy, scheme))
          return current;
      }
      return null;
    },
    _findProxyCredentials$1: function(proxy) {
      return this._findProxyCredentials$2(proxy, null);
    }
  };
  H._HttpClient__openUrl_closure.prototype = {
    call$1: function(info) {
      var t1, t2, t3, _this = this;
      type$._ConnectionInfo._as(info);
      t1 = _this._box_0;
      t2 = new H._HttpClient__openUrl_closure_send(t1, _this.method);
      if (info.connection.closed) {
        t3 = t1.uri;
        return _this.$this._getConnection$5(t3.get$host(t3), t1.port, t1.proxyConf, _this.isSecure, t1.profileData).then$1$1(t2, type$._HttpClientRequest);
      }
      return t2.call$1(info);
    },
    $signature: 44
  };
  H._HttpClient__openUrl_closure_send.prototype = {
    call$1: function(info) {
      var t1, t2;
      type$._ConnectionInfo._as(info);
      t1 = this._box_0;
      t2 = t1.profileData;
      if (t2 != null)
        t2.requestEvent$1("Connection established");
      return info.connection.send$5(0, t1.uri, t1.port, this.method.toUpperCase(), info.proxy, t1.profileData);
    },
    $signature: 45
  };
  H._HttpClient__openUrl_closure0.prototype = {
    call$1: function(error) {
      var t2, t3,
        t1 = this._box_0.profileData;
      if (t1 != null) {
        t2 = J.toString$0$(error);
        t1.requestInProgress = false;
        t3 = P._getTraceClock();
        if (t1.___HttpProfileData_requestEndTimestamp == null)
          t1.___HttpProfileData_requestEndTimestamp = t3;
        else
          H.throwExpression(H.LateError$fieldAI("requestEndTimestamp"));
        t1.requestError = t2;
        t3 = type$.dynamic;
        t1._timeline.finish$1$arguments(0, P.LinkedHashMap_LinkedHashMap$_literal(["error", t2], t3, t3));
        P._getTraceClock();
      }
      throw H.wrapException(error);
    },
    $signature: 5
  };
  H._HttpClient__openUrlFromRequest_closure.prototype = {
    call$1: function(request) {
      var t1, t2, t3, t4, t5, t6, t7;
      type$._HttpClientRequest._as(request);
      if (request._outgoing.headersWritten)
        H.throwExpression(P.StateError$("Request already sent"));
      request._followRedirects = true;
      t1 = this.previous;
      t2 = t1._maxRedirects;
      request._maxRedirects = t2;
      for (t1 = t1.headers._headers, t2 = new P._HashMapKeyIterable(t1, H._instanceType(t1)._eval$1("_HashMapKeyIterable<1>")), t2 = t2.get$iterator(t2), t3 = request.headers, t4 = t3._headers, t5 = t2.$ti._precomputed1; t2.moveNext$0();) {
        t6 = t5._as(t2._collection$_current);
        if (t4.$index(0, H._HttpHeaders__validateField(t6)) == null) {
          t7 = t1.$index(0, H._HttpHeaders__validateField(t6));
          t7.toString;
          t3.$set$2(0, t6, t7);
        }
      }
      t3.set$chunkedTransferEncoding(false);
      t3.set$contentLength(0);
      return request;
    },
    $signature: 46
  };
  H._HttpClient__getConnectionTarget_closure.prototype = {
    call$0: function() {
      var _this = this,
        t1 = type$._HttpClientConnection;
      return new H._ConnectionTarget(_this.key, _this.host, _this.port, _this.isSecure, _this.$this._context, P.HashSet_HashSet(t1), P.HashSet_HashSet(t1), P.HashSet_HashSet(type$.ConnectionTask_dynamic), new P.ListQueue(P.List_List$filled(P.ListQueue__calculateCapacity(null), null, false, type$.dynamic), type$.ListQueue_dynamic));
    },
    $signature: 47
  };
  H._HttpClient__getConnection_connect.prototype = {
    call$1: function(error) {
      var proxy, host, t2, port, _this = this,
        t1 = _this.proxies;
      if (!t1.moveNext$0())
        return P.Future_Future$error(type$.Object._as(error), null, type$._ConnectionInfo);
      proxy = t1.$ti._precomputed1._as(t1.__interceptors$_current);
      t1 = proxy.isDirect;
      if (t1)
        host = _this.uriHost;
      else {
        t2 = proxy.host;
        t2.toString;
        host = t2;
      }
      if (t1)
        port = _this.uriPort;
      else {
        t1 = proxy.port;
        t1.toString;
        port = t1;
      }
      t1 = _this.$this;
      return t1._getConnectionTarget$3(host, port, _this.isSecure).connect$5(_this.uriHost, _this.uriPort, proxy, t1, _this.profileData).catchError$1(_this);
    },
    $signature: 48
  };
  H._HttpClient__findCredentials_closure.prototype = {
    call$2: function(prev, value) {
      type$.nullable__SiteCredentials._as(prev);
      type$._Credentials._as(value);
      if (value.applies$2(this.url, this.scheme))
        return value;
      else
        return prev;
    },
    $signature: 49
  };
  H._HttpClient__findProxyFromEnvironment_checkNoProxy.prototype = {
    call$1: function(option) {
      var t1, t2, names, $name, t3;
      if (option == null)
        return null;
      t1 = type$.MappedListIterable_String_String;
      t2 = new H.MappedListIterable(H.setRuntimeTypeInfo(option.split(","), type$.JSArray_String), type$.String_Function_String._as(new H._HttpClient__findProxyFromEnvironment_checkNoProxy_closure()), t1);
      names = new H.ListIterator(t2, t2.get$length(t2), t1._eval$1("ListIterator<ListIterable.E>"));
      for (t1 = t1._eval$1("ListIterable.E"), t2 = this.url; names.moveNext$0();) {
        $name = t1._as(names.__internal$_current);
        if (!(C.JSString_methods.startsWith$1($name, "[") && C.JSString_methods.endsWith$1($name, "]") && "[" + t2.get$host(t2) + "]" === $name))
          t3 = $name.length !== 0 && C.JSString_methods.endsWith$1(t2.get$host(t2), $name);
        else
          t3 = true;
        if (t3)
          return "DIRECT";
      }
      return null;
    },
    $signature: 22
  };
  H._HttpClient__findProxyFromEnvironment_checkNoProxy_closure.prototype = {
    call$1: function(s) {
      return C.JSString_methods.trim$0(H._asString(s));
    },
    $signature: 51
  };
  H._HttpClient__findProxyFromEnvironment_checkProxy.prototype = {
    call$1: function(option) {
      var pos;
      if (option == null)
        return null;
      option = C.JSString_methods.trim$0(option);
      if (option.length === 0)
        return null;
      pos = C.JSString_methods.indexOf$1(option, "://");
      if (pos >= 0)
        option = C.JSString_methods.substring$1(option, pos + 3);
      pos = C.JSString_methods.indexOf$1(option, "/");
      if (pos >= 0)
        option = C.JSString_methods.substring$2(option, 0, pos);
      if (C.JSString_methods.indexOf$1(option, "[") === 0) {
        pos = C.JSString_methods.lastIndexOf$1(option, ":");
        if (C.JSString_methods.indexOf$1(option, "]") > pos)
          option += ":1080";
      } else if (C.JSString_methods.indexOf$1(option, ":") === -1)
        option += ":1080";
      return "PROXY " + option;
    },
    $signature: 22
  };
  H._ProxyConfiguration.prototype = {
    _ProxyConfiguration$1: function(configuration) {
      C.JSArray_methods.forEach$1(H.setRuntimeTypeInfo(configuration.split(";"), type$.JSArray_String), new H._ProxyConfiguration_closure(this, configuration));
    }
  };
  H._ProxyConfiguration_closure.prototype = {
    call$1: function(proxy) {
      var portString, port, at, userinfo, colon, username, password, host, exception, _this = this, _null = null,
        _s28_ = "Invalid proxy configuration ";
      proxy = C.JSString_methods.trim$0(H._asString(proxy));
      if (proxy.length !== 0)
        if (C.JSString_methods.startsWith$1(proxy, "PROXY ")) {
          proxy = C.JSString_methods.trim$0(C.JSString_methods.substring$1(proxy, 6));
          at = C.JSString_methods.indexOf$1(proxy, "@");
          if (at !== -1) {
            userinfo = C.JSString_methods.trim$0(C.JSString_methods.substring$2(proxy, 0, at));
            proxy = C.JSString_methods.trim$0(C.JSString_methods.substring$1(proxy, at + 1));
            colon = C.JSString_methods.indexOf$1(userinfo, ":");
            if (colon === -1 || colon === 0 || colon === proxy.length - 1)
              throw H.wrapException(H.HttpException$(_s28_ + _this.configuration, _null));
            username = C.JSString_methods.trim$0(C.JSString_methods.substring$2(userinfo, 0, colon));
            password = C.JSString_methods.trim$0(C.JSString_methods.substring$1(userinfo, colon + 1));
          } else {
            password = _null;
            username = password;
          }
          colon = C.JSString_methods.lastIndexOf$1(proxy, ":");
          if (colon === -1 || colon === 0 || colon === proxy.length - 1)
            throw H.wrapException(H.HttpException$(_s28_ + _this.configuration, _null));
          host = C.JSString_methods.trim$0(C.JSString_methods.substring$2(proxy, 0, colon));
          if (C.JSString_methods.startsWith$1(host, "[") && C.JSString_methods.endsWith$1(host, "]"))
            host = C.JSString_methods.substring$2(host, 1, host.length - 1);
          portString = C.JSString_methods.trim$0(C.JSString_methods.substring$1(proxy, colon + 1));
          port = null;
          try {
            port = P.int_parse(portString, _null);
          } catch (exception) {
            if (H.unwrapException(exception) instanceof P.FormatException)
              throw H.wrapException(H.HttpException$(_s28_ + _this.configuration + ", invalid port '" + H.S(portString) + "'", _null));
            else
              throw exception;
          }
          C.JSArray_methods.add$1(_this.$this.proxies, new H._Proxy(host, port, username, password, false));
        } else if (C.JSString_methods.trim$0(proxy) === "DIRECT")
          C.JSArray_methods.add$1(_this.$this.proxies, new H._Proxy(_null, _null, _null, _null, true));
        else
          throw H.wrapException(H.HttpException$(_s28_ + _this.configuration, _null));
    },
    $signature: 34
  };
  H._Proxy.prototype = {};
  H._HttpConnectionInfo.prototype = {};
  H._AuthenticationScheme.prototype = {
    toString$0: function(_) {
      if (this === C.C__AuthenticationScheme)
        return "Basic";
      if (this === C.C__AuthenticationScheme0)
        return "Digest";
      return "Unknown";
    }
  };
  H._RedirectInfo.prototype = {$isRedirectInfo: 1};
  H._HttpParser.prototype = {
    _HttpParser$_$1: function(_requestParser) {
      var _this = this,
        t1 = _this._controller;
      t1.set$onListen(new H._HttpParser$__closure(_this));
      t1.set$onPause(0, new H._HttpParser$__closure0(_this));
      t1.set$onResume(0, new H._HttpParser$__closure1(_this));
      t1.set$onCancel(0, new H._HttpParser$__closure2(_this));
      _this._reset$0();
    },
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = this._controller;
      return new P._ControllerStream(t1, H._instanceType(t1)._eval$1("_ControllerStream<1>")).listen$4$cancelOnError$onDone$onError(type$.nullable_void_Function__HttpIncoming._as(onData), cancelOnError, type$.nullable_void_Function._as(onDone), onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$3$cancelOnError$onDone: function(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$2$cancelOnError: function(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    },
    _parse$0: function() {
      var e, s, exception, t1, _this = this;
      try {
        _this._doParse$0();
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = _this.__http$_state;
        if (t1 >= 17 && t1 <= 24) {
          _this.__http$_state = 27;
          _this._reportBodyError$2(e, s);
        } else {
          _this.__http$_state = 27;
          _this._reportHttpError$2(e, s);
        }
      }
    },
    _headersEnd$0: function() {
      var t2, incoming, _this = this,
        t1 = _this._headers;
      t1.toString;
      t2 = _this._statusCode;
      t2 = t2 >= 200 && t2 < 300 && _this.connectMethod;
      if (t2) {
        _this._transferLength = -1;
        t1.set$chunkedTransferEncoding(false);
        _this._chunked = false;
        t1.removeAll$1("content-length");
        t1.removeAll$1("transfer-encoding");
      }
      t1._mutable = false;
      t1 = t1._contentLength;
      _this._transferLength = t1;
      t2 = _this._chunked;
      if (t2) {
        _this._transferLength = -1;
        t1 = -1;
      }
      if (_this._messageType === 1 && t1 < 0 && !t2) {
        _this._transferLength = 0;
        t1 = 0;
      }
      if (_this._connectionUpgrade) {
        _this.__http$_state = 26;
        t1 = _this._transferLength = 0;
      }
      incoming = _this._createIncoming$1(t1);
      incoming.statusCode = _this._statusCode;
      t1 = _this._uriOrReasonPhrase;
      incoming.reasonPhrase = P.String_String$fromCharCodes(t1, 0, null);
      C.JSArray_methods.set$length(_this.__http$_method, 0);
      C.JSArray_methods.set$length(t1, 0);
      if (_this._connectionUpgrade) {
        incoming.upgraded = true;
        _this._parserCalled = false;
        _this._closeIncoming$0();
        _this._controller.add$1(0, incoming);
        return true;
      }
      t1 = _this._transferLength;
      if (t1 !== 0)
        t2 = _this._messageType === 0 && _this._noMessageBody;
      else
        t2 = true;
      if (t2) {
        _this._reset$0();
        _this._closeIncoming$0();
        _this._controller.add$1(0, incoming);
        return false;
      } else if (_this._chunked) {
        _this.__http$_state = 19;
        _this._remainingContent = 0;
      } else if (t1 > 0) {
        _this._remainingContent = t1;
        _this.__http$_state = 24;
      } else
        _this.__http$_state = 24;
      _this._parserCalled = false;
      _this._controller.add$1(0, incoming);
      return true;
    },
    _doParse$0: function() {
      var t1, t2, t3, t4, t5, t6, index, byte, i, t7, headerField, headerValue, tokens, isResponse, isUpgradeCode, isUpgrade, t8, buffer, dataAvailable, data, lastEvent, _this = this, _null = null,
        _s22_ = "Invalid request method",
        _s21_ = "Invalid response line",
        _s22_0 = "Failed to parse HTTP, ",
        _s16_ = " does not match ",
        _s79_ = "Both Content-Length and Transfer-Encoding are specified, at most one is allowed",
        _s18_ = " does not match 10",
        _s18_0 = " does not match 13";
      _this._parserCalled = true;
      t1 = _this.__http$_state;
      if (t1 === 25)
        throw H.wrapException(H.HttpException$("Data on closed connection", _null));
      if (t1 === 27)
        throw H.wrapException(H.HttpException$("Data on failed connection", _null));
      t1 = type$.List_int;
      t2 = _this._headerField;
      t3 = _this._headerValue;
      t4 = _this._uriOrReasonPhrase;
      t5 = _this.__http$_method;
      while (true) {
        if (!false)
          break;
        t6 = _this._incoming == null;
        if (!(!t6 && _this._bodyPaused))
          t6 = t6 && _this._paused;
        else
          t6 = true;
        if (t6) {
          _this._parserCalled = false;
          return;
        }
        index = _this.__http$_index;
        byte = _this.__http$_buffer.$index(0, index);
        t6 = index + 1;
        _this.__http$_index = t6;
        switch (_this.__http$_state) {
          case 0:
            if (!(byte.$gt(0, 31) && byte.$lt(0, 128) && !C.JSArray_methods.$index(C.List_NUU, byte)))
              throw H.wrapException(H.HttpException$(_s22_, _null));
            t1._as(t5);
            if (++_this._headersReceivedSize < 1048576)
              C.JSArray_methods.add$1(t5, byte);
            else
              _this._reportSizeLimitError$0();
            t6 = H.HttpException$(_s21_, _null);
            throw H.wrapException(t6);
          case 1:
            t6 = _this._httpVersionIndex;
            t6.toString;
            for (i = 0; i < t6; ++i) {
              if (i >= 4)
                return H.ioore(C.List_72_84_84_80, i);
              t7 = C.List_72_84_84_80[i];
              t1._as(t5);
              if (++_this._headersReceivedSize < 1048576)
                C.JSArray_methods.add$1(t5, t7);
              else
                _this._reportSizeLimitError$0();
            }
            t1._as(t5);
            t6 = ++_this._headersReceivedSize;
            if (t6 < 1048576)
              C.JSArray_methods.add$1(t5, byte);
            else
              _this._reportSizeLimitError$0();
            _this._httpVersion = 0;
            t6 = H.HttpException$(_s21_, _null);
            throw H.wrapException(t6);
          case 2:
            t6 = _this._httpVersionIndex;
            t6.toString;
            if (t6 < 7) {
              t7 = C.List_E7y0[t6];
              H.throwExpression(H.HttpException$(_s22_0 + H.S(byte) + _s16_ + t7, _null));
              _this._httpVersionIndex = t6 + 1;
            } else if (t6 === 8) {
              H.throwExpression(H.HttpException$(_s22_0 + H.S(byte) + " does not match 32", _null));
              _this.__http$_state = 7;
            } else
              throw H.wrapException(H.HttpException$("Invalid response line, failed to parse HTTP version", _null));
            break;
          case 3:
            if (!C.JSArray_methods.$index(C.List_NUU, byte))
              t6 = false;
            else
              t6 = true;
            if (t6)
              throw H.wrapException(H.HttpException$(_s22_, _null));
            t1._as(t5);
            if (++_this._headersReceivedSize < 1048576)
              C.JSArray_methods.add$1(t5, byte);
            else
              _this._reportSizeLimitError$0();
            break;
          case 4:
            t1._as(t4);
            if (++_this._headersReceivedSize < 1048576)
              C.JSArray_methods.add$1(t4, byte);
            else
              _this._reportSizeLimitError$0();
            break;
          case 5:
            t6 = _this._httpVersionIndex;
            t6.toString;
            if (t6 < 7) {
              t7 = C.List_2Vk[t6];
              H.throwExpression(H.HttpException$(_s22_0 + H.S(byte) + _s16_ + t7, _null));
              _this._httpVersionIndex = t6 + 1;
            } else if (t6 === 7) {
              t6 = H.HttpException$("Invalid response, invalid HTTP version", _null);
              throw H.wrapException(t6);
            }
            break;
          case 6:
            H.throwExpression(H.HttpException$(_s22_0 + H.S(byte) + _s18_, _null));
            _this._messageType = 1;
            _this.__http$_state = 10;
            break;
          case 7:
            ++_this._statusCodeLength;
            if (byte.$lt(0, 48) || byte.$gt(0, 57))
              throw H.wrapException(H.HttpException$("Invalid response status code with " + H.S(byte), _null));
            else if (_this._statusCodeLength > 3)
              throw H.wrapException(H.HttpException$("Invalid response, status code is over 3 digits", _null));
            else
              _this._statusCode = C.JSInt_methods.$add(_this._statusCode * 10, byte) - 48;
            break;
          case 8:
            t1._as(t4);
            t6 = ++_this._headersReceivedSize;
            if (t6 < 1048576)
              C.JSArray_methods.add$1(t4, byte);
            else
              _this._reportSizeLimitError$0();
            break;
          case 9:
            H.throwExpression(H.HttpException$(_s22_0 + H.S(byte) + _s18_, _null));
            t6 = _this._statusCode;
            if (t6 <= 199 || t6 === 204 || t6 === 304)
              _this._noMessageBody = true;
            _this.__http$_state = 10;
            break;
          case 10:
            t6 = _this.get$version(_this);
            t6.toString;
            _this._headers = H._HttpHeaders$(t6, 80, _null);
            t6 = (byte.$sub(0, 65) & 127) < 26 ? byte.$or(0, 32) : byte;
            t1._as(t2);
            if (++_this._headersReceivedSize < 1048576)
              C.JSArray_methods.add$1(t2, t6);
            else
              _this._reportSizeLimitError$0();
            _this.__http$_state = 11;
            break;
          case 11:
            if (!(byte.$gt(0, 31) && byte.$lt(0, 128) && !C.JSArray_methods.$index(C.List_NUU, byte)))
              throw H.wrapException(H.HttpException$("Invalid header field name, with " + H.S(byte), _null));
            t6 = (byte.$sub(0, 65) & 127) < 26 ? byte.$or(0, 32) : byte;
            t1._as(t2);
            if (++_this._headersReceivedSize < 1048576)
              C.JSArray_methods.add$1(t2, t6);
            else
              _this._reportSizeLimitError$0();
            break;
          case 12:
            t1._as(t3);
            t6 = ++_this._headersReceivedSize;
            if (t6 < 1048576)
              C.JSArray_methods.add$1(t3, byte);
            else
              _this._reportSizeLimitError$0();
            _this.__http$_state = 13;
            break;
          case 13:
            t1._as(t3);
            t6 = ++_this._headersReceivedSize;
            if (t6 < 1048576)
              C.JSArray_methods.add$1(t3, byte);
            else
              _this._reportSizeLimitError$0();
            break;
          case 14:
            H.throwExpression(H.HttpException$(_s22_0 + H.S(byte) + _s18_, _null));
            _this.__http$_state = 15;
            break;
          case 15:
            headerField = P.String_String$fromCharCodes(t2, 0, _null);
            headerValue = P.String_String$fromCharCodes(t3, 0, _null);
            if (headerField === "content-length") {
              if (_this._contentLength)
                throw H.wrapException(H.HttpException$("The Content-Length header occurred more than once, at most one is allowed.", _null));
              else if (_this._transferEncoding)
                throw H.wrapException(H.HttpException$(_s79_, _null));
              _this._contentLength = true;
            } else if (headerField === "transfer-encoding") {
              _this._transferEncoding = true;
              if (H._HttpParser__caseInsensitiveCompare(new H.CodeUnits("chunked"), t3))
                _this._chunked = true;
              if (_this._contentLength)
                throw H.wrapException(H.HttpException$(_s79_, _null));
            }
            t6 = _this._headers;
            t6.toString;
            if (headerField === "connection") {
              tokens = H._HttpParser__tokenizeFieldValue(headerValue);
              isResponse = _this._messageType === 0;
              t7 = _this._statusCode;
              isUpgradeCode = t7 === 426 || t7 === 101;
              for (t7 = !isResponse, i = 0; i < tokens.length; ++i) {
                isUpgrade = H._HttpParser__caseInsensitiveCompare(new H.CodeUnits("upgrade"), new H.CodeUnits(tokens[i]));
                if (!(isUpgrade && t7))
                  t8 = isUpgrade && isResponse && isUpgradeCode;
                else
                  t8 = true;
                if (t8)
                  _this._connectionUpgrade = true;
                if (i >= tokens.length)
                  return H.ioore(tokens, i);
                t6.__http$_add$2(0, headerField, tokens[i]);
              }
            } else
              t6.__http$_add$2(0, headerField, headerValue);
            C.JSArray_methods.set$length(t2, 0);
            C.JSArray_methods.set$length(t3, 0);
            _this.__http$_state = 11;
            t6 = (byte - 65 & 127) < 26 ? (byte | 32) >>> 0 : byte;
            t1._as(t2);
            if (++_this._headersReceivedSize < 1048576)
              C.JSArray_methods.add$1(t2, t6);
            else
              _this._reportSizeLimitError$0();
            break;
          case 16:
            H.throwExpression(H.HttpException$(_s22_0 + H.S(byte) + _s18_, _null));
            if (_this._headersEnd$0())
              return;
            break;
          case 17:
            H.throwExpression(H.HttpException$(_s22_0 + H.S(byte) + _s18_0, _null));
            _this.__http$_state = 18;
            break;
          case 18:
            H.throwExpression(H.HttpException$(_s22_0 + H.S(byte) + _s18_, _null));
            _this.__http$_state = 19;
            break;
          case 19:
            _this._expectHexDigit$1(byte);
            break;
          case 20:
            break;
          case 21:
            H.throwExpression(H.HttpException$(_s22_0 + H.S(byte) + _s18_, _null));
            if (_this._remainingContent > 0)
              _this.__http$_state = 24;
            else
              _this.__http$_state = 22;
            break;
          case 22:
            H.throwExpression(H.HttpException$(_s22_0 + H.S(byte) + _s18_0, _null));
            break;
          case 23:
            H.throwExpression(H.HttpException$(_s22_0 + H.S(byte) + _s18_, _null));
            _this._reset$0();
            _this._closeIncoming$0();
            break;
          case 24:
            _this.__http$_index = t6 - 1;
            buffer = _this.__http$_buffer;
            dataAvailable = buffer.get$length(buffer).$sub(0, _this.__http$_index);
            t6 = _this._remainingContent;
            if (t6 >= 0 && dataAvailable.$gt(0, t6))
              dataAvailable = _this._remainingContent;
            t6 = buffer.get$buffer(buffer);
            t7 = buffer.get$offsetInBytes(buffer).$add(0, _this.__http$_index);
            data = new Uint8Array(t6, t7, dataAvailable);
            t6 = _this._bodyController;
            t6.toString;
            t7 = H._instanceType(t6);
            t7._precomputed1._as(data);
            t8 = t6._state;
            if (t8 >= 4)
              H.throwExpression(t6._badEventState$0());
            if ((t8 & 1) !== 0)
              t6._sendData$1(data);
            else if ((t8 & 3) === 0) {
              t6 = t6._ensurePendingEvents$0();
              t7 = new P._DelayedData(data, t7._eval$1("_DelayedData<1>"));
              lastEvent = t6.lastPendingEvent;
              if (lastEvent == null)
                t6.firstPendingEvent = t6.lastPendingEvent = t7;
              else {
                lastEvent.set$next(0, t7);
                t6.lastPendingEvent = t7;
              }
            }
            t6 = _this._remainingContent;
            if (t6 !== -1)
              t6 = _this._remainingContent = t6 - data.length;
            _this.__http$_index = _this.__http$_index + data.length;
            if (t6 === 0)
              if (!_this._chunked) {
                _this._reset$0();
                _this._closeIncoming$0();
              } else
                _this.__http$_state = 17;
            break;
          case 27:
            break;
          default:
            break;
        }
      }
      _this._parserCalled = false;
    },
    __http$_onData$1: function(buffer) {
      var _this = this;
      _this.__http$_socketSubscription.pause$0(0);
      _this.__http$_buffer = buffer;
      _this.__http$_index = 0;
      _this._parse$0();
    },
    __http$_onDone$0: function() {
      var t1, t2, _this = this, _null = null,
        _s49_ = "Connection closed before full header was received";
      _this.set$__http$_socketSubscription(_null);
      t1 = _this.__http$_state;
      if (t1 === 25 || t1 === 27)
        return;
      if (_this._incoming != null) {
        if (t1 !== 26)
          if (!(t1 === 0 && true)) {
            t2 = !(t1 === 24 && !_this._chunked && _this._transferLength === -1);
            t1 = t2;
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          _this._reportBodyError$1(new H.HttpException("Connection closed while receiving data", _null));
        _this._closeIncoming$1(true);
        _this._controller.close$0(0);
        return;
      }
      if (t1 === 0) {
        _this._reportHttpError$1(new H.HttpException(_s49_, _null));
        _this._controller.close$0(0);
        return;
      }
      if (t1 === 26) {
        _this._controller.close$0(0);
        return;
      }
      if (t1 < 17) {
        _this.__http$_state = 27;
        _this._reportHttpError$1(new H.HttpException(_s49_, _null));
        _this._controller.close$0(0);
        return;
      }
      if (!_this._chunked && _this._transferLength === -1)
        _this.__http$_state = 25;
      else {
        _this.__http$_state = 27;
        _this._reportHttpError$1(new H.HttpException("Connection closed before full body was received", _null));
      }
      _this._controller.close$0(0);
    },
    get$version: function(_) {
      switch (this._httpVersion) {
        case 1:
          return "1.0";
        case 2:
          return "1.1";
      }
      return null;
    },
    _reset$0: function() {
      var _this = this;
      if (_this.__http$_state === 26)
        return;
      _this._messageType = _this.__http$_state = 0;
      C.JSArray_methods.set$length(_this._headerField, 0);
      C.JSArray_methods.set$length(_this._headerValue, 0);
      _this._headersReceivedSize = 0;
      C.JSArray_methods.set$length(_this.__http$_method, 0);
      C.JSArray_methods.set$length(_this._uriOrReasonPhrase, 0);
      _this._httpVersion = _this._statusCodeLength = _this._statusCode = 0;
      _this._transferLength = -1;
      _this._noMessageBody = _this._chunked = _this._connectionUpgrade = false;
      _this._remainingContent = -1;
      _this._transferEncoding = _this._contentLength = false;
      _this._headers = null;
    },
    _expectHexDigit$1: function(byte) {
      if (C.JSInt_methods.$le(48, byte) && byte.$le(0, 57))
        return byte.$sub(0, 48);
      else if (C.JSInt_methods.$le(65, byte) && byte.$le(0, 70))
        return byte.$sub(0, 65) + 10;
      else if (C.JSInt_methods.$le(97, byte) && byte.$le(0, 102))
        return byte.$sub(0, 97) + 10;
      else
        throw H.wrapException(H.HttpException$("Failed to parse HTTP, " + H.S(byte) + " is expected to be a Hex digit", null));
    },
    _reportSizeLimitError$0: function() {
      var method,
        t1 = this.__http$_state;
      switch (t1) {
        case 0:
        case 1:
        case 3:
          method = "Method";
          break;
        case 4:
          method = "URI";
          break;
        case 8:
          method = "Reason phrase";
          break;
        case 10:
        case 11:
          method = "Header field";
          break;
        case 12:
        case 13:
          method = "Header value";
          break;
        default:
          throw H.wrapException(P.UnsupportedError$("Unexpected state: " + t1));
      }
      throw H.wrapException(H.HttpException$(method + " exceeds the 1048576 size limit", null));
    },
    _createIncoming$1: function(transferLength) {
      var t1, incoming, _this = this,
        controller = P.StreamController_StreamController(true, type$.Uint8List);
      _this.set$_bodyController(controller);
      t1 = _this._headers;
      t1.toString;
      incoming = _this._incoming = new H._HttpIncoming(new P._AsyncCompleter(new P._Future($.Zone__current, type$._Future_dynamic), type$._AsyncCompleter_dynamic), new P._ControllerStream(controller, H._instanceType(controller)._eval$1("_ControllerStream<1>")), t1);
      controller.set$onListen(new H._HttpParser__createIncoming_closure(_this, incoming));
      controller.set$onPause(0, new H._HttpParser__createIncoming_closure0(_this, incoming));
      controller.set$onResume(0, new H._HttpParser__createIncoming_closure1(_this, incoming));
      controller.set$onCancel(0, new H._HttpParser__createIncoming_closure2(_this, incoming));
      _this._bodyPaused = true;
      _this._pauseStateChanged$0();
      return incoming;
    },
    _closeIncoming$1: function(closing) {
      var controller, _this = this,
        tmp = _this._incoming;
      if (tmp == null)
        return;
      tmp.hasSubscriber = true;
      tmp._dataCompleter.complete$1(0, closing);
      _this._incoming = null;
      controller = _this._bodyController;
      if (controller != null) {
        controller.close$0(0);
        _this.set$_bodyController(null);
      }
      _this._bodyPaused = false;
      _this._pauseStateChanged$0();
    },
    _closeIncoming$0: function() {
      return this._closeIncoming$1(false);
    },
    _pauseStateChanged$0: function() {
      var _this = this;
      if (_this._incoming != null) {
        if (!_this._bodyPaused && !_this._parserCalled)
          _this._parse$0();
      } else if (!_this._paused && !_this._parserCalled)
        _this._parse$0();
    },
    _reportHttpError$2: function(error, stackTrace) {
      var t1;
      this.__http$_state = 27;
      t1 = this._controller;
      t1.addError$2(error, type$.nullable_StackTrace._as(stackTrace));
      t1.close$0(0);
    },
    _reportHttpError$1: function(error) {
      return this._reportHttpError$2(error, null);
    },
    _reportBodyError$2: function(error, stackTrace) {
      var t1;
      this.__http$_state = 27;
      t1 = this._bodyController;
      if (t1 != null)
        t1.addError$2(error, type$.nullable_StackTrace._as(stackTrace));
      t1 = this._bodyController;
      if (t1 != null)
        t1.close$0(0);
    },
    _reportBodyError$1: function(error) {
      return this._reportBodyError$2(error, null);
    },
    set$__http$_socketSubscription: function(_socketSubscription) {
      this.__http$_socketSubscription = type$.nullable_StreamSubscription_Uint8List._as(_socketSubscription);
    },
    set$_bodyController: function(_bodyController) {
      this._bodyController = type$.nullable_StreamController_Uint8List._as(_bodyController);
    }
  };
  H._HttpParser$__closure.prototype = {
    call$0: function() {
      this.$this._paused = false;
    },
    $signature: 0
  };
  H._HttpParser$__closure0.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._paused = true;
      t1._pauseStateChanged$0();
    },
    $signature: 0
  };
  H._HttpParser$__closure1.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._paused = false;
      t1._pauseStateChanged$0();
    },
    $signature: 0
  };
  H._HttpParser$__closure2.prototype = {
    call$0: function() {
    },
    $signature: 3
  };
  H._HttpParser__createIncoming_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      if (this.incoming !== t1._incoming)
        return;
      t1._bodyPaused = false;
      t1._pauseStateChanged$0();
    },
    $signature: 0
  };
  H._HttpParser__createIncoming_closure0.prototype = {
    call$0: function() {
      var t1 = this.$this;
      if (this.incoming !== t1._incoming)
        return;
      t1._bodyPaused = true;
      t1._pauseStateChanged$0();
    },
    $signature: 0
  };
  H._HttpParser__createIncoming_closure1.prototype = {
    call$0: function() {
      var t1 = this.$this;
      if (this.incoming !== t1._incoming)
        return;
      t1._bodyPaused = false;
      t1._pauseStateChanged$0();
    },
    $signature: 0
  };
  H._HttpParser__createIncoming_closure2.prototype = {
    call$0: function() {
      var t1 = this.$this;
      if (this.incoming !== t1._incoming)
        return;
      t1._closeIncoming$1(true);
      t1._controller.close$0(0);
    },
    $signature: 3
  };
  J.Interceptor.prototype = {
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return "Instance of '" + H.Primitives_objectTypeName(receiver) + "'";
    }
  };
  J.JSBool.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {
    get$hashCode: function(receiver) {
      return 0;
    },
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0: function(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + J.toString$0$(dartClosure);
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    add$1: function(receiver, value) {
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    remove$1: function(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    addAll$1: function(receiver, collection) {
      var t1;
      H._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("addAll"));
      if (Array.isArray(collection)) {
        this._addAllFromArray$1(receiver, collection);
        return;
      }
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current(t1));
    },
    _addAllFromArray$1: function(receiver, array) {
      var len, i;
      type$.JSArray_dynamic._as(array);
      len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    forEach$1: function(receiver, f) {
      var end, i;
      H._arrayInstanceType(receiver)._eval$1("~(1)")._as(f);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H._arrayInstanceType(receiver);
      return new H.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    join$1: function(receiver, separator) {
      var i,
        list = P.List_List$filled(receiver.length, "", false, type$.String);
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, H.S(receiver[i]));
      return list.join(separator);
    },
    skip$1: function(receiver, n) {
      return H.SubListIterable$(receiver, n, null, H._arrayInstanceType(receiver)._precomputed1);
    },
    fold$1$2: function(receiver, initialValue, combine, $T) {
      var $length, value, i;
      $T._as(initialValue);
      H._arrayInstanceType(receiver)._bind$1($T)._eval$1("1(1,2)")._as(combine);
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    indexOf$1: function(receiver, element) {
      var i,
        $length = receiver.length;
      if (0 >= $length)
        return -1;
      for (i = 0; i < $length; ++i) {
        if (i >= receiver.length)
          return H.ioore(receiver, i);
        if (J.$eq$(receiver[i], element))
          return i;
      }
      return -1;
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    get$iterator: function(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, H._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      if (newLength > receiver.length)
        H._arrayInstanceType(receiver)._precomputed1._as(null);
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current: function(_) {
      return this.$ti._precomputed1._as(this.__interceptors$_current);
    },
    moveNext$0: function() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this.__interceptors$_length !== $length)
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$__interceptors$_current(null);
        return false;
      }
      _this.set$__interceptors$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$__interceptors$_current: function(_current) {
      this.__interceptors$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    floor$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".floor()"));
    },
    toRadixString$1: function(receiver, radix) {
      var result, match, t1, exponent;
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      if (C.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        H.throwExpression(P.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return H.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return H.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + C.JSString_methods.$mul("0", exponent);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $add: function(receiver, other) {
      return receiver + other;
    },
    $mod: function(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1: function(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + other));
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $le: function(receiver, other) {
      return receiver <= other;
    },
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {$isint: 1};
  J.JSNumNotInt.prototype = {};
  J.JSString.prototype = {
    codeUnitAt$1: function(receiver, index) {
      if (index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        H.throwExpression(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1: function(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    replaceRange$3: function(receiver, start, end, replacement) {
      var e = P.RangeError_checkValidRange(start, end, receiver.length),
        prefix = receiver.substring(0, start),
        suffix = receiver.substring(e);
      return prefix + replacement + suffix;
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      if (index < 0 || index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (endIndex == null)
        endIndex = receiver.length;
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex, null));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    trim$0: function(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this._codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul: function(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    indexOf$2: function(receiver, pattern, start) {
      var t1;
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      t1 = receiver.indexOf(pattern, start);
      return t1;
    },
    indexOf$1: function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$2: function(receiver, pattern, start) {
      var t1, t2;
      if (start == null)
        start = receiver.length;
      else if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      t1 = pattern.length;
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    },
    lastIndexOf$1: function($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isPattern: 1,
    $isString: 1
  };
  H.CastStream.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("~(2)?")._as(onData);
      t2 = this._source.listen$3$cancelOnError$onDone(null, cancelOnError, type$.nullable_void_Function._as(onDone));
      t1 = new H.CastStreamSubscription(t2, $.Zone__current, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("CastStreamSubscription<1,2>"));
      t2.onData$1(t1.get$__internal$_onData());
      t1.onData$1(onData);
      t1.onError$1(0, onError);
      return t1;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$3$cancelOnError$onDone: function(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$2$cancelOnError: function(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    }
  };
  H.CastStreamSubscription.prototype = {
    cancel$0: function(_) {
      return this._source.cancel$0(0);
    },
    onData$1: function(handleData) {
      var t1 = this.$ti;
      t1._eval$1("~(2)?")._as(handleData);
      this.set$__internal$_handleData(handleData == null ? null : type$.$env_1_1_dynamic._bind$1(t1._rest[1])._eval$1("1(2)")._as(handleData));
    },
    onError$1: function(_, handleError) {
      var _this = this;
      _this._source.onError$1(0, handleError);
      if (handleError == null)
        _this.__internal$_handleError = null;
      else if (type$.void_Function_Object_StackTrace._is(handleError))
        _this.__internal$_handleError = _this.__internal$_zone.registerBinaryCallback$3$1(handleError, type$.dynamic, type$.Object, type$.StackTrace);
      else if (type$.void_Function_Object._is(handleError))
        _this.__internal$_handleError = type$.dynamic_Function_Object._as(handleError);
      else
        throw H.wrapException(P.ArgumentError$(string$.handle));
    },
    __internal$_onData$1: function(data) {
      var targetData, error, stack, handleError, t2, exception, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(data);
      t2 = _this.__internal$_handleData;
      if (t2 == null)
        return;
      targetData = null;
      try {
        targetData = t1._rest[1]._as(data);
      } catch (exception) {
        error = H.unwrapException(exception);
        stack = H.getTraceFromException(exception);
        handleError = _this.__internal$_handleError;
        if (handleError == null)
          P._rootHandleUncaughtError(null, null, _this.__internal$_zone, type$.Object._as(error), type$.StackTrace._as(stack));
        else {
          t1 = type$.Object;
          t2 = _this.__internal$_zone;
          if (type$.void_Function_Object_StackTrace._is(handleError))
            t2.runBinaryGuarded$2$3(handleError, error, stack, t1, type$.StackTrace);
          else
            t2.runUnaryGuarded$1$2(type$.void_Function_Object._as(handleError), error, t1);
        }
        return;
      }
      _this.__internal$_zone.runUnaryGuarded$1$2(t2, targetData, t1._rest[1]);
    },
    pause$1: function(_, resumeSignal) {
      this._source.pause$1(0, resumeSignal);
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function(_) {
      this._source.resume$0(0);
    },
    asFuture$1$1: function(futureValue, $E) {
      return this._source.asFuture$1$1($E._eval$1("0?")._as(futureValue), $E);
    },
    set$__internal$_handleData: function(_handleData) {
      this.__internal$_handleData = this.$ti._eval$1("~(2)?")._as(_handleData);
    },
    $isStreamSubscription: 1
  };
  H.LateError.prototype = {
    toString$0: function(_) {
      var t1 = "LateInitializationError: " + this.__internal$_message;
      return t1;
    }
  };
  H.CodeUnits.prototype = {
    get$length: function(_) {
      return this._string.length;
    },
    $index: function(_, i) {
      return C.JSString_methods.codeUnitAt$1(this._string, H._asInt(i));
    }
  };
  H.nullFuture_closure.prototype = {
    call$0: function() {
      return P.Future_Future$value(null, type$.Null);
    },
    $signature: 55
  };
  H.EfficientLengthIterable.prototype = {};
  H.ListIterable.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return new H.ListIterator(_this, _this.get$length(_this), H._instanceType(_this)._eval$1("ListIterator<ListIterable.E>"));
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    map$1$1: function(_, f, $T) {
      var t1 = H._instanceType(this);
      return new H.MappedListIterable(this, t1._bind$1($T)._eval$1("1(ListIterable.E)")._as(f), t1._eval$1("@<ListIterable.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    }
  };
  H.SubListIterable.prototype = {
    get$_endIndex: function() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex: function() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length: function(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
      if (typeof endOrLength !== "number")
        return endOrLength.$sub();
      return endOrLength - t1;
    },
    elementAt$1: function(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index;
      if (index < 0 || realIndex >= _this.get$_endIndex())
        throw H.wrapException(P.IndexError$(index, _this, "index", null, null));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    toList$1$growable: function(_, growable) {
      var $length, result, i, _this = this,
        start = _this.__internal$_start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end)
        end = endOrLength;
      $length = end - start;
      if ($length <= 0) {
        t1 = J.JSArray_JSArray$fixed(0, _this.$ti._precomputed1);
        return t1;
      }
      result = P.List_List$filled($length, t2.elementAt$1(t1, start), false, _this.$ti._precomputed1);
      for (i = 1; i < $length; ++i) {
        C.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        if (t2.get$length(t1) < end)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return result;
    }
  };
  H.ListIterator.prototype = {
    get$current: function(_) {
      return this.$ti._precomputed1._as(this.__internal$_current);
    },
    moveNext$0: function() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  H.MappedIterable.prototype = {
    get$iterator: function(_) {
      var t1 = H._instanceType(this);
      return new H.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("MappedIterator<1,2>"));
    },
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    }
  };
  H.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1};
  H.MappedIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current(t1)));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current: function(_) {
      return this.$ti._rest[1]._as(this.__internal$_current);
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    }
  };
  H.MappedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    }
  };
  H.FixedLengthListMixin.prototype = {
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      H.instanceType(receiver)._eval$1("FixedLengthListMixin.E")._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    remove$1: function(receiver, element) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    }
  };
  H.UnmodifiableListMixin.prototype = {
    $indexSet: function(_, index, value) {
      H._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1: function(_, value) {
      H._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    remove$1: function(_, element) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
    }
  };
  H.UnmodifiableListBase.prototype = {};
  H.ConstantMap.prototype = {
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  H.ConstantStringMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    containsKey$1: function(_, key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsObject.hasOwnProperty(key);
    },
    $index: function(_, key) {
      if (!this.containsKey$1(0, key))
        return null;
      return this._fetch$1(key);
    },
    _fetch$1: function(key) {
      return this._jsObject[H._asString(key)];
    },
    forEach$1: function(_, f) {
      var keys, t2, i, key,
        t1 = H._instanceType(this);
      t1._eval$1("~(1,2)")._as(f);
      keys = this.__js_helper$_keys;
      for (t2 = keys.length, t1 = t1._rest[1], i = 0; i < t2; ++i) {
        key = keys[i];
        f.call$2(key, t1._as(this._fetch$1(key)));
      }
    }
  };
  H.Primitives_initTicker_closure.prototype = {
    call$0: function() {
      return C.JSNumber_methods.floor$0(1000 * this.performance.now());
    },
    $signature: 25
  };
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1: function(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  H.NullError.prototype = {
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + this.__js_helper$_message;
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
  };
  H.UnknownJsTypeError.prototype = {
    toString$0: function(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  H.NullThrownFromJavaScriptException.prototype = {
    toString$0: function(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    }
  };
  H.ExceptionAndStackTrace.prototype = {};
  H._StackTrace.prototype = {
    toString$0: function(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  H.Closure.prototype = {
    toString$0: function(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + H.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0: function(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.unminifyOrTag($name) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return _this._self === other._self && _this._target === other._target && _this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var receiverHashCode,
        t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return (receiverHashCode ^ H.Primitives_objectHashCode(this._target)) >>> 0;
    },
    toString$0: function(_) {
      var receiver = this._receiver;
      if (receiver == null)
        receiver = this._self;
      return "Closure '" + H.S(this._name) + "' of " + ("Instance of '" + H.Primitives_objectTypeName(type$.Object._as(receiver)) + "'");
    }
  };
  H.RuntimeError.prototype = {
    toString$0: function(_) {
      return "RuntimeError: " + this.message;
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  H._AssertionError.prototype = {
    toString$0: function(_) {
      return "Assertion failed: " + P.Error_safeToString(this.message);
    }
  };
  H.JsLinkedHashMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return this.__js_helper$_length === 0;
    },
    get$keys: function(_) {
      return new H.LinkedHashMapKeyIterable(this, H._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    $index: function(_, key) {
      var strings, cell, t1, nums, _this = this, _null = null;
      if (typeof key == "string") {
        strings = _this._strings;
        if (strings == null)
          return _null;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null)
          return _null;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var bucket, index, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = _this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key));
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2: function(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      if (bucket == null)
        _this._setTableEntry$3(rest, hash, [_this._newLinkedCell$2(key, value)]);
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    remove$1: function(_, key) {
      var _this = this;
      if (typeof key == "string")
        return _this._removeHashTableEntry$2(_this._strings, key);
      else if (typeof key == "number" && (key & 0x3ffffff) === key)
        return _this._removeHashTableEntry$2(_this._nums, key);
      else
        return _this.internalRemove$1(key);
    },
    internalRemove$1: function(key) {
      var hash, bucket, index, cell, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      cell = bucket.splice(index, 1)[0];
      _this._unlinkCell$1(cell);
      if (bucket.length === 0)
        _this._deleteTableEntry$2(rest, hash);
      return cell.hashMapCellValue;
    },
    forEach$1: function(_, action) {
      var cell, modifications, _this = this;
      H._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this._newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return null;
      cell = this._getTableCell$2(table, key);
      if (cell == null)
        return null;
      this._unlinkCell$1(cell);
      this._deleteTableEntry$2(table, key);
      return cell.hashMapCellValue;
    },
    _modified$0: function() {
      this._modifications = this._modifications + 1 & 67108863;
    },
    _newLinkedCell$2: function(key, value) {
      var _this = this,
        t1 = H._instanceType(_this),
        cell = new H.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        t1 = _this._last;
        t1.toString;
        cell._previous = t1;
        _this._last = t1._next = cell;
      }
      ++_this.__js_helper$_length;
      _this._modified$0();
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      --_this.__js_helper$_length;
      _this._modified$0();
    },
    internalComputeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2: function(table, key) {
      return table[key];
    },
    _getTableBucket$2: function(table, key) {
      return table[key];
    },
    _setTableEntry$3: function(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2: function(table, key) {
      delete table[key];
    },
    _newHashTable$0: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    },
    $isLinkedHashMap: 1
  };
  H.LinkedHashMapCell.prototype = {};
  H.LinkedHashMapKeyIterable.prototype = {
    get$length: function(_) {
      return this._map.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return this._map.__js_helper$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._map,
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
      t2._cell = t1._first;
      return t2;
    }
  };
  H.LinkedHashMapKeyIterator.prototype = {
    get$current: function(_) {
      return this.$ti._precomputed1._as(this.__js_helper$_current);
    },
    moveNext$0: function() {
      var cell, _this = this,
        t1 = _this._map;
      if (_this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.set$__js_helper$_current(null);
        return false;
      } else {
        _this.set$__js_helper$_current(cell.hashMapCellKey);
        _this._cell = cell._next;
        return true;
      }
    },
    set$__js_helper$_current: function(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  H.initHooks_closure.prototype = {
    call$1: function(o) {
      return this.getTag(o);
    },
    $signature: 26
  };
  H.initHooks_closure0.prototype = {
    call$2: function(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 58
  };
  H.initHooks_closure1.prototype = {
    call$1: function(tag) {
      return this.prototypeForTag(H._asString(tag));
    },
    $signature: 59
  };
  H.JSSyntaxRegExp.prototype = {
    toString$0: function(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    $isPattern: 1
  };
  H.NativeTypedData.prototype = {
    _invalidPosition$3: function(receiver, position, $length, $name) {
      var t1 = P.RangeError$range(position, 0, $length, $name, null);
      throw H.wrapException(t1);
    },
    _checkPosition$3: function(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    }
  };
  H.NativeTypedArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    _setRangeFast$4: function(receiver, start, end, source, skipCount) {
      var count, sourceLength,
        targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
      count = end - start;
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJSIndexable: 1,
    $isJavaScriptIndexingBehavior: 1
  };
  H.NativeTypedArrayOfDouble.prototype = {
    $index: function(receiver, index) {
      H._asInt(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asDouble(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  H.NativeTypedArrayOfInt.prototype = {
    $indexSet: function(receiver, index, value) {
      H._asInt(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      type$.Iterable_int._as(iterable);
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  H.NativeInt16List.prototype = {
    $index: function(receiver, index) {
      H._asInt(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeInt32List.prototype = {
    $index: function(receiver, index) {
      H._asInt(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeInt8List.prototype = {
    $index: function(receiver, index) {
      H._asInt(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint16List.prototype = {
    $index: function(receiver, index) {
      H._asInt(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint32List.prototype = {
    $index: function(receiver, index) {
      H._asInt(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint8ClampedList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint8List.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    $isNativeUint8List: 1,
    $isUint8List: 1
  };
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  H.Rti.prototype = {
    _eval$1: function(recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1: function(typeOrTuple) {
      return H._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  H._FunctionParameters.prototype = {};
  H._Error.prototype = {
    toString$0: function(_) {
      return this._message;
    }
  };
  H._TypeError.prototype = {
    get$message: function(_) {
      return this._message;
    }
  };
  P._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1: function(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 1
  };
  P._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1: function(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 60
  };
  P._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 3
  };
  P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 3
  };
  P._TimerImpl.prototype = {
    _TimerImpl$2: function(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
    },
    cancel$0: function(_) {
      var t1;
      if (self.setTimeout != null) {
        t1 = this._handle;
        if (t1 == null)
          return;
        self.clearTimeout(t1);
        this._handle = null;
      } else
        throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
    },
    $isTimer: 1
  };
  P._TimerImpl_internalCallback.prototype = {
    call$0: function() {
      this.$this._handle = null;
      this.callback.call$0();
    },
    $signature: 0
  };
  P._AsyncAwaitCompleter.prototype = {
    complete$1: function(_, value) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/?")._as(value);
      if (value == null)
        value = t1._precomputed1._as(value);
      if (!_this.isSync)
        _this._future._asyncComplete$1(value);
      else {
        t2 = _this._future;
        if (t1._eval$1("Future<1>")._is(value))
          t2._chainFuture$1(value);
        else
          t2._completeWithValue$1(t1._precomputed1._as(value));
      }
    },
    completeError$2: function(e, st) {
      var t1 = this._future;
      if (this.isSync)
        t1._completeError$2(e, st);
      else
        t1._asyncCompleteError$2(e, st);
    },
    $isCompleter: 1
  };
  P._awaitOnObject_closure.prototype = {
    call$1: function(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 10
  };
  P._awaitOnObject_closure0.prototype = {
    call$2: function(error, stackTrace) {
      this.bodyFunction.call$2(1, new H.ExceptionAndStackTrace(error, type$.StackTrace._as(stackTrace)));
    },
    $signature: 15
  };
  P._wrapJsFunctionForAsync_closure.prototype = {
    call$2: function(errorCode, result) {
      this.$protected(H._asInt(errorCode), result);
    },
    $signature: 61
  };
  P.AsyncError.prototype = {
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError: 1,
    get$stackTrace: function() {
      return this.stackTrace;
    }
  };
  P.Future_wait__error_set.prototype = {
    call$1: function(t1) {
      return this._box_0._error = t1;
    },
    $signature: 62
  };
  P.Future_wait__stackTrace_set.prototype = {
    call$1: function(t1) {
      return this._box_0._stackTrace = type$.StackTrace._as(t1);
    },
    $signature: 63
  };
  P.Future_wait__error_get.prototype = {
    call$0: function() {
      var t1 = this._box_0._error;
      return t1 == null ? H.throwExpression(H.LateError$localNI("error")) : t1;
    },
    $signature: 64
  };
  P.Future_wait__stackTrace_get.prototype = {
    call$0: function() {
      var t1 = this._box_0._stackTrace;
      return t1 == null ? H.throwExpression(H.LateError$localNI("stackTrace")) : t1;
    },
    $signature: 65
  };
  P.Future_wait_handleError.prototype = {
    call$2: function(theError, theStackTrace) {
      var t1, t2, _this = this;
      type$.Object._as(theError);
      type$.StackTrace._as(theStackTrace);
      t1 = _this._box_0;
      t2 = --t1.remaining;
      if (t1.values != null) {
        t1.values = null;
        if (t1.remaining === 0 || _this.eagerError)
          _this._future._completeError$2(theError, theStackTrace);
        else {
          _this._error_set.call$1(theError);
          _this._stackTrace_set.call$1(theStackTrace);
        }
      } else if (t2 === 0 && !_this.eagerError)
        _this._future._completeError$2(_this._error_get.call$0(), _this._stackTrace_get.call$0());
    },
    $signature: 7
  };
  P.Future_wait_closure.prototype = {
    call$1: function(value) {
      var valueList, t2, _this = this,
        t1 = _this.T;
      t1._as(value);
      t2 = _this._box_0;
      --t2.remaining;
      valueList = t2.values;
      if (valueList != null) {
        J.$indexSet$ax(valueList, _this.pos, value);
        if (t2.remaining === 0)
          _this._future._completeWithValue$1(P.List_List$from(valueList, t1));
      } else if (t2.remaining === 0 && !_this.eagerError)
        _this._future._completeError$2(_this._error_get.call$0(), _this._stackTrace_get.call$0());
    },
    $signature: function() {
      return this.T._eval$1("Null(0)");
    }
  };
  P.TimeoutException.prototype = {
    toString$0: function(_) {
      var result = "TimeoutException after " + this.duration.toString$0(0);
      result = result + ": " + this.message;
      return result;
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P._Completer.prototype = {
    completeError$2: function(error, stackTrace) {
      var t1 = type$.Object;
      t1._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      H.checkNotNullable(error, "error", t1);
      if (this.future._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      if (stackTrace == null)
        stackTrace = P.AsyncError_defaultStackTrace(error);
      this._completeError$2(error, stackTrace);
    },
    completeError$1: function(error) {
      return this.completeError$2(error, null);
    },
    $isCompleter: 1
  };
  P._AsyncCompleter.prototype = {
    complete$1: function(_, value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if (t2._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t2._asyncComplete$1(t1._eval$1("1/")._as(value));
    },
    _completeError$2: function(error, stackTrace) {
      this.future._asyncCompleteError$2(error, stackTrace);
    }
  };
  P._SyncCompleter.prototype = {
    complete$1: function(_, value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if (t2._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t2._complete$1(t1._eval$1("1/")._as(value));
    },
    _completeError$2: function(error, stackTrace) {
      this.future._completeError$2(error, stackTrace);
    }
  };
  P._FutureListener.prototype = {
    matchesErrorTest$1: function(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1: function(asyncError) {
      var errorCallback = this.errorCallback,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = asyncError.error,
        t4 = this.$ti._eval$1("2/"),
        t5 = this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        return t4._as(t5.runBinary$3$3(errorCallback, t3, asyncError.stackTrace, t1, t2, type$.StackTrace));
      else
        return t4._as(t5.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), t3, t1, t2));
    }
  };
  P._Future.prototype = {
    then$1$2$onError: function(f, onError, $R) {
      var currentZone, result, t2,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      currentZone = $.Zone__current;
      if (currentZone !== C.C__RootZone) {
        $R._eval$1("@<0/>")._bind$1(t1._precomputed1)._eval$1("1(2)")._as(f);
        if (onError != null)
          onError = P._registerErrorHandler(onError, currentZone);
      }
      result = new P._Future(currentZone, $R._eval$1("_Future<0>"));
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new P._FutureListener(result, t2, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1: function(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _thenAwait$1$2: function(f, onError, $E) {
      var result,
        t1 = this.$ti;
      t1._bind$1($E)._eval$1("1/(2)")._as(f);
      result = new P._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this._addListener$1(new P._FutureListener(result, 19, f, onError, t1._eval$1("@<1>")._bind$1($E)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    catchError$2$test: function(onError, test) {
      var t1, t2, result;
      type$.nullable_bool_Function_Object._as(test);
      t1 = this.$ti;
      t2 = $.Zone__current;
      result = new P._Future(t2, t1);
      if (t2 !== C.C__RootZone) {
        onError = P._registerErrorHandler(onError, t2);
        if (test != null)
          test = type$.bool_Function_Object._as(test);
      }
      t2 = test == null ? 2 : 6;
      this._addListener$1(new P._FutureListener(result, t2, test, onError, t1._eval$1("@<1>")._bind$1(t1._precomputed1)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    catchError$1: function(onError) {
      return this.catchError$2$test(onError, null);
    },
    whenComplete$1: function(action) {
      var t1, result;
      type$.dynamic_Function._as(action);
      t1 = this.$ti;
      result = new P._Future($.Zone__current, t1);
      this._addListener$1(new P._FutureListener(result, 8, action, null, t1._eval$1("@<1>")._bind$1(t1._precomputed1)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    _addListener$1: function(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 1) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if (t1 === 2) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          t1 = source._state;
          if (t1 < 4) {
            source._addListener$1(listener);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__addListener_closure(_this, listener)));
      }
    },
    _prependListeners$1: function(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 1) {
        existingListeners = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if (t1 === 2) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          t1 = source._state;
          if (t1 < 4) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__prependListeners_closure(_box_0, _this)));
      }
    },
    _removeListeners$0: function() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1: function(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _chainForeignFuture$1: function(source) {
      var e, s, exception, _this = this;
      _this._state = 1;
      try {
        source.then$1$2$onError(new P._Future__chainForeignFuture_closure(_this), new P._Future__chainForeignFuture_closure0(_this), type$.Null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(_this, e, s));
      }
    },
    _complete$1: function(value) {
      var listeners, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value))
        if (t1._is(value))
          P._Future__chainCoreFuture(value, _this);
        else
          _this._chainForeignFuture$1(value);
      else {
        listeners = _this._removeListeners$0();
        t1._precomputed1._as(value);
        _this._state = 4;
        _this._resultOrListeners = value;
        P._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      listeners = _this._removeListeners$0();
      _this._state = 4;
      _this._resultOrListeners = value;
      P._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2: function(error, stackTrace) {
      var listeners, t1, _this = this;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      listeners = _this._removeListeners$0();
      t1 = P.AsyncError$(error, stackTrace);
      _this._state = 8;
      _this._resultOrListeners = t1;
      P._Future__propagateToListeners(_this, listeners);
    },
    _asyncComplete$1: function(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(t1._precomputed1._as(value));
    },
    _asyncCompleteWithValue$1: function(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._state = 1;
      P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__asyncCompleteWithValue_closure(_this, value)));
    },
    _chainFuture$1: function(value) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("Future<1>")._as(value);
      if (t1._is(value)) {
        if (value._state === 8) {
          _this._state = 1;
          P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__chainFuture_closure(_this, value)));
        } else
          P._Future__chainCoreFuture(value, _this);
        return;
      }
      _this._chainForeignFuture$1(value);
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      type$.StackTrace._as(stackTrace);
      this._state = 1;
      P._rootScheduleMicrotask(null, null, this._zone, type$.void_Function._as(new P._Future__asyncCompleteError_closure(this, error, stackTrace)));
    },
    timeout$1: function(_, timeLimit) {
      var _future, _this = this, t1 = {};
      if (_this._state >= 4) {
        t1 = new P._Future($.Zone__current, _this.$ti);
        t1._asyncComplete$1(_this);
        return t1;
      }
      _future = new P._Future($.Zone__current, _this.$ti);
      t1.timer = null;
      t1.timer = P.Timer_Timer(timeLimit, new P._Future_timeout_closure(_future, timeLimit));
      _this.then$1$2$onError(new P._Future_timeout_closure0(t1, _this, _future), new P._Future_timeout_closure1(t1, _future), type$.Null);
      return _future;
    },
    $isFuture: 1
  };
  P._Future__addListener_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0
  };
  P._Future__prependListeners_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0
  };
  P._Future__chainForeignFuture_closure.prototype = {
    call$1: function(value) {
      var error, stackTrace, exception,
        t1 = this.$this;
      t1._state = 0;
      try {
        t1._completeWithValue$1(t1.$ti._precomputed1._as(value));
      } catch (exception) {
        error = H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        t1._completeError$2(error, stackTrace);
      }
    },
    $signature: 1
  };
  P._Future__chainForeignFuture_closure0.prototype = {
    call$2: function(error, stackTrace) {
      this.$this._completeError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    $signature: 11
  };
  P._Future__chainForeignFuture_closure1.prototype = {
    call$0: function() {
      this.$this._completeError$2(this.e, this.s);
    },
    $signature: 0
  };
  P._Future__asyncCompleteWithValue_closure.prototype = {
    call$0: function() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 0
  };
  P._Future__chainFuture_closure.prototype = {
    call$0: function() {
      P._Future__chainCoreFuture(this.value, this.$this);
    },
    $signature: 0
  };
  P._Future__asyncCompleteError_closure.prototype = {
    call$0: function() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0: function() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(type$.dynamic_Function._as(t1.callback), type$.dynamic);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = _this.hasError && type$.AsyncError._as(_this._box_1.source._resultOrListeners).error === e;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        else
          t2.listenerValueOrError = P.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (completeResult instanceof P._Future && completeResult._state >= 4) {
        if (completeResult._state === 8) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(completeResult._resultOrListeners);
          t1.listenerHasError = true;
        }
        return;
      }
      if (type$.Future_dynamic._is(completeResult)) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1: function(_) {
      return this.originalSource;
    },
    $signature: 67
  };
  P._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0: function() {
      var e, s, t1, t2, t3, t4, t5, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t4 = t3._precomputed1;
        t5 = t4._as(this.sourceResult);
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t3._eval$1("2/(1)")._as(t2.callback), t5, t3._eval$1("2/"), t4);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = P.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleError.prototype = {
    call$0: function() {
      var asyncError, e, s, t1, exception, t2, _this = this;
      try {
        asyncError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t1 = _this._box_0;
        if (t1.listener.matchesErrorTest$1(asyncError) && t1.listener.errorCallback != null) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t2 = _this._box_0;
        if (t1.error === e)
          t2.listenerValueOrError = t1;
        else
          t2.listenerValueOrError = P.AsyncError$(e, s);
        t2.listenerHasError = true;
      }
    },
    $signature: 0
  };
  P._Future_timeout_closure.prototype = {
    call$0: function() {
      this._future._completeError$2(new P.TimeoutException("Future not completed", this.timeLimit), C.C__StringStackTrace);
    },
    $signature: 0
  };
  P._Future_timeout_closure0.prototype = {
    call$1: function(v) {
      var t1;
      this.$this.$ti._precomputed1._as(v);
      t1 = this._box_0.timer;
      if (t1._handle != null) {
        t1.cancel$0(0);
        this._future._completeWithValue$1(v);
      }
    },
    $signature: function() {
      return this.$this.$ti._eval$1("Null(1)");
    }
  };
  P._Future_timeout_closure1.prototype = {
    call$2: function(e, s) {
      var t1;
      type$.Object._as(e);
      type$.StackTrace._as(s);
      t1 = this._box_0.timer;
      if (t1._handle != null) {
        t1.cancel$0(0);
        this._future._completeError$2(e, s);
      }
    },
    $signature: 11
  };
  P._AsyncCallbackEntry.prototype = {};
  P.Stream.prototype = {
    pipe$1: function(streamConsumer) {
      H._instanceType(this)._eval$1("StreamConsumer<Stream.T>")._as(streamConsumer);
      return streamConsumer.addStream$1(0, this).then$1$1(new P.Stream_pipe_closure(streamConsumer), type$.dynamic);
    },
    get$length: function(_) {
      var t1 = {},
        future = new P._Future($.Zone__current, type$._Future_int);
      t1.count = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1, this), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    drain$1$0: function($E) {
      $E._as(null);
      return this.listen$2$cancelOnError(null, true).asFuture$1$1(null, $E);
    }
  };
  P.Stream_pipe_closure.prototype = {
    call$1: function(_) {
      return this.streamConsumer.close$0(0);
    },
    $signature: 20
  };
  P.Stream_length_closure.prototype = {
    call$1: function(_) {
      H._instanceType(this.$this)._eval$1("Stream.T")._as(_);
      ++this._box_0.count;
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  P.Stream_length_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 0
  };
  P.StreamConsumer.prototype = {};
  P.StreamTransformerBase.prototype = {$isStreamTransformer: 1};
  P._StreamController.prototype = {
    get$_pendingEvents: function() {
      var t1, _this = this;
      if ((_this._state & 8) === 0)
        return H._instanceType(_this)._eval$1("_PendingEvents<1>?")._as(_this._varData);
      t1 = H._instanceType(_this);
      return t1._eval$1("_PendingEvents<1>?")._as(t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).varData);
    },
    _ensurePendingEvents$0: function() {
      var events, t1, state, _this = this;
      if ((_this._state & 8) === 0) {
        events = _this._varData;
        if (events == null)
          events = _this._varData = new P._StreamImplEvents(H._instanceType(_this)._eval$1("_StreamImplEvents<1>"));
        return H._instanceType(_this)._eval$1("_StreamImplEvents<1>")._as(events);
      }
      t1 = H._instanceType(_this);
      state = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
      events = state.varData;
      if (events == null)
        events = state.varData = new P._StreamImplEvents(t1._eval$1("_StreamImplEvents<1>"));
      return t1._eval$1("_StreamImplEvents<1>")._as(events);
    },
    get$_async$_subscription: function() {
      var varData = this._varData;
      if ((this._state & 8) !== 0)
        varData = type$._StreamControllerAddStreamState_nullable_Object._as(varData).varData;
      return H._instanceType(this)._eval$1("_ControllerSubscription<1>")._as(varData);
    },
    _badEventState$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add event after closing");
      return new P.StateError("Cannot add event while adding a stream");
    },
    _ensureDoneFuture$0: function() {
      var t1 = this._doneFuture;
      if (t1 == null)
        t1 = this._doneFuture = (this._state & 2) !== 0 ? $.$get$Future__nullFuture() : new P._Future($.Zone__current, type$._Future_void);
      return t1;
    },
    add$1: function(_, value) {
      var _this = this;
      H._instanceType(_this)._precomputed1._as(value);
      if (_this._state >= 4)
        throw H.wrapException(_this._badEventState$0());
      _this._add$1(0, value);
    },
    addError$2: function(error, stackTrace) {
      var t1 = type$.Object;
      t1._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      H.checkNotNullable(error, "error", t1);
      if (this._state >= 4)
        throw H.wrapException(this._badEventState$0());
      if (stackTrace == null)
        stackTrace = P.AsyncError_defaultStackTrace(error);
      this._addError$2(error, stackTrace);
    },
    addError$1: function(error) {
      return this.addError$2(error, null);
    },
    close$0: function(_) {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 4) !== 0)
        return _this._ensureDoneFuture$0();
      if (t1 >= 4)
        throw H.wrapException(_this._badEventState$0());
      t1 = _this._state = t1 | 4;
      if ((t1 & 1) !== 0)
        _this._sendDone$0();
      else if ((t1 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, C.C__DelayedDone);
      return _this._ensureDoneFuture$0();
    },
    _add$1: function(_, value) {
      var t2, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(value);
      t2 = _this._state;
      if ((t2 & 1) !== 0)
        _this._sendData$1(value);
      else if ((t2 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, new P._DelayedData(value, t1._eval$1("_DelayedData<1>")));
    },
    _addError$2: function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendError$2(error, stackTrace);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new P._DelayedError(error, stackTrace));
    },
    _subscribe$4: function(onData, onError, onDone, cancelOnError) {
      var t2, t3, subscription, pendingEvents, addState, _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      if ((_this._state & 3) !== 0)
        throw H.wrapException(P.StateError$("Stream has already been listened to."));
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      subscription = new P._ControllerSubscription(_this, P._BufferingStreamSubscription__registerDataHandler(t2, onData, t1._precomputed1), P._BufferingStreamSubscription__registerErrorHandler(t2, onError), P._BufferingStreamSubscription__registerDoneHandler(t2, onDone), t2, t3, t1._eval$1("_ControllerSubscription<1>"));
      pendingEvents = _this.get$_pendingEvents();
      t3 = _this._state |= 1;
      if ((t3 & 8) !== 0) {
        addState = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
        addState.varData = subscription;
        addState.addSubscription.resume$0(0);
      } else
        _this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new P._StreamController__subscribe_closure(_this));
      return subscription;
    },
    _recordCancel$1: function(subscription) {
      var result, onCancel, cancelResult, e, s, exception, result0, _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      result = null;
      if ((_this._state & 8) !== 0)
        result = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).cancel$0(0);
      _this._varData = null;
      _this._state = _this._state & 4294967286 | 2;
      onCancel = _this.onCancel;
      if (onCancel != null)
        if (result == null)
          try {
            cancelResult = onCancel.call$0();
            if (type$.Future_void._is(cancelResult))
              result = cancelResult;
          } catch (exception) {
            e = H.unwrapException(exception);
            s = H.getTraceFromException(exception);
            result0 = new P._Future($.Zone__current, type$._Future_void);
            result0._asyncCompleteError$2(e, s);
            result = result0;
          }
        else
          result = result.whenComplete$1(onCancel);
      t1 = new P._StreamController__recordCancel_complete(_this);
      if (result != null)
        result = result.whenComplete$1(t1);
      else
        t1.call$0();
      return result;
    },
    set$onListen: function(onListen) {
      this.onListen = type$.nullable_void_Function._as(onListen);
    },
    set$onPause: function(_, onPause) {
      this.onPause = type$.nullable_void_Function._as(onPause);
    },
    set$onResume: function(_, onResume) {
      this.onResume = type$.nullable_void_Function._as(onResume);
    },
    set$onCancel: function(_, onCancel) {
      this.onCancel = type$.nullable_void_Function._as(onCancel);
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1,
    $isSink: 1
  };
  P._StreamController__subscribe_closure.prototype = {
    call$0: function() {
      P._runGuarded(this.$this.onListen);
    },
    $signature: 0
  };
  P._StreamController__recordCancel_complete.prototype = {
    call$0: function() {
      var doneFuture = this.$this._doneFuture;
      if (doneFuture != null && doneFuture._state === 0)
        doneFuture._asyncComplete$1(null);
    },
    $signature: 0
  };
  P._SyncStreamControllerDispatch.prototype = {
    _sendData$1: function(data) {
      this.$ti._precomputed1._as(data);
      this.get$_async$_subscription()._add$1(0, data);
    },
    _sendError$2: function(error, stackTrace) {
      this.get$_async$_subscription()._addError$2(error, stackTrace);
    },
    _sendDone$0: function() {
      this.get$_async$_subscription()._close$0();
    }
  };
  P._SyncStreamController.prototype = {};
  P._ControllerStream.prototype = {
    get$hashCode: function(_) {
      return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof P._ControllerStream && other._async$_controller === this._async$_controller;
    }
  };
  P._ControllerSubscription.prototype = {
    _onCancel$0: function() {
      return this._async$_controller._recordCancel$1(this);
    },
    _onPause$0: function() {
      var t1 = this._async$_controller,
        t2 = H._instanceType(t1);
      t2._eval$1("StreamSubscription<1>")._as(this);
      if ((t1._state & 8) !== 0)
        t2._eval$1("_StreamControllerAddStreamState<1>")._as(t1._varData).addSubscription.pause$0(0);
      P._runGuarded(t1.onPause);
    },
    _onResume$0: function() {
      var t1 = this._async$_controller,
        t2 = H._instanceType(t1);
      t2._eval$1("StreamSubscription<1>")._as(this);
      if ((t1._state & 8) !== 0)
        t2._eval$1("_StreamControllerAddStreamState<1>")._as(t1._varData).addSubscription.resume$0(0);
      P._runGuarded(t1.onResume);
    }
  };
  P._AddStreamState_cancel_closure.prototype = {
    call$0: function() {
      this.$this.addStreamFuture._asyncComplete$1(null);
    },
    $signature: 3
  };
  P._BufferingStreamSubscription.prototype = {
    _setPendingEvents$1: function(pendingEvents) {
      var _this = this;
      H._instanceType(_this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>?")._as(pendingEvents);
      if (pendingEvents == null)
        return;
      _this.set$_async$_pending(pendingEvents);
      if (pendingEvents.lastPendingEvent != null) {
        _this._state = (_this._state | 64) >>> 0;
        pendingEvents.schedule$1(_this);
      }
    },
    onData$1: function(handleData) {
      var t1 = H._instanceType(this);
      this.set$_onData(P._BufferingStreamSubscription__registerDataHandler(this._zone, t1._eval$1("~(_BufferingStreamSubscription.T)?")._as(handleData), t1._eval$1("_BufferingStreamSubscription.T")));
    },
    onError$1: function(_, handleError) {
      this._onError = P._BufferingStreamSubscription__registerErrorHandler(this._zone, handleError);
    },
    pause$1: function(_, resumeSignal) {
      var t2, t3, _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t2 = (t1 + 128 | 4) >>> 0;
      _this._state = t2;
      if (t1 < 128) {
        t3 = _this._async$_pending;
        if (t3 != null)
          if (t3._state === 1)
            t3._state = 3;
      }
      if ((t1 & 4) === 0 && (t2 & 32) === 0)
        _this._guardCallback$1(_this.get$_onPause());
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function(_) {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 = _this._state = t1 - 128;
        if (t1 < 128)
          if ((t1 & 64) !== 0 && _this._async$_pending.lastPendingEvent != null)
            _this._async$_pending.schedule$1(_this);
          else {
            t1 = (t1 & 4294967291) >>> 0;
            _this._state = t1;
            if ((t1 & 32) === 0)
              _this._guardCallback$1(_this.get$_onResume());
          }
      }
    },
    cancel$0: function(_) {
      var _this = this,
        t1 = (_this._state & 4294967279) >>> 0;
      _this._state = t1;
      if ((t1 & 8) === 0)
        _this._cancel$0();
      t1 = _this._cancelFuture;
      return t1 == null ? $.$get$Future__nullFuture() : t1;
    },
    asFuture$1$1: function(futureValue, $E) {
      var result, t1 = {};
      $E._eval$1("0?")._as(futureValue);
      t1.resultValue = null;
      if (!$E._is(null))
        throw H.wrapException(P.ArgumentError$notNull("futureValue"));
      t1.resultValue = $E._as(futureValue);
      result = new P._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this.set$_onDone(new P._BufferingStreamSubscription_asFuture_closure(t1, result));
      this._onError = new P._BufferingStreamSubscription_asFuture_closure0(this, result);
      return result;
    },
    _cancel$0: function() {
      var t2, _this = this,
        t1 = _this._state = (_this._state | 8) >>> 0;
      if ((t1 & 64) !== 0) {
        t2 = _this._async$_pending;
        if (t2._state === 1)
          t2._state = 3;
      }
      if ((t1 & 32) === 0)
        _this.set$_async$_pending(null);
      _this._cancelFuture = _this._onCancel$0();
    },
    _add$1: function(_, data) {
      var t2, _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("_BufferingStreamSubscription.T")._as(data);
      t2 = _this._state;
      if ((t2 & 8) !== 0)
        return;
      if (t2 < 32)
        _this._sendData$1(data);
      else
        _this._addPending$1(new P._DelayedData(data, t1._eval$1("_DelayedData<_BufferingStreamSubscription.T>")));
    },
    _addError$2: function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new P._DelayedError(error, stackTrace));
    },
    _close$0: function() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      _this._state = t1;
      if (t1 < 32)
        _this._sendDone$0();
      else
        _this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: function() {
    },
    _onResume$0: function() {
    },
    _onCancel$0: function() {
      return null;
    },
    _addPending$1: function($event) {
      var _this = this,
        t1 = H._instanceType(_this),
        pending = t1._eval$1("_StreamImplEvents<_BufferingStreamSubscription.T>?")._as(_this._async$_pending);
      if (pending == null)
        pending = new P._StreamImplEvents(t1._eval$1("_StreamImplEvents<_BufferingStreamSubscription.T>"));
      _this.set$_async$_pending(pending);
      pending.add$1(0, $event);
      t1 = _this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        _this._state = t1;
        if (t1 < 128)
          pending.schedule$1(_this);
      }
    },
    _sendData$1: function(data) {
      var t2, _this = this,
        t1 = H._instanceType(_this)._eval$1("_BufferingStreamSubscription.T");
      t1._as(data);
      t2 = _this._state;
      _this._state = (t2 | 32) >>> 0;
      _this._zone.runUnaryGuarded$1$2(_this._onData, data, t1);
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t2 & 4) !== 0);
    },
    _sendError$2: function(error, stackTrace) {
      var cancelFuture, _this = this,
        t1 = _this._state,
        t2 = new P._BufferingStreamSubscription__sendError_sendError(_this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        _this._state = (t1 | 16) >>> 0;
        _this._cancel$0();
        cancelFuture = _this._cancelFuture;
        if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
          cancelFuture.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        _this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0: function() {
      var cancelFuture, _this = this,
        t1 = new P._BufferingStreamSubscription__sendDone_sendDone(_this);
      _this._cancel$0();
      _this._state = (_this._state | 16) >>> 0;
      cancelFuture = _this._cancelFuture;
      if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var t1, _this = this;
      type$.void_Function._as(callback);
      t1 = _this._state;
      _this._state = (t1 | 32) >>> 0;
      callback.call$0();
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t2, isInputPaused, _this = this,
        t1 = _this._state;
      if ((t1 & 64) !== 0 && _this._async$_pending.lastPendingEvent == null) {
        t1 = _this._state = (t1 & 4294967231) >>> 0;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t2 = _this._async$_pending;
            t2 = t2 == null ? null : t2.lastPendingEvent == null;
            t2 = t2 !== false;
          } else
            t2 = false;
        else
          t2 = false;
        if (t2) {
          t1 = (t1 & 4294967291) >>> 0;
          _this._state = t1;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if ((t1 & 8) !== 0) {
          _this.set$_async$_pending(null);
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        _this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          _this._onPause$0();
        else
          _this._onResume$0();
        t1 = (_this._state & 4294967263) >>> 0;
        _this._state = t1;
      }
      if ((t1 & 64) !== 0 && t1 < 128)
        _this._async$_pending.schedule$1(_this);
    },
    set$_onData: function(_onData) {
      this._onData = H._instanceType(this)._eval$1("~(_BufferingStreamSubscription.T)")._as(_onData);
    },
    set$_onDone: function(_onDone) {
      this._onDone = type$.void_Function._as(_onDone);
    },
    set$_async$_pending: function(_pending) {
      this._async$_pending = H._instanceType(this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>?")._as(_pending);
    },
    $isStreamSubscription: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  P._BufferingStreamSubscription_asFuture_closure.prototype = {
    call$0: function() {
      this.result._complete$1(this._box_0.resultValue);
    },
    $signature: 0
  };
  P._BufferingStreamSubscription_asFuture_closure0.prototype = {
    call$2: function(error, stackTrace) {
      var cancelFuture, t1;
      type$.StackTrace._as(stackTrace);
      cancelFuture = this.$this.cancel$0(0);
      t1 = this.result;
      if (cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(new P._BufferingStreamSubscription_asFuture__closure(t1, error, stackTrace));
      else
        t1._completeError$2(error, stackTrace);
    },
    $signature: 11
  };
  P._BufferingStreamSubscription_asFuture__closure.prototype = {
    call$0: function() {
      this.result._completeError$2(this.error, this.stackTrace);
    },
    $signature: 3
  };
  P._BufferingStreamSubscription__sendError_sendError.prototype = {
    call$0: function() {
      var onError, t3, t4,
        t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      onError = t1._onError;
      t2 = this.error;
      t3 = type$.Object;
      t4 = t1._zone;
      if (type$.void_Function_Object_StackTrace._is(onError))
        t4.runBinaryGuarded$2$3(onError, t2, this.stackTrace, t3, type$.StackTrace);
      else
        t4.runUnaryGuarded$1$2(type$.void_Function_Object._as(onError), t2, t3);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    $signature: 0
  };
  P._BufferingStreamSubscription__sendDone_sendDone.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    $signature: 0
  };
  P._StreamImpl.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = this.$ti;
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      return this._async$_controller._subscribe$4(t1._eval$1("~(1)?")._as(onData), onError, onDone, cancelOnError === true);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$3$cancelOnError$onDone: function(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$2$cancelOnError: function(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    }
  };
  P._DelayedEvent.prototype = {
    set$next: function(_, next) {
      this.next = type$.nullable__DelayedEvent_dynamic._as(next);
    },
    get$next: function(receiver) {
      return this.next;
    }
  };
  P._DelayedData.prototype = {
    perform$1: function(dispatch) {
      this.$ti._eval$1("_EventDispatch<1>")._as(dispatch)._sendData$1(this.value);
    }
  };
  P._DelayedError.prototype = {
    perform$1: function(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  };
  P._DelayedDone.prototype = {
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function(_) {
      return null;
    },
    set$next: function(_, _0) {
      throw H.wrapException(P.StateError$("No events after a done."));
    },
    $is_DelayedEvent: 1
  };
  P._PendingEvents.prototype = {
    schedule$1: function(dispatch) {
      var t1, _this = this;
      _this.$ti._eval$1("_EventDispatch<1>")._as(dispatch);
      t1 = _this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        _this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(_this, dispatch));
      _this._state = 1;
    }
  };
  P._PendingEvents_schedule_closure.prototype = {
    call$0: function() {
      var t2, $event, nextEvent,
        t1 = this.$this,
        oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t2 = t1.$ti._eval$1("_EventDispatch<1>")._as(this.dispatch);
      $event = t1.firstPendingEvent;
      nextEvent = $event.get$next($event);
      t1.firstPendingEvent = nextEvent;
      if (nextEvent == null)
        t1.lastPendingEvent = null;
      $event.perform$1(t2);
    },
    $signature: 0
  };
  P._StreamImplEvents.prototype = {
    add$1: function(_, $event) {
      var _this = this,
        lastEvent = _this.lastPendingEvent;
      if (lastEvent == null)
        _this.firstPendingEvent = _this.lastPendingEvent = $event;
      else {
        lastEvent.set$next(0, $event);
        _this.lastPendingEvent = $event;
      }
    }
  };
  P._DoneStreamSubscription.prototype = {
    _schedule$0: function() {
      var _this = this;
      if ((_this._state & 2) !== 0)
        return;
      P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(_this.get$_sendDone()));
      _this._state = (_this._state | 2) >>> 0;
    },
    onData$1: function(handleData) {
      this.$ti._eval$1("~(1)?")._as(handleData);
    },
    onError$1: function(_, handleError) {
    },
    pause$1: function(_, resumeSignal) {
      this._state += 4;
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function(_) {
      var t1 = this._state;
      if (t1 >= 4) {
        t1 = this._state = t1 - 4;
        if (t1 < 4 && (t1 & 1) === 0)
          this._schedule$0();
      }
    },
    cancel$0: function(_) {
      return $.$get$Future__nullFuture();
    },
    asFuture$1$1: function(futureValue, $E) {
      var result, t1 = {};
      $E._eval$1("0?")._as(futureValue);
      t1.resultValue = null;
      if (!$E._is(null))
        throw H.wrapException(P.ArgumentError$notNull("futureValue"));
      t1.resultValue = $E._as(futureValue);
      result = new P._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this.set$_onDone(new P._DoneStreamSubscription_asFuture_closure(t1, result));
      return result;
    },
    _sendDone$0: function() {
      var doneHandler, _this = this,
        t1 = _this._state = (_this._state & 4294967293) >>> 0;
      if (t1 >= 4)
        return;
      _this._state = (t1 | 1) >>> 0;
      doneHandler = _this._onDone;
      if (doneHandler != null)
        _this._zone.runGuarded$1(doneHandler);
    },
    set$_onDone: function(_onDone) {
      this._onDone = type$.nullable_void_Function._as(_onDone);
    },
    $isStreamSubscription: 1
  };
  P._DoneStreamSubscription_asFuture_closure.prototype = {
    call$0: function() {
      this.result._completeWithValue$1(this._box_0.resultValue);
    },
    $signature: 0
  };
  P._StreamIterator.prototype = {};
  P._EmptyStream.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = this.$ti;
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      t1 = new P._DoneStreamSubscription($.Zone__current, onDone, t1._eval$1("_DoneStreamSubscription<1>"));
      t1._schedule$0();
      return t1;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$3$cancelOnError$onDone: function(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$2$cancelOnError: function(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    }
  };
  P._ForwardingStream.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t2, t3, t4,
        t1 = H._instanceType(this);
      t1._eval$1("~(_ForwardingStream.T)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      t2 = t1._eval$1("_ForwardingStream.T");
      t3 = $.Zone__current;
      t4 = cancelOnError === true ? 1 : 0;
      t2 = new P._ForwardingStreamSubscription(this, P._BufferingStreamSubscription__registerDataHandler(t3, onData, t2), P._BufferingStreamSubscription__registerErrorHandler(t3, onError), P._BufferingStreamSubscription__registerDoneHandler(t3, onDone), t3, t4, t1._eval$1("@<_ForwardingStream.S>")._bind$1(t2)._eval$1("_ForwardingStreamSubscription<1,2>"));
      t2.set$_async$_subscription(this._async$_source.listen$3$onDone$onError(t2.get$_handleData(), t2.get$_handleDone(), t2.get$_handleError()));
      return t2;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$3$cancelOnError$onDone: function(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$2$cancelOnError: function(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    },
    _handleError$3: function(error, stackTrace, sink) {
      H._instanceType(this)._eval$1("_EventSink<_ForwardingStream.T>")._as(sink)._addError$2(error, stackTrace);
    }
  };
  P._ForwardingStreamSubscription.prototype = {
    _add$1: function(_, data) {
      this.$ti._rest[1]._as(data);
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_add(0, data);
    },
    _addError$2: function(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
    },
    _onPause$0: function() {
      var t1 = this._async$_subscription;
      if (t1 != null)
        t1.pause$0(0);
    },
    _onResume$0: function() {
      var t1 = this._async$_subscription;
      if (t1 != null)
        t1.resume$0(0);
    },
    _onCancel$0: function() {
      var subscription = this._async$_subscription;
      if (subscription != null) {
        this.set$_async$_subscription(null);
        return subscription.cancel$0(0);
      }
      return null;
    },
    _handleData$1: function(data) {
      this._stream._handleData$2(this.$ti._precomputed1._as(data), this);
    },
    _handleError$2: function(error, stackTrace) {
      type$.StackTrace._as(stackTrace);
      this._stream._handleError$3(type$.Object._as(error), stackTrace, this);
    },
    _handleDone$0: function() {
      H._instanceType(this._stream)._eval$1("_EventSink<_ForwardingStream.T>")._as(this)._close$0();
    },
    set$_async$_subscription: function(_subscription) {
      this._async$_subscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_subscription);
    }
  };
  P._MapStream.prototype = {
    _handleData$2: function(inputEvent, sink) {
      var outputEvent, e, s, exception,
        t1 = this.$ti;
      t1._precomputed1._as(inputEvent);
      t1._eval$1("_EventSink<2>")._as(sink);
      outputEvent = null;
      try {
        outputEvent = this._transform.call$1(inputEvent);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._addErrorWithReplacement(sink, e, s);
        return;
      }
      sink._add$1(0, outputEvent);
    }
  };
  P._HandleErrorStream.prototype = {
    _handleData$2: function(data, sink) {
      var t1 = this.$ti;
      t1._precomputed1._as(data);
      t1._eval$1("_EventSink<1>")._as(sink)._add$1(0, data);
    },
    _handleError$3: function(error, stackTrace, sink) {
      var matches, test, e, s, e0, s0, exception;
      this.$ti._eval$1("_EventSink<1>")._as(sink);
      matches = true;
      test = this._test;
      if (test != null)
        try {
          matches = test.call$1(error);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          P._addErrorWithReplacement(sink, e, s);
          return;
        }
      if (H.boolConversionCheck(matches))
        try {
          P._invokeErrorHandler(this._transform, error, stackTrace);
        } catch (exception) {
          e0 = H.unwrapException(exception);
          s0 = H.getTraceFromException(exception);
          if (e0 === error)
            sink._addError$2(error, stackTrace);
          else
            P._addErrorWithReplacement(sink, e0, s0);
          return;
        }
      else
        sink._addError$2(error, stackTrace);
    }
  };
  P._EventSinkWrapper.prototype = {
    add$1: function(_, data) {
      var t1 = this._async$_sink;
      data = t1.$ti._rest[1]._as(this.$ti._precomputed1._as(data));
      if ((t1._state & 2) !== 0)
        H.throwExpression(P.StateError$("Stream is already closed"));
      t1.super$_BufferingStreamSubscription$_add(0, data);
    },
    addError$2: function(error, stackTrace) {
      var t1 = this._async$_sink;
      if ((t1._state & 2) !== 0)
        H.throwExpression(P.StateError$("Stream is already closed"));
      t1.super$_BufferingStreamSubscription$_addError(error, stackTrace);
    },
    close$0: function(_) {
      var t1 = this._async$_sink;
      if ((t1._state & 2) !== 0)
        H.throwExpression(P.StateError$("Stream is already closed"));
      t1.super$_BufferingStreamSubscription$_close();
    },
    $isEventSink: 1,
    $isSink: 1
  };
  P._SinkTransformerStreamSubscription.prototype = {
    get$_transformerSink: function() {
      var t1 = this.___SinkTransformerStreamSubscription__transformerSink;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_transformerSink")) : t1;
    },
    _onPause$0: function() {
      var t1 = this._async$_subscription;
      if (t1 != null)
        t1.pause$0(0);
    },
    _onResume$0: function() {
      var t1 = this._async$_subscription;
      if (t1 != null)
        t1.resume$0(0);
    },
    _onCancel$0: function() {
      var subscription = this._async$_subscription;
      if (subscription != null) {
        this.set$_async$_subscription(null);
        return subscription.cancel$0(0);
      }
      return null;
    },
    _handleData$1: function(data) {
      var e, s, exception, t1, t2, _this = this;
      _this.$ti._precomputed1._as(data);
      try {
        _this.get$_transformerSink().add$1(0, data);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = type$.Object._as(e);
        t2 = type$.StackTrace._as(s);
        if ((_this._state & 2) !== 0)
          H.throwExpression(P.StateError$("Stream is already closed"));
        _this.super$_BufferingStreamSubscription$_addError(t1, t2);
      }
    },
    _handleError$2: function(error, stackTrace) {
      var e, s, t2, exception, _this = this,
        _s24_ = "Stream is already closed",
        t1 = type$.Object;
      t1._as(error);
      t2 = type$.StackTrace;
      t2._as(stackTrace);
      try {
        _this.get$_transformerSink().addError$2(error, stackTrace);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (e === error) {
          if ((_this._state & 2) !== 0)
            H.throwExpression(P.StateError$(_s24_));
          _this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
        } else {
          t1 = t1._as(e);
          t2 = t2._as(s);
          if ((_this._state & 2) !== 0)
            H.throwExpression(P.StateError$(_s24_));
          _this.super$_BufferingStreamSubscription$_addError(t1, t2);
        }
      }
    },
    _handleDone$0: function() {
      var e, s, exception, t1, t2, _this = this;
      try {
        _this.set$_async$_subscription(null);
        _this.get$_transformerSink().close$0(0);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = type$.Object._as(e);
        t2 = type$.StackTrace._as(s);
        if ((_this._state & 2) !== 0)
          H.throwExpression(P.StateError$("Stream is already closed"));
        _this.super$_BufferingStreamSubscription$_addError(t1, t2);
      }
    },
    set$___SinkTransformerStreamSubscription__transformerSink: function(___SinkTransformerStreamSubscription__transformerSink) {
      this.___SinkTransformerStreamSubscription__transformerSink = this.$ti._eval$1("EventSink<1>?")._as(___SinkTransformerStreamSubscription__transformerSink);
    },
    set$_async$_subscription: function(_subscription) {
      this._async$_subscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_subscription);
    }
  };
  P._BoundSinkStream.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t2, t3, t4, t5, subscription,
        t1 = this.$ti;
      t1._eval$1("~(2)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      t2 = t1._rest[1];
      t3 = $.Zone__current;
      t4 = cancelOnError === true ? 1 : 0;
      t5 = t1._eval$1("@<1>")._bind$1(t2);
      subscription = new P._SinkTransformerStreamSubscription(P._BufferingStreamSubscription__registerDataHandler(t3, onData, t2), P._BufferingStreamSubscription__registerErrorHandler(t3, onError), P._BufferingStreamSubscription__registerDoneHandler(t3, onDone), t3, t4, t5._eval$1("_SinkTransformerStreamSubscription<1,2>"));
      subscription.set$___SinkTransformerStreamSubscription__transformerSink(t5._eval$1("EventSink<1>")._as(this._sinkMapper.call$1(new P._EventSinkWrapper(subscription, t1._eval$1("_EventSinkWrapper<2>")))));
      subscription.set$_async$_subscription(this._stream.listen$3$onDone$onError(subscription.get$_handleData(), subscription.get$_handleDone(), subscription.get$_handleError()));
      return subscription;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$3$cancelOnError$onDone: function(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$2$cancelOnError: function(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    }
  };
  P._Zone.prototype = {$isZone: 1};
  P._rootHandleUncaughtError_closure.prototype = {
    call$0: function() {
      var error = type$.Object._as(H.wrapException(this.error));
      error.stack = this.stackTrace.toString$0(0);
      throw error;
    },
    $signature: 0
  };
  P._RootZone.prototype = {
    runGuarded$1: function(f) {
      var e, s, exception, _null = null;
      type$.void_Function._as(f);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        P._rootRun(_null, _null, this, f, type$.void);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runUnaryGuarded$1$2: function(f, arg, $T) {
      var e, s, exception, _null = null;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        P._rootRunUnary(_null, _null, this, f, arg, type$.void, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runBinaryGuarded$2$3: function(f, arg1, arg2, T1, T2) {
      var e, s, exception, _null = null;
      T1._eval$1("@<0>")._bind$1(T2)._eval$1("~(1,2)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$2(arg1, arg2);
          return;
        }
        P._rootRunBinary(_null, _null, this, f, arg1, arg2, type$.void, T1, T2);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    bindCallbackGuarded$1: function(f) {
      return new P._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    $index: function(_, key) {
      return null;
    },
    run$1$1: function(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerBinaryCallback$3$1: function(f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    }
  };
  P._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 0
  };
  P._HashMap.prototype = {
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$keys: function(_) {
      return new P._HashMapKeyIterable(this, H._instanceType(this)._eval$1("_HashMapKeyIterable<1>"));
    },
    containsKey$1: function(_, key) {
      var strings, t1;
      if (key !== "__proto__") {
        strings = this._collection$_strings;
        return strings == null ? false : strings[key] != null;
      } else {
        t1 = this._containsKey$1(key);
        return t1;
      }
    },
    _containsKey$1: function(key) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, key), key) >= 0;
    },
    $index: function(_, key) {
      var strings, t1, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        t1 = strings == null ? null : P._HashMap__getTableEntry(strings, key);
        return t1;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        t1 = nums == null ? null : P._HashMap__getTableEntry(nums, key);
        return t1;
      } else
        return this._get$1(0, key);
    },
    _get$1: function(_, key) {
      var bucket, index,
        rest = this._collection$_rest;
      if (rest == null)
        return null;
      bucket = this._getBucket$2(rest, key);
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string" && key !== "__proto__") {
        strings = _this._collection$_strings;
        _this._collection$_addHashTableEntry$3(strings == null ? _this._collection$_strings = P._HashMap__newHashTable() : strings, key, value);
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = _this._collection$_nums;
        _this._collection$_addHashTableEntry$3(nums == null ? _this._collection$_nums = P._HashMap__newHashTable() : nums, key, value);
      } else
        _this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._HashMap__newHashTable();
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        ++_this._collection$_length;
        _this._keys = null;
      } else {
        index = _this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++_this._collection$_length;
          _this._keys = null;
        }
      }
    },
    putIfAbsent$2: function(_, key, ifAbsent) {
      var value, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._eval$1("2()")._as(ifAbsent);
      if (_this.containsKey$1(0, key))
        return t1._rest[1]._as(_this.$index(0, key));
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1: function(_, key) {
      var t1;
      if (key !== "__proto__")
        return this._collection$_removeHashTableEntry$2(this._collection$_strings, key);
      else {
        t1 = this._remove$1(0, key);
        return t1;
      }
    },
    _remove$1: function(_, key) {
      var hash, bucket, index, result, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return null;
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      --_this._collection$_length;
      _this._keys = null;
      result = bucket.splice(index, 2)[1];
      if (0 === bucket.length)
        delete rest[hash];
      return result;
    },
    forEach$1: function(_, action) {
      var keys, $length, t2, i, key, _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("~(1,2)")._as(action);
      keys = _this._computeKeys$0();
      for ($length = keys.length, t2 = t1._precomputed1, t1 = t1._rest[1], i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(t2._as(key), t1._as(_this.$index(0, key)));
        if (keys !== _this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0: function() {
      var strings, names, entries, index, i, nums, rest, bucket, $length, i0, _this = this,
        result = _this._keys;
      if (result != null)
        return result;
      result = P.List_List$filled(_this._collection$_length, null, false, type$.dynamic);
      strings = _this._collection$_strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = _this._collection$_nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._keys = result;
    },
    _collection$_addHashTableEntry$3: function(table, key, value) {
      var t1 = H._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (table[key] == null) {
        ++this._collection$_length;
        this._keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _collection$_removeHashTableEntry$2: function(table, key) {
      var value;
      if (table != null && table[key] != null) {
        value = H._instanceType(this)._rest[1]._as(P._HashMap__getTableEntry(table, key));
        delete table[key];
        --this._collection$_length;
        this._keys = null;
        return value;
      } else
        return null;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    _getBucket$2: function(table, key) {
      return table[this._computeHashCode$1(key)];
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq$(bucket[i], key))
          return i;
      return -1;
    }
  };
  P._HashMapKeyIterable.prototype = {
    get$length: function(_) {
      return this._collection$_map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._collection$_map;
      return new P._HashMapKeyIterator(t1, t1._computeKeys$0(), this.$ti._eval$1("_HashMapKeyIterator<1>"));
    }
  };
  P._HashMapKeyIterator.prototype = {
    get$current: function(_) {
      return this.$ti._precomputed1._as(this._collection$_current);
    },
    moveNext$0: function() {
      var _this = this,
        keys = _this._keys,
        offset = _this._offset,
        t1 = _this._collection$_map;
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(keys[offset]);
        _this._offset = offset + 1;
        return true;
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  P._HashSet.prototype = {
    get$iterator: function(_) {
      return new P._HashSetIterator(this, this._computeElements$0(), H._instanceType(this)._eval$1("_HashSetIterator<1>"));
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    add$1: function(_, element) {
      var t1;
      H._instanceType(this)._precomputed1._as(element);
      t1 = this._collection$_add$1(0, element);
      return t1;
    },
    _collection$_add$1: function(_, element) {
      var rest, hash, bucket, _this = this;
      H._instanceType(_this)._precomputed1._as(element);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._HashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      ++_this._collection$_length;
      _this._elements = null;
      return true;
    },
    remove$1: function(_, object) {
      var t1 = this._remove$1(0, object);
      return t1;
    },
    _remove$1: function(_, object) {
      var hash, bucket, index, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      hash = _this._computeHashCode$1(object);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      --_this._collection$_length;
      _this._elements = null;
      bucket.splice(index, 1);
      if (0 === bucket.length)
        delete rest[hash];
      return true;
    },
    _computeElements$0: function() {
      var strings, names, entries, index, i, nums, rest, bucket, $length, i0, _this = this,
        result = _this._elements;
      if (result != null)
        return result;
      result = P.List_List$filled(_this._collection$_length, null, false, type$.dynamic);
      strings = _this._collection$_strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = _this._collection$_nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; ++i0) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._elements = result;
    },
    _computeHashCode$1: function(element) {
      return H.Primitives_objectHashCode(element) & 1073741823;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i], element))
          return i;
      return -1;
    }
  };
  P._HashSetIterator.prototype = {
    get$current: function(_) {
      return this.$ti._precomputed1._as(this._collection$_current);
    },
    moveNext$0: function() {
      var _this = this,
        elements = _this._elements,
        offset = _this._offset,
        t1 = _this._set;
      if (elements !== t1._elements)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= elements.length) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(elements[offset]);
        _this._offset = offset + 1;
        return true;
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  P.HashMap_HashMap$from_closure.prototype = {
    call$2: function(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 30
  };
  P.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2: function(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 30
  };
  P.ListBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  P.ListMixin.prototype = {
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), H.instanceType(receiver)._eval$1("ListIterator<ListMixin.E>"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    get$isEmpty: function(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty: function(receiver) {
      return this.get$length(receiver) !== 0;
    },
    contains$1: function(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(this.$index(receiver, i), element))
          return true;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.instanceType(receiver);
      return new H.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(ListMixin.E)")._as(f), t1._eval$1("@<ListMixin.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    skip$1: function(receiver, count) {
      return H.SubListIterable$(receiver, count, null, H.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    add$1: function(receiver, element) {
      var t1;
      H.instanceType(receiver)._eval$1("ListMixin.E")._as(element);
      t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    remove$1: function(receiver, element) {
      var i;
      for (i = 0; i < this.get$length(receiver); ++i)
        if (J.$eq$(this.$index(receiver, i), element)) {
          this._closeGap$2(receiver, i, i + 1);
          return true;
        }
      return false;
    },
    _closeGap$2: function(receiver, start, end) {
      var i, _this = this,
        $length = _this.get$length(receiver),
        size = end - start;
      for (i = end; i < $length; ++i)
        _this.$indexSet(receiver, i - size, _this.$index(receiver, i));
      _this.set$length(receiver, $length - size);
    },
    fillRange$3: function(receiver, start, end, fill) {
      var i,
        t1 = H.instanceType(receiver);
      fill = t1._eval$1("ListMixin.E")._as(t1._eval$1("ListMixin.E?")._as(fill));
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, fill);
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, i,
        t1 = H.instanceType(receiver);
      t1._eval$1("Iterable<ListMixin.E>")._as(iterable);
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      if (t1._eval$1("List<ListMixin.E>")._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2: function(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += H.S(k);
      t1._contents = t2 + ": ";
      t1._contents += H.S(v);
    },
    $signature: 31
  };
  P.MapMixin.prototype = {
    forEach$1: function(receiver, action) {
      var t2, key,
        t1 = H.instanceType(receiver);
      t1._eval$1("~(MapMixin.K,MapMixin.V)")._as(action);
      for (t2 = J.get$iterator$ax(this.get$keys(receiver)), t1 = t1._eval$1("MapMixin.V"); t2.moveNext$0();) {
        key = t2.get$current(t2);
        action.call$2(key, t1._as(this.$index(receiver, key)));
      }
    },
    get$entries: function(receiver) {
      return J.map$1$1$ax(this.get$keys(receiver), new P.MapMixin_entries_closure(receiver), H.instanceType(receiver)._eval$1("MapEntry<MapMixin.K,MapMixin.V>"));
    },
    get$length: function(receiver) {
      return J.get$length$asx(this.get$keys(receiver));
    },
    get$isEmpty: function(receiver) {
      return J.get$isEmpty$asx(this.get$keys(receiver));
    },
    toString$0: function(receiver) {
      return P.MapBase_mapToString(receiver);
    },
    $isMap: 1
  };
  P.MapMixin_entries_closure.prototype = {
    call$1: function(key) {
      var t3,
        t1 = this.$this,
        t2 = H.instanceType(t1);
      t2._eval$1("MapMixin.K")._as(key);
      t3 = t2._eval$1("MapMixin.V");
      return new P.MapEntry(key, t3._as(J.$index$asx(t1, key)), t2._eval$1("@<MapMixin.K>")._bind$1(t3)._eval$1("MapEntry<1,2>"));
    },
    $signature: function() {
      return H.instanceType(this.$this)._eval$1("MapEntry<MapMixin.K,MapMixin.V>(MapMixin.K)");
    }
  };
  P._UnmodifiableMapMixin.prototype = {};
  P.MapView.prototype = {
    $index: function(_, key) {
      return this._collection$_map.$index(0, key);
    },
    forEach$1: function(_, action) {
      this._collection$_map.forEach$1(0, this.$ti._eval$1("~(1,2)")._as(action));
    },
    get$isEmpty: function(_) {
      var t1 = this._collection$_map;
      return t1.get$isEmpty(t1);
    },
    get$length: function(_) {
      var t1 = this._collection$_map;
      return t1.get$length(t1);
    },
    toString$0: function(_) {
      var t1 = this._collection$_map;
      return t1.toString$0(t1);
    },
    $isMap: 1
  };
  P.UnmodifiableMapView.prototype = {};
  P.ListQueue.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return new P._ListQueueIterator(_this, _this._tail, _this._modificationCount, _this._head, _this.$ti._eval$1("_ListQueueIterator<1>"));
    },
    get$isEmpty: function(_) {
      return this._head === this._tail;
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    elementAt$1: function(_, index) {
      var t1, t2, t3, _this = this,
        $length = _this.get$length(_this);
      if (0 > index || index >= $length)
        H.throwExpression(P.IndexError$(index, _this, "index", null, $length));
      t1 = _this._table;
      t2 = t1.length;
      t3 = (_this._head + index & t2 - 1) >>> 0;
      if (t3 < 0 || t3 >= t2)
        return H.ioore(t1, t3);
      return _this.$ti._precomputed1._as(t1[t3]);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    $isQueue: 1
  };
  P._ListQueueIterator.prototype = {
    get$current: function(_) {
      return this.$ti._precomputed1._as(this._collection$_current);
    },
    moveNext$0: function() {
      var t2, t3, _this = this,
        t1 = _this._queue;
      if (_this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = _this._collection$_position;
      if (t2 === _this._end) {
        _this.set$_collection$_current(null);
        return false;
      }
      t3 = t1._table;
      if (t2 >= t3.length)
        return H.ioore(t3, t2);
      _this.set$_collection$_current(t3[t2]);
      _this._collection$_position = (_this._collection$_position + 1 & t1._table.length - 1) >>> 0;
      return true;
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  P.SetMixin.prototype = {
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    map$1$1: function(_, f, $T) {
      var t1 = H._instanceType(this);
      return new H.EfficientLengthMappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    }
  };
  P._SetBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isSet: 1};
  P._ListBase_Object_ListMixin.prototype = {};
  P._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  P.__SetBase_Object_SetMixin.prototype = {};
  P._JsonMap.prototype = {
    $index: function(_, key) {
      var result,
        t1 = this._processed;
      if (t1 == null)
        return this._data.$index(0, key);
      else if (typeof key != "string")
        return null;
      else {
        result = t1[key];
        return typeof result == "undefined" ? this._process$1(key) : result;
      }
    },
    get$length: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        t1 = t1.get$length(t1);
      } else
        t1 = this._convert$_computeKeys$0().length;
      return t1;
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$keys: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        return t1.get$keys(t1);
      }
      return new P._JsonMapKeyIterable(this);
    },
    forEach$1: function(_, f) {
      var keys, i, key, value, _this = this;
      type$.void_Function_String_dynamic._as(f);
      if (_this._processed == null)
        return _this._data.forEach$1(0, f);
      keys = _this._convert$_computeKeys$0();
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        value = _this._processed[key];
        if (typeof value == "undefined") {
          value = P._convertJsonToDartLazy(_this._original[key]);
          _this._processed[key] = value;
        }
        f.call$2(key, value);
        if (keys !== _this._data)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    _convert$_computeKeys$0: function() {
      var keys = type$.nullable_List_dynamic._as(this._data);
      if (keys == null)
        keys = this._data = H.setRuntimeTypeInfo(Object.keys(this._original), type$.JSArray_String);
      return keys;
    },
    _process$1: function(key) {
      var result;
      if (!Object.prototype.hasOwnProperty.call(this._original, key))
        return null;
      result = P._convertJsonToDartLazy(this._original[key]);
      return this._processed[key] = result;
    }
  };
  P._JsonMapKeyIterable.prototype = {
    get$length: function(_) {
      var t1 = this._convert$_parent;
      return t1.get$length(t1);
    },
    elementAt$1: function(_, index) {
      var t1 = this._convert$_parent;
      if (t1._processed == null)
        t1 = t1.get$keys(t1).elementAt$1(0, index);
      else {
        t1 = t1._convert$_computeKeys$0();
        if (index < 0 || index >= t1.length)
          return H.ioore(t1, index);
        t1 = t1[index];
      }
      return t1;
    },
    get$iterator: function(_) {
      var t1 = this._convert$_parent;
      if (t1._processed == null) {
        t1 = t1.get$keys(t1);
        t1 = t1.get$iterator(t1);
      } else {
        t1 = t1._convert$_computeKeys$0();
        t1 = new J.ArrayIterator(t1, t1.length, H._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
      }
      return t1;
    }
  };
  P._JsonDecoderSink.prototype = {
    close$0: function(_) {
      var t1, t2, t3, _this = this,
        _s24_ = "Stream is already closed";
      _this.super$_StringSinkConversionSink$close(0);
      t1 = _this._stringSink;
      t2 = t1._contents;
      t1._contents = "";
      t1 = _this._convert$_sink;
      t3 = t1._async$_sink;
      t2 = t3.$ti._rest[1]._as(t1.$ti._precomputed1._as(P._parseJson(t2.charCodeAt(0) == 0 ? t2 : t2, _this._reviver)));
      if ((t3._state & 2) !== 0)
        H.throwExpression(P.StateError$(_s24_));
      t3.super$_BufferingStreamSubscription$_add(0, t2);
      if ((t3._state & 2) !== 0)
        H.throwExpression(P.StateError$(_s24_));
      t3.super$_BufferingStreamSubscription$_close();
    }
  };
  P.Base64Codec.prototype = {
    normalize$3: function(_, source, start, end) {
      var inverseAlphabet, t1, i, sliceStart, buffer, firstPadding, firstPaddingSourceIndex, paddingCount, i0, char, i1, digit1, digit2, char0, value, t2, t3, endLength, $length,
        _s31_ = "Invalid base64 encoding length ";
      end = P.RangeError_checkValidRange(start, end, source.length);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      for (t1 = inverseAlphabet.length, i = start, sliceStart = i, buffer = null, firstPadding = -1, firstPaddingSourceIndex = -1, paddingCount = 0; i < end; i = i0) {
        i0 = i + 1;
        char = C.JSString_methods._codeUnitAt$1(source, i);
        if (char === 37) {
          i1 = i0 + 2;
          if (i1 <= end) {
            digit1 = H.hexDigitValue(C.JSString_methods._codeUnitAt$1(source, i0));
            digit2 = H.hexDigitValue(C.JSString_methods._codeUnitAt$1(source, i0 + 1));
            char0 = digit1 * 16 + digit2 - (digit2 & 256);
            if (char0 === 37)
              char0 = -1;
            i0 = i1;
          } else
            char0 = -1;
        } else
          char0 = char;
        if (0 <= char0 && char0 <= 127) {
          if (char0 < 0 || char0 >= t1)
            return H.ioore(inverseAlphabet, char0);
          value = inverseAlphabet[char0];
          if (value >= 0) {
            char0 = C.JSString_methods.codeUnitAt$1(string$.ABCDEF, value);
            if (char0 === char)
              continue;
            char = char0;
          } else {
            if (value === -1) {
              if (firstPadding < 0) {
                t2 = buffer == null ? null : buffer._contents.length;
                if (t2 == null)
                  t2 = 0;
                firstPadding = t2 + (i - sliceStart);
                firstPaddingSourceIndex = i;
              }
              ++paddingCount;
              if (char === 61)
                continue;
            }
            char = char0;
          }
          if (value !== -2) {
            if (buffer == null) {
              buffer = new P.StringBuffer("");
              t2 = buffer;
            } else
              t2 = buffer;
            t3 = t2._contents += C.JSString_methods.substring$2(source, sliceStart, i);
            t2._contents = t3 + H.Primitives_stringFromCharCode(char);
            sliceStart = i0;
            continue;
          }
        }
        throw H.wrapException(P.FormatException$("Invalid base64 data", source, i));
      }
      if (buffer != null) {
        t1 = buffer._contents += C.JSString_methods.substring$2(source, sliceStart, end);
        t2 = t1.length;
        if (firstPadding >= 0)
          P.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, t2);
        else {
          endLength = C.JSInt_methods.$mod(t2 - 1, 4) + 1;
          if (endLength === 1)
            throw H.wrapException(P.FormatException$(_s31_, source, end));
          for (; endLength < 4;) {
            t1 += "=";
            buffer._contents = t1;
            ++endLength;
          }
        }
        t1 = buffer._contents;
        return C.JSString_methods.replaceRange$3(source, start, end, t1.charCodeAt(0) == 0 ? t1 : t1);
      }
      $length = end - start;
      if (firstPadding >= 0)
        P.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, $length);
      else {
        endLength = C.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw H.wrapException(P.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = C.JSString_methods.replaceRange$3(source, end, end, endLength === 2 ? "==" : "=");
      }
      return source;
    }
  };
  P.Base64Encoder.prototype = {
    startChunkedConversion$1: function(sink) {
      type$.Sink_String._as(sink);
      return new P._AsciiBase64EncoderSink(sink, new P._BufferCachingBase64Encoder(string$.ABCDEF));
    }
  };
  P._Base64Encoder.prototype = {
    createBuffer$1: function(_, bufferLength) {
      return new Uint8Array(bufferLength);
    },
    encode$4: function(bytes, start, end, isLast) {
      var byteCount, fullChunks, bufferLength, output, _this = this;
      type$.List_int._as(bytes);
      byteCount = (_this._convert$_state & 3) + (end - start);
      fullChunks = C.JSInt_methods._tdivFast$1(byteCount, 3);
      bufferLength = fullChunks * 4;
      if (isLast && byteCount - fullChunks * 3 > 0)
        bufferLength += 4;
      output = _this.createBuffer$1(0, bufferLength);
      _this._convert$_state = P._Base64Encoder_encodeChunk(_this._alphabet, bytes, start, end, isLast, output, 0, _this._convert$_state);
      if (bufferLength > 0)
        return output;
      return null;
    }
  };
  P._BufferCachingBase64Encoder.prototype = {
    createBuffer$1: function(_, bufferLength) {
      var buffer = this.bufferCache;
      if (buffer == null || buffer.length < bufferLength)
        buffer = this.bufferCache = new Uint8Array(bufferLength);
      if (buffer == null)
        throw H.wrapException("unreachable");
      return H.NativeUint8List_NativeUint8List$view(buffer.buffer, buffer.byteOffset, bufferLength);
    }
  };
  P._Base64EncoderSink.prototype = {
    add$1: function(_, source) {
      type$.List_int._as(source);
      this._convert$_add$4(0, source, 0, J.get$length$asx(source), false);
    },
    close$0: function(_) {
      this._convert$_add$4(0, C.List_empty, 0, 0, true);
    }
  };
  P._AsciiBase64EncoderSink.prototype = {
    _convert$_add$4: function(_, source, start, end, isLast) {
      var t1, t2,
        _s24_ = "Stream is already closed",
        buffer = this._encoder.encode$4(type$.List_int._as(source), start, end, isLast);
      if (buffer != null) {
        t1 = this._convert$_sink;
        t2 = t1._async$_sink;
        t1 = t2.$ti._rest[1]._as(t1.$ti._precomputed1._as(P.String_String$fromCharCodes(buffer, 0, null)));
        if ((t2._state & 2) !== 0)
          H.throwExpression(P.StateError$(_s24_));
        t2.super$_BufferingStreamSubscription$_add(0, t1);
      }
      if (isLast) {
        t1 = this._convert$_sink._async$_sink;
        if ((t1._state & 2) !== 0)
          H.throwExpression(P.StateError$(_s24_));
        t1.super$_BufferingStreamSubscription$_close();
      }
    }
  };
  P.ByteConversionSink.prototype = {};
  P.ByteConversionSinkBase.prototype = {};
  P._ByteAdapterSink.prototype = {
    add$1: function(_, chunk) {
      this._convert$_sink.add$1(0, type$.List_int._as(chunk));
    },
    close$0: function(_) {
      this._convert$_sink.close$0(0);
    }
  };
  P.ChunkedConversionSink.prototype = {$isSink: 1};
  P._ConverterStreamEventSink.prototype = {
    add$1: function(_, o) {
      this._chunkedSink.add$1(0, this.$ti._precomputed1._as(o));
    },
    addError$2: function(error, stackTrace) {
      H.checkNotNullable(error, "error", type$.Object);
      this._eventSink.addError$2(error, stackTrace);
    },
    close$0: function(_) {
      this._chunkedSink.close$0(0);
    },
    $isEventSink: 1,
    $isSink: 1
  };
  P.Codec.prototype = {};
  P.Converter.prototype = {
    startChunkedConversion$1: function(sink) {
      H._instanceType(this)._eval$1("Sink<Converter.T>")._as(sink);
      throw H.wrapException(P.UnsupportedError$("This converter does not support chunked conversions: " + this.toString$0(0)));
    },
    bind$1: function(stream) {
      var t1 = H._instanceType(this);
      return new P._BoundSinkStream(new P.Converter_bind_closure(this), t1._eval$1("Stream<Converter.S>")._as(stream), type$.$env_1_1_dynamic._bind$1(t1._eval$1("Converter.T"))._eval$1("_BoundSinkStream<1,2>"));
    }
  };
  P.Converter_bind_closure.prototype = {
    call$1: function(sink) {
      return new P._ConverterStreamEventSink(sink, this.$this.startChunkedConversion$1(sink), type$._ConverterStreamEventSink_dynamic_dynamic);
    },
    $signature: 73
  };
  P.Encoding.prototype = {};
  P.JsonUnsupportedObjectError.prototype = {
    toString$0: function(_) {
      var safeString = P.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  P.JsonCyclicError.prototype = {
    toString$0: function(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  P.JsonCodec.prototype = {
    decode$1: function(_, source) {
      var t1 = P._parseJson(source, this.get$decoder()._reviver);
      return t1;
    },
    encode$1: function(value) {
      var t1 = P._JsonStringStringifier_stringify(value, this.get$encoder()._toEncodable, null);
      return t1;
    },
    get$encoder: function() {
      return C.JsonEncoder_null;
    },
    get$decoder: function() {
      return C.JsonDecoder_null;
    }
  };
  P.JsonEncoder.prototype = {
    startChunkedConversion$1: function(sink) {
      type$.Sink_String._as(sink);
      return new P._JsonEncoderSink(null, this._toEncodable, new P._StringAdapterSink(sink));
    }
  };
  P._JsonEncoderSink.prototype = {
    add$1: function(_, o) {
      var t1, t2, stringSink, _this = this;
      if (_this._isDone)
        throw H.wrapException(P.StateError$("Only one call to add allowed"));
      _this._isDone = true;
      t1 = _this._convert$_sink;
      t2 = new P.StringBuffer("");
      stringSink = new P._StringConversionSinkAsStringSinkAdapter(t2, t1);
      P._JsonStringStringifier_printOn(o, stringSink, _this._toEncodable, _this._indent);
      if (t2._contents.length !== 0)
        stringSink._flush$0();
      t1.close$0(0);
    },
    close$0: function(_) {
    }
  };
  P.JsonDecoder.prototype = {
    startChunkedConversion$1: function(sink) {
      return new P._JsonDecoderSink(this._reviver, sink, new P.StringBuffer(""));
    }
  };
  P._JsonStringifier.prototype = {
    writeStringContent$1: function(s) {
      var offset, i, charCode, t1, t2, _this = this,
        $length = s.length;
      for (offset = 0, i = 0; i < $length; ++i) {
        charCode = C.JSString_methods._codeUnitAt$1(s, i);
        if (charCode > 92) {
          if (charCode >= 55296) {
            t1 = charCode & 64512;
            if (t1 === 55296) {
              t2 = i + 1;
              t2 = !(t2 < $length && (C.JSString_methods._codeUnitAt$1(s, t2) & 64512) === 56320);
            } else
              t2 = false;
            if (!t2)
              if (t1 === 56320) {
                t1 = i - 1;
                t1 = !(t1 >= 0 && (C.JSString_methods.codeUnitAt$1(s, t1) & 64512) === 55296);
              } else
                t1 = false;
            else
              t1 = true;
            if (t1) {
              if (i > offset)
                _this.writeStringSlice$3(s, offset, i);
              offset = i + 1;
              _this.writeCharCode$1(92);
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(100);
              t1 = charCode >>> 8 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode >>> 4 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
            }
          }
          continue;
        }
        if (charCode < 32) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          switch (charCode) {
            case 8:
              _this.writeCharCode$1(98);
              break;
            case 9:
              _this.writeCharCode$1(116);
              break;
            case 10:
              _this.writeCharCode$1(110);
              break;
            case 12:
              _this.writeCharCode$1(102);
              break;
            case 13:
              _this.writeCharCode$1(114);
              break;
            default:
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(48);
              _this.writeCharCode$1(48);
              t1 = charCode >>> 4 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          _this.writeCharCode$1(charCode);
        }
      }
      if (offset === 0)
        _this.writeString$1(s);
      else if (offset < $length)
        _this.writeStringSlice$3(s, offset, $length);
    },
    _checkCycle$1: function(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw H.wrapException(new P.JsonCyclicError(object, null));
      }
      C.JSArray_methods.add$1(t1, object);
    },
    writeObject$1: function(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = P.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw H.wrapException(t1);
        }
        t1 = _this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw H.wrapException(t1);
      }
    },
    writeJsonValue$1: function(object) {
      var t1, success, _this = this;
      if (typeof object == "number") {
        if (!isFinite(object))
          return false;
        _this.writeNumber$1(object);
        return true;
      } else if (object === true) {
        _this.writeString$1("true");
        return true;
      } else if (object === false) {
        _this.writeString$1("false");
        return true;
      } else if (object == null) {
        _this.writeString$1("null");
        return true;
      } else if (typeof object == "string") {
        _this.writeString$1('"');
        _this.writeStringContent$1(object);
        _this.writeString$1('"');
        return true;
      } else if (type$.List_dynamic._is(object)) {
        _this._checkCycle$1(object);
        _this.writeList$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
        return true;
      } else if (type$.Map_dynamic_dynamic._is(object)) {
        _this._checkCycle$1(object);
        success = _this.writeMap$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
        return success;
      } else
        return false;
    },
    writeList$1: function(list) {
      var t1, i, _this = this;
      _this.writeString$1("[");
      t1 = J.getInterceptor$asx(list);
      if (t1.get$isNotEmpty(list)) {
        _this.writeObject$1(t1.$index(list, 0));
        for (i = 1; i < t1.get$length(list); ++i) {
          _this.writeString$1(",");
          _this.writeObject$1(t1.$index(list, i));
        }
      }
      _this.writeString$1("]");
    },
    writeMap$1: function(map) {
      var t2, keyValueList, i, separator, _this = this, _box_0 = {},
        t1 = J.getInterceptor$asx(map);
      if (t1.get$isEmpty(map)) {
        _this.writeString$1("{}");
        return true;
      }
      t2 = t1.get$length(map) * 2;
      keyValueList = P.List_List$filled(t2, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      t1.forEach$1(map, new P._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      _this.writeString$1("{");
      for (separator = '"'; i < t2; i += 2, separator = ',"') {
        _this.writeString$1(separator);
        _this.writeStringContent$1(H._asString(keyValueList[i]));
        _this.writeString$1('":');
        t1 = i + 1;
        if (t1 >= t2)
          return H.ioore(keyValueList, t1);
        _this.writeObject$1(keyValueList[t1]);
      }
      _this.writeString$1("}");
      return true;
    }
  };
  P._JsonStringifier_writeMap_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      C.JSArray_methods.$indexSet(t1, t2.i++, key);
      C.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 31
  };
  P._JsonStringStringifier.prototype = {
    get$_partialResult: function() {
      var t1 = this._convert$_sink;
      return t1 instanceof P.StringBuffer ? t1.toString$0(0) : null;
    },
    writeNumber$1: function(number) {
      this._convert$_sink.write$1(0, C.JSNumber_methods.toString$0(number));
    },
    writeString$1: function(string) {
      this._convert$_sink.write$1(0, string);
    },
    writeStringSlice$3: function(string, start, end) {
      this._convert$_sink.write$1(0, C.JSString_methods.substring$2(string, start, end));
    },
    writeCharCode$1: function(charCode) {
      this._convert$_sink.writeCharCode$1(charCode);
    }
  };
  P.Latin1Codec.prototype = {};
  P._StringConversionSinkAsStringSinkAdapter.prototype = {
    writeCharCode$1: function(charCode) {
      var t1 = this._buffer._contents += H.Primitives_stringFromCharCode(charCode);
      if (t1.length > 16)
        this._flush$0();
    },
    write$1: function(_, o) {
      if (this._buffer._contents.length !== 0)
        this._flush$0();
      this._chunkedSink.add$1(0, o);
    },
    _flush$0: function() {
      var t1 = this._buffer,
        t2 = t1._contents;
      t1._contents = "";
      this._chunkedSink.add$1(0, t2.charCodeAt(0) == 0 ? t2 : t2);
    },
    $isStringSink: 1
  };
  P.StringConversionSinkBase.prototype = {};
  P.StringConversionSinkMixin.prototype = {
    add$1: function(_, str) {
      H._asString(str);
      this.addSlice$4(str, 0, str.length, false);
    },
    $isStringConversionSink: 1,
    $isSink: 1
  };
  P._StringSinkConversionSink.prototype = {
    close$0: function(_) {
    },
    addSlice$4: function(str, start, end, isLast) {
      var t1, i;
      if (start !== 0 || end !== str.length)
        for (t1 = this._stringSink, i = start; i < end; ++i)
          t1._contents += H.Primitives_stringFromCharCode(C.JSString_methods._codeUnitAt$1(str, i));
      else
        this._stringSink._contents += str;
      if (isLast)
        this.close$0(0);
    },
    add$1: function(_, str) {
      this._stringSink._contents += H._asString(str);
    }
  };
  P._StringAdapterSink.prototype = {
    add$1: function(_, str) {
      var t1 = this._convert$_sink,
        t2 = t1._async$_sink;
      str = t2.$ti._rest[1]._as(t1.$ti._precomputed1._as(H._asString(str)));
      if ((t2._state & 2) !== 0)
        H.throwExpression(P.StateError$("Stream is already closed"));
      t2.super$_BufferingStreamSubscription$_add(0, str);
    },
    addSlice$4: function(str, start, end, isLast) {
      var _s24_ = "Stream is already closed",
        t1 = start === 0 && end === str.length,
        t2 = this._convert$_sink,
        t3 = t2.$ti;
      t2 = t2._async$_sink;
      if (t1) {
        str = t2.$ti._rest[1]._as(t3._precomputed1._as(str));
        if ((t2._state & 2) !== 0)
          H.throwExpression(P.StateError$(_s24_));
        t2.super$_BufferingStreamSubscription$_add(0, str);
      } else {
        t1 = t2.$ti._rest[1]._as(t3._precomputed1._as(C.JSString_methods.substring$2(str, start, end)));
        if ((t2._state & 2) !== 0)
          H.throwExpression(P.StateError$(_s24_));
        t2.super$_BufferingStreamSubscription$_add(0, t1);
      }
      if (isLast) {
        if ((t2._state & 2) !== 0)
          H.throwExpression(P.StateError$(_s24_));
        t2.super$_BufferingStreamSubscription$_close();
      }
    },
    close$0: function(_) {
      var t1 = this._convert$_sink._async$_sink;
      if ((t1._state & 2) !== 0)
        H.throwExpression(P.StateError$("Stream is already closed"));
      t1.super$_BufferingStreamSubscription$_close();
    }
  };
  P.Utf8Codec.prototype = {
    get$encoder: function() {
      return C.C_Utf8Encoder;
    }
  };
  P.Utf8Encoder.prototype = {
    convert$1: function(string) {
      var t1, encoder,
        end = P.RangeError_checkValidRange(0, null, string.length),
        $length = end - 0;
      if ($length === 0)
        return new Uint8Array(0);
      t1 = new Uint8Array($length * 3);
      encoder = new P._Utf8Encoder(t1);
      if (encoder._fillBuffer$3(string, 0, end) !== end) {
        C.JSString_methods.codeUnitAt$1(string, end - 1);
        encoder._writeReplacementCharacter$0();
      }
      return C.NativeUint8List_methods.sublist$2(t1, 0, encoder._bufferIndex);
    },
    startChunkedConversion$1: function(sink) {
      type$.Sink_List_int._as(sink);
      return new P._Utf8EncoderSink(new P._ByteAdapterSink(sink), new Uint8Array(1024));
    }
  };
  P._Utf8Encoder.prototype = {
    _writeReplacementCharacter$0: function() {
      var _this = this,
        t1 = _this._buffer,
        t2 = _this._bufferIndex,
        t3 = _this._bufferIndex = t2 + 1,
        t4 = t1.length;
      if (t2 >= t4)
        return H.ioore(t1, t2);
      t1[t2] = 239;
      t2 = _this._bufferIndex = t3 + 1;
      if (t3 >= t4)
        return H.ioore(t1, t3);
      t1[t3] = 191;
      _this._bufferIndex = t2 + 1;
      if (t2 >= t4)
        return H.ioore(t1, t2);
      t1[t2] = 189;
    },
    _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
      var rune, t1, t2, t3, t4, _this = this;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
        t1 = _this._buffer;
        t2 = _this._bufferIndex;
        t3 = _this._bufferIndex = t2 + 1;
        t4 = t1.length;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = rune >>> 18 | 240;
        t2 = _this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = rune >>> 12 & 63 | 128;
        t3 = _this._bufferIndex = t2 + 1;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = rune >>> 6 & 63 | 128;
        _this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = rune & 63 | 128;
        return true;
      } else {
        _this._writeReplacementCharacter$0();
        return false;
      }
    },
    _fillBuffer$3: function(str, start, end) {
      var t1, t2, stringIndex, codeUnit, t3, stringIndex0, t4, _this = this;
      if (start !== end && (C.JSString_methods.codeUnitAt$1(str, end - 1) & 64512) === 55296)
        --end;
      for (t1 = _this._buffer, t2 = t1.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        codeUnit = C.JSString_methods._codeUnitAt$1(str, stringIndex);
        if (codeUnit <= 127) {
          t3 = _this._bufferIndex;
          if (t3 >= t2)
            break;
          _this._bufferIndex = t3 + 1;
          t1[t3] = codeUnit;
        } else {
          t3 = codeUnit & 64512;
          if (t3 === 55296) {
            if (_this._bufferIndex + 4 > t2)
              break;
            stringIndex0 = stringIndex + 1;
            if (_this._writeSurrogate$2(codeUnit, C.JSString_methods._codeUnitAt$1(str, stringIndex0)))
              stringIndex = stringIndex0;
          } else if (t3 === 56320) {
            if (_this._bufferIndex + 3 > t2)
              break;
            _this._writeReplacementCharacter$0();
          } else if (codeUnit <= 2047) {
            t3 = _this._bufferIndex;
            t4 = t3 + 1;
            if (t4 >= t2)
              break;
            _this._bufferIndex = t4;
            if (t3 >= t2)
              return H.ioore(t1, t3);
            t1[t3] = codeUnit >>> 6 | 192;
            _this._bufferIndex = t4 + 1;
            t1[t4] = codeUnit & 63 | 128;
          } else {
            t3 = _this._bufferIndex;
            if (t3 + 2 >= t2)
              break;
            t4 = _this._bufferIndex = t3 + 1;
            if (t3 >= t2)
              return H.ioore(t1, t3);
            t1[t3] = codeUnit >>> 12 | 224;
            t3 = _this._bufferIndex = t4 + 1;
            if (t4 >= t2)
              return H.ioore(t1, t4);
            t1[t4] = codeUnit >>> 6 & 63 | 128;
            _this._bufferIndex = t3 + 1;
            if (t3 >= t2)
              return H.ioore(t1, t3);
            t1[t3] = codeUnit & 63 | 128;
          }
        }
      }
      return stringIndex;
    }
  };
  P._Utf8EncoderSink.prototype = {
    close$0: function(_) {
      if (this._carry !== 0) {
        this.addSlice$4("", 0, 0, true);
        return;
      }
      this._convert$_sink._convert$_sink.close$0(0);
    },
    addSlice$4: function(str, start, end, isLast) {
      var t1, t2, t3, t4, t5, isLastSlice, t6, _this = this;
      _this._bufferIndex = 0;
      t1 = start === end;
      if (t1 && !isLast)
        return;
      t2 = _this._carry;
      if (t2 !== 0) {
        if (_this._writeSurrogate$2(t2, !t1 ? C.JSString_methods._codeUnitAt$1(str, start) : 0))
          ++start;
        _this._carry = 0;
      }
      t1 = _this._convert$_sink;
      t2 = _this._buffer;
      t3 = type$.List_int;
      t4 = end - 1;
      t5 = t2.length - 3;
      do {
        start = _this._fillBuffer$3(str, start, end);
        isLastSlice = isLast && start === end;
        if (start === t4 && (C.JSString_methods._codeUnitAt$1(str, start) & 64512) === 55296) {
          if (isLast && _this._bufferIndex < t5)
            _this._writeReplacementCharacter$0();
          else
            _this._carry = C.JSString_methods._codeUnitAt$1(str, start);
          ++start;
        }
        t6 = _this._bufferIndex;
        t1.add$1(0, C.NativeUint8List_methods.sublist$2(t3._as(t2), 0, t6));
        if (isLastSlice)
          t1.close$0(0);
        _this._bufferIndex = 0;
      } while (start < end);
      if (isLast)
        _this.close$0(0);
    },
    $isStringConversionSink: 1,
    $isSink: 1
  };
  P.__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin.prototype = {};
  P.DateTime.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.DateTime && this._value === other._value && this.isUtc === other.isUtc;
    },
    get$hashCode: function(_) {
      var t1 = this._value;
      return (t1 ^ C.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toUtc$0: function() {
      var t1, t2;
      if (this.isUtc)
        return this;
      t1 = this._value;
      if (Math.abs(t1) <= 864e13)
        t2 = false;
      else
        t2 = true;
      if (t2)
        H.throwExpression(P.ArgumentError$("DateTime is outside valid range: " + t1));
      H.checkNotNullable(true, "isUtc", type$.bool);
      return new P.DateTime(t1, true);
    },
    toString$0: function(_) {
      var _this = this,
        y = P.DateTime__fourDigits(H.Primitives_getYear(_this)),
        m = P.DateTime__twoDigits(H.Primitives_getMonth(_this)),
        d = P.DateTime__twoDigits(H.Primitives_getDay(_this)),
        h = P.DateTime__twoDigits(H.Primitives_getHours(_this)),
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(_this)),
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(_this)),
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(_this));
      if (_this.isUtc)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    }
  };
  P.Duration.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.Duration && this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return C.JSInt_methods.get$hashCode(this._duration);
    },
    toString$0: function(_) {
      var twoDigitMinutes, twoDigitSeconds, sixDigitUs,
        t1 = new P.Duration_toString_twoDigits(),
        t2 = this._duration;
      if (t2 < 0)
        return "-" + new P.Duration(0 - t2).toString$0(0);
      twoDigitMinutes = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 60000000) % 60);
      twoDigitSeconds = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 1000000) % 60);
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(t2 % 1000000);
      return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + twoDigitMinutes + ":" + twoDigitSeconds + "." + sixDigitUs;
    }
  };
  P.Duration_toString_sixDigits.prototype = {
    call$1: function(n) {
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n >= 10)
        return "0000" + n;
      return "00000" + n;
    },
    $signature: 32
  };
  P.Duration_toString_twoDigits.prototype = {
    call$1: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    $signature: 32
  };
  P.Error.prototype = {
    get$stackTrace: function() {
      return H.getTraceFromException(this.$thrownJsError);
    }
  };
  P.AssertionError.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + P.Error_safeToString(t1);
      return "Assertion failed";
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.TypeError.prototype = {};
  P.NullThrownError.prototype = {
    toString$0: function(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName: function() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var explanation, errorValue, _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + H.S(message),
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = P.Error_safeToString(_this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.RangeError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + H.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + H.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + H.S(start) + ".." + H.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + H.S(start);
      return explanation;
    }
  };
  P.IndexError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      if (H._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.UnsupportedError.prototype = {
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.UnimplementedError.prototype = {
    toString$0: function(_) {
      var t1 = "UnimplementedError: " + this.message;
      return t1;
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.StateError.prototype = {
    toString$0: function(_) {
      return "Bad state: " + this.message;
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + P.Error_safeToString(t1) + ".";
    }
  };
  P.OutOfMemoryError.prototype = {
    toString$0: function(_) {
      return "Out of Memory";
    },
    get$stackTrace: function() {
      return null;
    },
    $isError: 1
  };
  P.StackOverflowError.prototype = {
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return null;
    },
    $isError: 1
  };
  P.CyclicInitializationError.prototype = {
    toString$0: function(_) {
      var t1 = "Reading static variable '" + this.variableName + "' during its initialization";
      return t1;
    }
  };
  P._Exception.prototype = {
    toString$0: function(_) {
      return "Exception: " + this.message;
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.FormatException.prototype = {
    toString$0: function(_) {
      var t1, lineNum, lineStart, previousCharWasCR, i, char, lineEnd, end, start, prefix, postfix, slice,
        message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        offset = this.offset,
        source = this.source;
      if (typeof source == "string") {
        if (offset != null)
          t1 = offset < 0 || offset > source.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          if (source.length > 78)
            source = C.JSString_methods.substring$2(source, 0, 75) + "...";
          return report + "\n" + source;
        }
        for (lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          char = C.JSString_methods._codeUnitAt$1(source, i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        lineEnd = source.length;
        for (i = offset; i < lineEnd; ++i) {
          char = C.JSString_methods.codeUnitAt$1(source, i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
            prefix = "";
            postfix = "...";
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = "...";
            }
            prefix = "...";
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        slice = C.JSString_methods.substring$2(source, start, end);
        return report + prefix + slice + postfix + "\n" + C.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + H.S(offset) + ")") : report;
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.Iterable.prototype = {
    map$1$1: function(_, f, $T) {
      var t1 = H._instanceType(this);
      return H.MappedIterable_MappedIterable(this, t1._bind$1($T)._eval$1("1(Iterable.E)")._as(f), t1._eval$1("Iterable.E"), $T);
    },
    get$length: function(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      P.RangeError_checkNotNegative(index, "index");
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P.Iterator.prototype = {};
  P.MapEntry.prototype = {
    toString$0: function(_) {
      return "MapEntry(" + H.S(this.key) + ": " + H.S(this.value) + ")";
    }
  };
  P.Null.prototype = {
    get$hashCode: function(_) {
      return P.Object.prototype.get$hashCode.call(C.JSNull_methods, this);
    },
    toString$0: function(_) {
      return "null";
    }
  };
  P.Object.prototype = {constructor: P.Object, $isObject: 1,
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return "Instance of '" + H.Primitives_objectTypeName(this) + "'";
    },
    toString: function() {
      return this.toString$0(this);
    }
  };
  P._StringStackTrace.prototype = {
    toString$0: function(_) {
      return "";
    },
    $isStackTrace: 1
  };
  P.Stopwatch.prototype = {
    get$elapsedMicroseconds: function() {
      var ticks,
        t1 = this._stop;
      if (t1 == null)
        t1 = $.Primitives_timerTicks.call$0();
      ticks = t1 - this._start;
      if ($.$get$Stopwatch__frequency() === 1000000)
        return ticks;
      return ticks * 1000;
    }
  };
  P.StringBuffer.prototype = {
    get$length: function(_) {
      return this._contents.length;
    },
    write$1: function(_, obj) {
      this._contents += H.S(obj);
    },
    writeCharCode$1: function(charCode) {
      this._contents += H.Primitives_stringFromCharCode(charCode);
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isStringSink: 1
  };
  P.Uri__parseIPv4Address_error.prototype = {
    call$2: function(msg, position) {
      throw H.wrapException(P.FormatException$("Illegal IPv4 address, " + msg, this.host, position));
    },
    $signature: 75
  };
  P.Uri_parseIPv6Address_error.prototype = {
    call$2: function(msg, position) {
      throw H.wrapException(P.FormatException$("Illegal IPv6 address, " + msg, this.host, position));
    },
    call$1: function(msg) {
      return this.call$2(msg, null);
    },
    $signature: 76
  };
  P.Uri_parseIPv6Address_parseHex.prototype = {
    call$2: function(start, end) {
      var value;
      if (end - start > 4)
        this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = P.int_parse(C.JSString_methods.substring$2(this.host, start, end), 16);
      if (value < 0 || value > 65535)
        this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    $signature: 77
  };
  P._Uri.prototype = {
    get$_text: function() {
      var t2, t3, t4, _this = this,
        t1 = _this.___Uri__text;
      if (t1 == null) {
        t1 = _this.scheme;
        t2 = t1.length !== 0 ? "" + t1 + ":" : "";
        t3 = _this._core$_host;
        t4 = t3 == null;
        if (!t4 || t1 === "file") {
          t1 = t2 + "//";
          t2 = _this._userInfo;
          if (t2.length !== 0)
            t1 = t1 + t2 + "@";
          if (!t4)
            t1 += t3;
          t2 = _this._core$_port;
          if (t2 != null)
            t1 = t1 + ":" + H.S(t2);
        } else
          t1 = t2;
        t1 += _this.path;
        t2 = _this._query;
        if (t2 != null)
          t1 = t1 + "?" + t2;
        t2 = _this._fragment;
        if (t2 != null)
          t1 = t1 + "#" + t2;
        t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
        if (_this.___Uri__text == null)
          _this.___Uri__text = t1;
        else
          t1 = H.throwExpression(H.LateError$fieldADI("_text"));
      }
      return t1;
    },
    get$hashCode: function(_) {
      var _this = this,
        t1 = _this.___Uri_hashCode;
      if (t1 == null) {
        t1 = C.JSString_methods.get$hashCode(_this.get$_text());
        if (_this.___Uri_hashCode == null)
          _this.___Uri_hashCode = t1;
        else
          t1 = H.throwExpression(H.LateError$fieldADI("hashCode"));
      }
      return t1;
    },
    get$userInfo: function() {
      return this._userInfo;
    },
    get$host: function(_) {
      var host = this._core$_host;
      if (host == null)
        return "";
      if (C.JSString_methods.startsWith$1(host, "["))
        return C.JSString_methods.substring$2(host, 1, host.length - 1);
      return host;
    },
    get$port: function(_) {
      var t1 = this._core$_port;
      return t1 == null ? P._Uri__defaultPort(this.scheme) : t1;
    },
    get$query: function(_) {
      var t1 = this._query;
      return t1 == null ? "" : t1;
    },
    get$fragment: function() {
      var t1 = this._fragment;
      return t1 == null ? "" : t1;
    },
    isScheme$1: function(scheme) {
      var thisScheme = this.scheme;
      if (scheme.length !== thisScheme.length)
        return false;
      return P._Uri__compareScheme(scheme, thisScheme);
    },
    removeFragment$0: function() {
      var _this = this;
      if (_this._fragment == null)
        return _this;
      return new P._Uri(_this.scheme, _this._userInfo, _this._core$_host, _this._core$_port, _this.path, _this._query, null);
    },
    _mergePaths$2: function(base, reference) {
      var backCount, refStart, baseEnd, newEnd, delta, t1;
      for (backCount = 0, refStart = 0; C.JSString_methods.startsWith$2(reference, "../", refStart);) {
        refStart += 3;
        ++backCount;
      }
      baseEnd = C.JSString_methods.lastIndexOf$1(base, "/");
      while (true) {
        if (!(baseEnd > 0 && backCount > 0))
          break;
        newEnd = C.JSString_methods.lastIndexOf$2(base, "/", baseEnd - 1);
        if (newEnd < 0)
          break;
        delta = baseEnd - newEnd;
        t1 = delta !== 2;
        if (!t1 || delta === 3)
          if (C.JSString_methods.codeUnitAt$1(base, newEnd + 1) === 46)
            t1 = !t1 || C.JSString_methods.codeUnitAt$1(base, newEnd + 2) === 46;
          else
            t1 = false;
        else
          t1 = false;
        if (t1)
          break;
        --backCount;
        baseEnd = newEnd;
      }
      return C.JSString_methods.replaceRange$3(base, baseEnd + 1, null, C.JSString_methods.substring$1(reference, refStart - 3 * backCount));
    },
    resolveUri$1: function(reference) {
      var targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, packageNameEnd, packageName, mergedPath, t1, _this = this, _null = null;
      if (reference.get$scheme().length !== 0) {
        targetScheme = reference.get$scheme();
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host(reference);
          targetPort = reference.get$hasPort() ? reference.get$port(reference) : _null;
        } else {
          targetPort = _null;
          targetHost = targetPort;
          targetUserInfo = "";
        }
        targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
        targetQuery = reference.get$hasQuery() ? reference.get$query(reference) : _null;
      } else {
        targetScheme = _this.scheme;
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host(reference);
          targetPort = P._Uri__makePort(reference.get$hasPort() ? reference.get$port(reference) : _null, targetScheme);
          targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
          targetQuery = reference.get$hasQuery() ? reference.get$query(reference) : _null;
        } else {
          targetUserInfo = _this._userInfo;
          targetHost = _this._core$_host;
          targetPort = _this._core$_port;
          targetPath = _this.path;
          if (reference.get$path(reference) === "")
            targetQuery = reference.get$hasQuery() ? reference.get$query(reference) : _this._query;
          else {
            packageNameEnd = P._Uri__packageNameEnd(_this, targetPath);
            if (packageNameEnd > 0) {
              packageName = C.JSString_methods.substring$2(targetPath, 0, packageNameEnd);
              targetPath = reference.get$hasAbsolutePath() ? packageName + P._Uri__removeDotSegments(reference.get$path(reference)) : packageName + P._Uri__removeDotSegments(_this._mergePaths$2(C.JSString_methods.substring$1(targetPath, packageName.length), reference.get$path(reference)));
            } else if (reference.get$hasAbsolutePath())
              targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
            else if (targetPath.length === 0)
              if (targetHost == null)
                targetPath = targetScheme.length === 0 ? reference.get$path(reference) : P._Uri__removeDotSegments(reference.get$path(reference));
              else
                targetPath = P._Uri__removeDotSegments("/" + reference.get$path(reference));
            else {
              mergedPath = _this._mergePaths$2(targetPath, reference.get$path(reference));
              t1 = targetScheme.length === 0;
              if (!t1 || targetHost != null || C.JSString_methods.startsWith$1(targetPath, "/"))
                targetPath = P._Uri__removeDotSegments(mergedPath);
              else
                targetPath = P._Uri__normalizeRelativePath(mergedPath, !t1 || targetHost != null);
            }
            targetQuery = reference.get$hasQuery() ? reference.get$query(reference) : _null;
          }
        }
      }
      return new P._Uri(targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, reference.get$hasFragment() ? reference.get$fragment() : _null);
    },
    get$hasAuthority: function() {
      return this._core$_host != null;
    },
    get$hasPort: function() {
      return this._core$_port != null;
    },
    get$hasQuery: function() {
      return this._query != null;
    },
    get$hasFragment: function() {
      return this._fragment != null;
    },
    get$hasAbsolutePath: function() {
      return C.JSString_methods.startsWith$1(this.path, "/");
    },
    toString$0: function(_) {
      return this.get$_text();
    },
    $eq: function(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (type$.Uri._is(other))
        if (_this.scheme === other.get$scheme())
          if (_this._core$_host != null === other.get$hasAuthority())
            if (_this._userInfo === other.get$userInfo())
              if (_this.get$host(_this) === other.get$host(other))
                if (_this.get$port(_this) === other.get$port(other))
                  if (_this.path === other.get$path(other)) {
                    t1 = _this._query;
                    t2 = t1 == null;
                    if (!t2 === other.get$hasQuery()) {
                      if (t2)
                        t1 = "";
                      if (t1 === other.get$query(other)) {
                        t1 = _this._fragment;
                        t2 = t1 == null;
                        if (!t2 === other.get$hasFragment()) {
                          if (t2)
                            t1 = "";
                          t1 = t1 === other.get$fragment();
                        } else
                          t1 = false;
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    $isUri: 1,
    get$scheme: function() {
      return this.scheme;
    },
    get$path: function(receiver) {
      return this.path;
    }
  };
  P.UriData.prototype = {
    get$uri: function() {
      var t2, queryIndex, end, query, _this = this, _null = null,
        t1 = _this._uriCache;
      if (t1 == null) {
        t1 = _this._separatorIndices;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t2 = _this._text;
        t1 = t1[0] + 1;
        queryIndex = C.JSString_methods.indexOf$2(t2, "?", t1);
        end = t2.length;
        if (queryIndex >= 0) {
          query = P._Uri__normalizeOrSubstring(t2, queryIndex + 1, end, C.List_CVk, false);
          end = queryIndex;
        } else
          query = _null;
        t1 = _this._uriCache = new P._DataUri("data", "", _null, _null, P._Uri__normalizeOrSubstring(t2, t1, end, C.List_qg4, false), query, _null);
      }
      return t1;
    },
    toString$0: function(_) {
      var t2,
        t1 = this._separatorIndices;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t2 = this._text;
      return t1[0] === -1 ? "data:" + t2 : t2;
    }
  };
  P._createTables_build.prototype = {
    call$2: function(state, defaultTransition) {
      var t1 = this.tables;
      if (state >= t1.length)
        return H.ioore(t1, state);
      t1 = t1[state];
      C.NativeUint8List_methods.fillRange$3(t1, 0, 96, defaultTransition);
      return t1;
    },
    $signature: 78
  };
  P._createTables_setChars.prototype = {
    call$3: function(target, chars, transition) {
      var t1, i, t2;
      for (t1 = chars.length, i = 0; i < t1; ++i) {
        t2 = C.JSString_methods._codeUnitAt$1(chars, i) ^ 96;
        if (t2 >= 96)
          return H.ioore(target, t2);
        target[t2] = transition;
      }
    },
    $signature: 33
  };
  P._createTables_setRange.prototype = {
    call$3: function(target, range, transition) {
      var i, n, t1;
      for (i = C.JSString_methods._codeUnitAt$1(range, 0), n = C.JSString_methods._codeUnitAt$1(range, 1); i <= n; ++i) {
        t1 = (i ^ 96) >>> 0;
        if (t1 >= 96)
          return H.ioore(target, t1);
        target[t1] = transition;
      }
    },
    $signature: 33
  };
  P._SimpleUri.prototype = {
    get$hasAuthority: function() {
      return this._hostStart > 0;
    },
    get$hasPort: function() {
      return this._hostStart > 0 && this._portStart + 1 < this._pathStart;
    },
    get$hasQuery: function() {
      return this._queryStart < this._fragmentStart;
    },
    get$hasFragment: function() {
      return this._fragmentStart < this._core$_uri.length;
    },
    get$hasAbsolutePath: function() {
      return C.JSString_methods.startsWith$2(this._core$_uri, "/", this._pathStart);
    },
    isScheme$1: function(scheme) {
      var t1 = scheme.length;
      if (t1 === 0)
        return this._schemeEnd < 0;
      if (t1 !== this._schemeEnd)
        return false;
      return P._Uri__compareScheme(scheme, this._core$_uri);
    },
    get$scheme: function() {
      var t1 = this._schemeCache;
      return t1 == null ? this._schemeCache = this._computeScheme$0() : t1;
    },
    _computeScheme$0: function() {
      var t2, _this = this,
        t1 = _this._schemeEnd;
      if (t1 <= 0)
        return "";
      t2 = t1 === 4;
      if (t2 && C.JSString_methods.startsWith$1(_this._core$_uri, "http"))
        return "http";
      if (t1 === 5 && C.JSString_methods.startsWith$1(_this._core$_uri, "https"))
        return "https";
      if (t2 && C.JSString_methods.startsWith$1(_this._core$_uri, "file"))
        return "file";
      if (t1 === 7 && C.JSString_methods.startsWith$1(_this._core$_uri, "package"))
        return "package";
      return C.JSString_methods.substring$2(_this._core$_uri, 0, t1);
    },
    get$userInfo: function() {
      var t1 = this._hostStart,
        t2 = this._schemeEnd + 3;
      return t1 > t2 ? C.JSString_methods.substring$2(this._core$_uri, t2, t1 - 1) : "";
    },
    get$host: function(_) {
      var t1 = this._hostStart;
      return t1 > 0 ? C.JSString_methods.substring$2(this._core$_uri, t1, this._portStart) : "";
    },
    get$port: function(_) {
      var t1, _this = this;
      if (_this.get$hasPort())
        return P.int_parse(C.JSString_methods.substring$2(_this._core$_uri, _this._portStart + 1, _this._pathStart), null);
      t1 = _this._schemeEnd;
      if (t1 === 4 && C.JSString_methods.startsWith$1(_this._core$_uri, "http"))
        return 80;
      if (t1 === 5 && C.JSString_methods.startsWith$1(_this._core$_uri, "https"))
        return 443;
      return 0;
    },
    get$path: function(_) {
      return C.JSString_methods.substring$2(this._core$_uri, this._pathStart, this._queryStart);
    },
    get$query: function(_) {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      return t1 < t2 ? C.JSString_methods.substring$2(this._core$_uri, t1 + 1, t2) : "";
    },
    get$fragment: function() {
      var t1 = this._fragmentStart,
        t2 = this._core$_uri;
      return t1 < t2.length ? C.JSString_methods.substring$1(t2, t1 + 1) : "";
    },
    _isPort$1: function(port) {
      var portDigitStart = this._portStart + 1;
      return portDigitStart + port.length === this._pathStart && C.JSString_methods.startsWith$2(this._core$_uri, port, portDigitStart);
    },
    removeFragment$0: function() {
      var _this = this,
        t1 = _this._fragmentStart,
        t2 = _this._core$_uri;
      if (t1 >= t2.length)
        return _this;
      return new P._SimpleUri(C.JSString_methods.substring$2(t2, 0, t1), _this._schemeEnd, _this._hostStart, _this._portStart, _this._pathStart, _this._queryStart, t1, _this._schemeCache);
    },
    resolveUri$1: function(reference) {
      if (reference instanceof P._SimpleUri)
        return this._simpleMerge$2(this, reference);
      return this._toNonSimple$0().resolveUri$1(reference);
    },
    _simpleMerge$2: function(base, ref) {
      var t2, t3, t4, isSimple, delta, refStart, basePathStart, packageNameEnd, basePathStart0, baseStart, baseEnd, baseUri, baseStart0, backCount, refStart0, insert,
        t1 = ref._schemeEnd;
      if (t1 > 0)
        return ref;
      t2 = ref._hostStart;
      if (t2 > 0) {
        t3 = base._schemeEnd;
        if (t3 <= 0)
          return ref;
        t4 = t3 === 4;
        if (t4 && C.JSString_methods.startsWith$1(base._core$_uri, "file"))
          isSimple = ref._pathStart !== ref._queryStart;
        else if (t4 && C.JSString_methods.startsWith$1(base._core$_uri, "http"))
          isSimple = !ref._isPort$1("80");
        else
          isSimple = !(t3 === 5 && C.JSString_methods.startsWith$1(base._core$_uri, "https")) || !ref._isPort$1("443");
        if (isSimple) {
          delta = t3 + 1;
          return new P._SimpleUri(C.JSString_methods.substring$2(base._core$_uri, 0, delta) + C.JSString_methods.substring$1(ref._core$_uri, t1 + 1), t3, t2 + delta, ref._portStart + delta, ref._pathStart + delta, ref._queryStart + delta, ref._fragmentStart + delta, base._schemeCache);
        } else
          return this._toNonSimple$0().resolveUri$1(ref);
      }
      refStart = ref._pathStart;
      t1 = ref._queryStart;
      if (refStart === t1) {
        t2 = ref._fragmentStart;
        if (t1 < t2) {
          t3 = base._queryStart;
          delta = t3 - t1;
          return new P._SimpleUri(C.JSString_methods.substring$2(base._core$_uri, 0, t3) + C.JSString_methods.substring$1(ref._core$_uri, t1), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, t1 + delta, t2 + delta, base._schemeCache);
        }
        t1 = ref._core$_uri;
        if (t2 < t1.length) {
          t3 = base._fragmentStart;
          return new P._SimpleUri(C.JSString_methods.substring$2(base._core$_uri, 0, t3) + C.JSString_methods.substring$1(t1, t2), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, base._queryStart, t2 + (t3 - t2), base._schemeCache);
        }
        return base.removeFragment$0();
      }
      t2 = ref._core$_uri;
      if (C.JSString_methods.startsWith$2(t2, "/", refStart)) {
        basePathStart = base._pathStart;
        packageNameEnd = P._SimpleUri__packageNameEnd(this);
        basePathStart0 = packageNameEnd > 0 ? packageNameEnd : basePathStart;
        delta = basePathStart0 - refStart;
        return new P._SimpleUri(C.JSString_methods.substring$2(base._core$_uri, 0, basePathStart0) + C.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, basePathStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseStart = base._pathStart;
      baseEnd = base._queryStart;
      if (baseStart === baseEnd && base._hostStart > 0) {
        for (; C.JSString_methods.startsWith$2(t2, "../", refStart);)
          refStart += 3;
        delta = baseStart - refStart + 1;
        return new P._SimpleUri(C.JSString_methods.substring$2(base._core$_uri, 0, baseStart) + "/" + C.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseUri = base._core$_uri;
      packageNameEnd = P._SimpleUri__packageNameEnd(this);
      if (packageNameEnd >= 0)
        baseStart0 = packageNameEnd;
      else
        for (baseStart0 = baseStart; C.JSString_methods.startsWith$2(baseUri, "../", baseStart0);)
          baseStart0 += 3;
      backCount = 0;
      while (true) {
        refStart0 = refStart + 3;
        if (!(refStart0 <= t1 && C.JSString_methods.startsWith$2(t2, "../", refStart)))
          break;
        ++backCount;
        refStart = refStart0;
      }
      for (insert = ""; baseEnd > baseStart0;) {
        --baseEnd;
        if (C.JSString_methods.codeUnitAt$1(baseUri, baseEnd) === 47) {
          if (backCount === 0) {
            insert = "/";
            break;
          }
          --backCount;
          insert = "/";
        }
      }
      if (baseEnd === baseStart0 && base._schemeEnd <= 0 && !C.JSString_methods.startsWith$2(baseUri, "/", baseStart)) {
        refStart -= backCount * 3;
        insert = "";
      }
      delta = baseEnd - refStart + insert.length;
      return new P._SimpleUri(C.JSString_methods.substring$2(baseUri, 0, baseEnd) + insert + C.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
    },
    get$hashCode: function(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = C.JSString_methods.get$hashCode(this._core$_uri) : t1;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return type$.Uri._is(other) && this._core$_uri === other.toString$0(0);
    },
    _toNonSimple$0: function() {
      var _this = this, _null = null,
        t1 = _this.get$scheme(),
        t2 = _this.get$userInfo(),
        t3 = _this._hostStart > 0 ? _this.get$host(_this) : _null,
        t4 = _this.get$hasPort() ? _this.get$port(_this) : _null,
        t5 = _this._core$_uri,
        t6 = _this._queryStart,
        t7 = C.JSString_methods.substring$2(t5, _this._pathStart, t6),
        t8 = _this._fragmentStart;
      t6 = t6 < t8 ? _this.get$query(_this) : _null;
      return new P._Uri(t1, t2, t3, t4, t7, t6, t8 < t5.length ? _this.get$fragment() : _null);
    },
    toString$0: function(_) {
      return this._core$_uri;
    },
    $isUri: 1
  };
  P._DataUri.prototype = {};
  P.TimelineTask.prototype = {
    start$2$arguments: function(_, $name, $arguments) {
      var t1, map, key, _this = this;
      C.JSArray_methods.add$1(_this._stack, new P._AsyncBlock($name, _this._taskId));
      t1 = type$.nullable_Object;
      map = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (t1 = $arguments.get$keys($arguments), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        key = t1.get$current(t1);
        map.$indexSet(0, key, $arguments.$index(0, key));
      }
      t1 = _this._parent;
      if (t1 != null)
        map.$indexSet(0, "parentId", C.JSInt_methods.toRadixString$1(t1._taskId, 16));
      map.$indexSet(0, "filterKey", _this._filterKey);
      P._argumentsAsJson(map);
    },
    instant$2$arguments: function($name, $arguments) {
      var t1, instantArguments;
      if ($arguments != null) {
        t1 = type$.dynamic;
        instantArguments = P.LinkedHashMap_LinkedHashMap$from($arguments, t1, t1);
      } else
        instantArguments = null;
      if (instantArguments == null) {
        t1 = type$.dynamic;
        instantArguments = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      }
      instantArguments.$indexSet(0, "filterKey", this._filterKey);
      P._argumentsAsJson(instantArguments);
    },
    finish$1$arguments: function(_, $arguments) {
      var t2,
        t1 = this._stack;
      if (t1.length === 0)
        throw H.wrapException(P.StateError$("Uneven calls to start and finish"));
      if ($arguments == null) {
        t2 = type$.dynamic;
        $arguments = P.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
      }
      $arguments.$indexSet(0, "filterKey", this._filterKey);
      if (0 >= t1.length)
        return H.ioore(t1, -1);
      t1.pop();
      P._argumentsAsJson($arguments);
    },
    finish$0: function($receiver) {
      return this.finish$1$arguments($receiver, null);
    }
  };
  P._AsyncBlock.prototype = {};
  W.HtmlElement.prototype = {};
  W.AccessibleNodeList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.AnchorElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.ApplicationCacheErrorEvent.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  W.AreaElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.Blob.prototype = {};
  W.CharacterData.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssPerspective.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssRule.prototype = {$isCssRule: 1};
  W.CssStyleDeclaration.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssStyleDeclarationBase.prototype = {};
  W.CssStyleValue.prototype = {};
  W.CssTransformComponent.prototype = {};
  W.CssTransformValue.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssUnparsedValue.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.DataTransferItemList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      return receiver[H._asInt(index)];
    }
  };
  W.DeprecationReport.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  W.DomError.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  W.DomException.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    },
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.DomRectList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      type$.Rectangle_num._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.DomRectReadOnly.prototype = {
    toString$0: function(receiver) {
      var t2,
        t1 = receiver.left;
      t1.toString;
      t1 = "Rectangle (" + H.S(t1) + ", ";
      t2 = receiver.top;
      t2.toString;
      return t1 + H.S(t2) + ") " + H.S(this.get$width(receiver)) + " x " + H.S(this.get$height(receiver));
    },
    $eq: function(receiver, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (type$.Rectangle_num._is(other)) {
        t1 = receiver.left;
        t1.toString;
        t2 = other.left;
        t2.toString;
        if (t1 === t2) {
          t1 = receiver.top;
          t1.toString;
          t2 = other.top;
          t2.toString;
          if (t1 === t2) {
            t1 = J.getInterceptor$x(other);
            t1 = this.get$width(receiver) === t1.get$width(other) && this.get$height(receiver) === t1.get$height(other);
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      var t2,
        t1 = receiver.left;
      t1.toString;
      t1 = C.JSNumber_methods.get$hashCode(t1);
      t2 = receiver.top;
      t2.toString;
      return W._JenkinsSmiHash_hash4(t1, C.JSNumber_methods.get$hashCode(t2), C.JSNumber_methods.get$hashCode(this.get$width(receiver)), C.JSNumber_methods.get$hashCode(this.get$height(receiver)));
    },
    get$_height: function(receiver) {
      return receiver.height;
    },
    get$height: function(receiver) {
      var t1 = this.get$_height(receiver);
      t1.toString;
      return t1;
    },
    get$_width: function(receiver) {
      return receiver.width;
    },
    get$width: function(receiver) {
      var t1 = this.get$_width(receiver);
      t1.toString;
      return t1;
    },
    $isRectangle: 1
  };
  W.DomStringList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asString(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.DomTokenList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Element.prototype = {
    toString$0: function(receiver) {
      return receiver.localName;
    }
  };
  W.ErrorEvent.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  W.Event.prototype = {};
  W.EventTarget.prototype = {};
  W.File.prototype = {$isFile: 1};
  W.FileList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      type$.File._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.FileWriter.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.FormElement.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Gamepad.prototype = {$isGamepad: 1};
  W.History.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.HtmlCollection.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      type$.Node._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.InterventionReport.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  W.Location.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.MediaError.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  W.MediaKeyMessageEvent.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  W.MediaList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.MidiInputMap.prototype = {
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H._asString(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      type$.void_Function_String_dynamic._as(f);
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], type$.JSArray_String);
      this.forEach$1(receiver, new W.MidiInputMap_keys_closure(keys));
      return keys;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return receiver.size === 0;
    },
    $isMap: 1
  };
  W.MidiInputMap_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 9
  };
  W.MidiOutputMap.prototype = {
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H._asString(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      type$.void_Function_String_dynamic._as(f);
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], type$.JSArray_String);
      this.forEach$1(receiver, new W.MidiOutputMap_keys_closure(keys));
      return keys;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return receiver.size === 0;
    },
    $isMap: 1
  };
  W.MidiOutputMap_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 9
  };
  W.MimeType.prototype = {$isMimeType: 1};
  W.MimeTypeArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      type$.MimeType._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.NavigatorUserMediaError.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  W.Node.prototype = {
    toString$0: function(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString(receiver) : value;
    },
    $isNode: 1
  };
  W.NodeList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      type$.Node._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.OverconstrainedError.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  W.Plugin.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $isPlugin: 1
  };
  W.PluginArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      type$.Plugin._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.PositionError.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  W.PresentationConnectionCloseEvent.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  W.ReportBody.prototype = {};
  W.RtcStatsReport.prototype = {
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H._asString(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      type$.void_Function_String_dynamic._as(f);
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], type$.JSArray_String);
      this.forEach$1(receiver, new W.RtcStatsReport_keys_closure(keys));
      return keys;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return receiver.size === 0;
    },
    $isMap: 1
  };
  W.RtcStatsReport_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 9
  };
  W.SelectElement.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.SourceBuffer.prototype = {$isSourceBuffer: 1};
  W.SourceBufferList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      type$.SourceBuffer._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.SpeechGrammar.prototype = {$isSpeechGrammar: 1};
  W.SpeechGrammarList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      type$.SpeechGrammar._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.SpeechRecognitionError.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  W.SpeechRecognitionResult.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $isSpeechRecognitionResult: 1
  };
  W.Storage.prototype = {
    $index: function(receiver, key) {
      return receiver.getItem(H._asString(key));
    },
    forEach$1: function(receiver, f) {
      var i, key, t1;
      type$.void_Function_String_String._as(f);
      for (i = 0; true; ++i) {
        key = receiver.key(i);
        if (key == null)
          return;
        t1 = receiver.getItem(key);
        t1.toString;
        f.call$2(key, t1);
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], type$.JSArray_String);
      this.forEach$1(receiver, new W.Storage_keys_closure(keys));
      return keys;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    get$isEmpty: function(receiver) {
      return receiver.key(0) == null;
    },
    $isMap: 1
  };
  W.Storage_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 81
  };
  W.StyleSheet.prototype = {$isStyleSheet: 1};
  W.TextTrack.prototype = {$isTextTrack: 1};
  W.TextTrackCue.prototype = {$isTextTrackCue: 1};
  W.TextTrackCueList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      type$.TextTrackCue._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.TextTrackList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      type$.TextTrack._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.TimeRanges.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Touch.prototype = {$isTouch: 1};
  W.TouchList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      type$.Touch._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.TrackDefaultList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Url.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.VideoTrackList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W._CssRuleList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      type$.CssRule._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W._DomRect.prototype = {
    toString$0: function(receiver) {
      var t2,
        t1 = receiver.left;
      t1.toString;
      t1 = "Rectangle (" + H.S(t1) + ", ";
      t2 = receiver.top;
      t2.toString;
      t2 = t1 + H.S(t2) + ") ";
      t1 = receiver.width;
      t1.toString;
      t1 = t2 + H.S(t1) + " x ";
      t2 = receiver.height;
      t2.toString;
      return t1 + H.S(t2);
    },
    $eq: function(receiver, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (type$.Rectangle_num._is(other)) {
        t1 = receiver.left;
        t1.toString;
        t2 = other.left;
        t2.toString;
        if (t1 === t2) {
          t1 = receiver.top;
          t1.toString;
          t2 = other.top;
          t2.toString;
          if (t1 === t2) {
            t1 = receiver.width;
            t1.toString;
            t2 = J.getInterceptor$x(other);
            if (t1 === t2.get$width(other)) {
              t1 = receiver.height;
              t1.toString;
              t2 = t1 === t2.get$height(other);
              t1 = t2;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      var t2, t3, t4,
        t1 = receiver.left;
      t1.toString;
      t1 = C.JSNumber_methods.get$hashCode(t1);
      t2 = receiver.top;
      t2.toString;
      t2 = C.JSNumber_methods.get$hashCode(t2);
      t3 = receiver.width;
      t3.toString;
      t3 = C.JSNumber_methods.get$hashCode(t3);
      t4 = receiver.height;
      t4.toString;
      return W._JenkinsSmiHash_hash4(t1, t2, t3, C.JSNumber_methods.get$hashCode(t4));
    },
    get$_height: function(receiver) {
      return receiver.height;
    },
    get$height: function(receiver) {
      var t1 = receiver.height;
      t1.toString;
      return t1;
    },
    get$_width: function(receiver) {
      return receiver.width;
    },
    get$width: function(receiver) {
      var t1 = receiver.width;
      t1.toString;
      return t1;
    }
  };
  W._GamepadList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      type$.nullable_Gamepad._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W._NamedNodeMap.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      type$.Node._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W._SpeechRecognitionResultList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      type$.SpeechRecognitionResult._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W._StyleSheetList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      type$.StyleSheet._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.ImmutableListMixin.prototype = {
    get$iterator: function(receiver) {
      return new W.FixedSizeListIterator(receiver, this.get$length(receiver), H.instanceType(receiver)._eval$1("FixedSizeListIterator<ImmutableListMixin.E>"));
    },
    add$1: function(receiver, value) {
      H.instanceType(receiver)._eval$1("ImmutableListMixin.E")._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    remove$1: function(receiver, object) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
    }
  };
  W.FixedSizeListIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        nextPosition = _this._position + 1,
        t1 = _this._length;
      if (nextPosition < t1) {
        _this.set$_current(J.$index$asx(_this._array, nextPosition));
        _this._position = nextPosition;
        return true;
      }
      _this.set$_current(null);
      _this._position = t1;
      return false;
    },
    get$current: function(_) {
      return this.$ti._precomputed1._as(this._current);
    },
    set$_current: function(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase.prototype = {};
  W._DomRectList_Interceptor_ListMixin.prototype = {};
  W._DomRectList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._DomStringList_Interceptor_ListMixin.prototype = {};
  W._DomStringList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._FileList_Interceptor_ListMixin.prototype = {};
  W._FileList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._HtmlCollection_Interceptor_ListMixin.prototype = {};
  W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._MidiInputMap_Interceptor_MapMixin.prototype = {};
  W._MidiOutputMap_Interceptor_MapMixin.prototype = {};
  W._MimeTypeArray_Interceptor_ListMixin.prototype = {};
  W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._NodeList_Interceptor_ListMixin.prototype = {};
  W._NodeList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._PluginArray_Interceptor_ListMixin.prototype = {};
  W._PluginArray_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._RtcStatsReport_Interceptor_MapMixin.prototype = {};
  W._SourceBufferList_EventTarget_ListMixin.prototype = {};
  W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.prototype = {};
  W._SpeechGrammarList_Interceptor_ListMixin.prototype = {};
  W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._Storage_Interceptor_MapMixin.prototype = {};
  W._TextTrackCueList_Interceptor_ListMixin.prototype = {};
  W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._TextTrackList_EventTarget_ListMixin.prototype = {};
  W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.prototype = {};
  W._TouchList_Interceptor_ListMixin.prototype = {};
  W._TouchList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__CssRuleList_Interceptor_ListMixin.prototype = {};
  W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__GamepadList_Interceptor_ListMixin.prototype = {};
  W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__NamedNodeMap_Interceptor_ListMixin.prototype = {};
  W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__SpeechRecognitionResultList_Interceptor_ListMixin.prototype = {};
  W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__StyleSheetList_Interceptor_ListMixin.prototype = {};
  W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P.OSError.prototype = {
    toString$0: function(_) {
      var t1 = "" + "OS Error",
        t2 = this.message;
      if (t2.length !== 0) {
        t1 = t1 + ": " + t2;
        t2 = this.errorCode;
        if (t2 !== -1)
          t1 = t1 + ", errno = " + C.JSInt_methods.toString$0(t2);
      } else {
        t2 = this.errorCode;
        if (t2 !== -1)
          t1 = t1 + ": errno = " + C.JSInt_methods.toString$0(t2);
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P._BufferAndStart.prototype = {};
  P.ZLibDecoder.prototype = {
    startChunkedConversion$1: function(sink) {
      type$.Sink_List_int._as(sink);
      if (!(sink instanceof P.ByteConversionSink))
        sink = new P._ByteAdapterSink(sink);
      return new P._ZLibDecoderSink(P.RawZLibFilter__makeZLibInflateFilter(this.windowBits, this.dictionary, false), sink);
    }
  };
  P._ZLibDecoderSink.prototype = {};
  P._FilterSink.prototype = {
    add$1: function(_, data) {
      type$.List_int._as(data);
      this.addSlice$4(data, 0, J.get$length$asx(data), false);
    },
    addSlice$4: function(data, start, end, isLast) {
      var bufferAndStart, out, t1, t2, exception, _this = this;
      type$.List_int._as(data);
      if (_this._closed)
        return;
      P.RangeError_checkValidRange(start, end, J.get$length$asx(data));
      try {
        _this._empty = false;
        bufferAndStart = P._ensureFastAndSerializableByteData(data, start, end);
        t1 = _this._filter;
        t1.process$3(bufferAndStart.buffer, bufferAndStart.start, end - (start - bufferAndStart.start));
        for (t2 = _this._sink; true;) {
          out = t1.processed$1$flush(false);
          if (out == null)
            break;
          t2.add$1(0, out);
        }
      } catch (exception) {
        H.unwrapException(exception);
        _this._closed = true;
        throw exception;
      }
    },
    close$0: function(_) {
      var out, e, t1, t2, exception, _this = this;
      if (_this._closed)
        return;
      if (_this._empty)
        _this._filter.process$3(C.List_empty, 0, 0);
      try {
        for (t1 = _this._sink, t2 = _this._filter; true;) {
          out = t2.processed$1$end(true);
          if (out == null)
            break;
          t1.add$1(0, out);
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        _this._closed = true;
        throw H.wrapException(e);
      }
      _this._closed = true;
      _this._sink.close$0(0);
    }
  };
  P.FileMode.prototype = {};
  P.FileSystemException.prototype = {
    toString$0: function(_) {
      var _this = this,
        t1 = "" + "FileSystemException",
        t2 = _this.message;
      if (t2.length !== 0) {
        t1 = t1 + (": " + t2) + (", path = '" + _this.path + "'");
        t2 = _this.osError;
        if (t2 != null)
          t1 += " (" + t2.toString$0(0) + ")";
      } else {
        t2 = _this.osError;
        if (t2 != null)
          t1 = t1 + (": " + t2.toString$0(0)) + (", path = '" + _this.path + "'");
        else
          t1 += ": " + _this.path;
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P._FileStreamConsumer.prototype = {
    addStream$1: function(_, stream) {
      var t1, completer;
      type$.Stream_List_int._as(stream);
      t1 = new P._Future($.Zone__current, type$._Future_nullable_File);
      completer = new P._SyncCompleter(t1, type$._SyncCompleter_nullable_File);
      this._openFuture.then$1$1(new P._FileStreamConsumer_addStream_closure(this, completer, stream), type$.Null).catchError$1(completer.get$completeError());
      return t1;
    },
    close$0: function(_) {
      return this._openFuture.then$1$1(new P._FileStreamConsumer_close_closure(), type$.void).then$1$1(new P._FileStreamConsumer_close_closure0(this), type$.nullable_File);
    }
  };
  P._FileStreamConsumer_addStream_closure.prototype = {
    call$1: function(openedFile) {
      var t2, t3, t4, t1 = {};
      type$.RandomAccessFile._as(openedFile);
      t1.__subscription = null;
      t2 = new P._FileStreamConsumer_addStream_closure___subscription_get(t1);
      t3 = this.completer;
      t4 = new P._FileStreamConsumer_addStream_closure_error(t2, openedFile, t3);
      new P._FileStreamConsumer_addStream_closure___subscription_set(t1).call$1(this.stream.listen$4$cancelOnError$onDone$onError(new P._FileStreamConsumer_addStream__closure(t2, openedFile, t4), true, new P._FileStreamConsumer_addStream__closure0(this.$this, t3), t4));
    },
    $signature: 82
  };
  P._FileStreamConsumer_addStream_closure___subscription_set.prototype = {
    call$1: function(t1) {
      return this._box_0.__subscription = type$.StreamSubscription_List_int._as(t1);
    },
    $signature: 83
  };
  P._FileStreamConsumer_addStream_closure___subscription_get.prototype = {
    call$0: function() {
      var t1 = this._box_0.__subscription;
      return t1 == null ? H.throwExpression(H.LateError$localNI("_subscription")) : t1;
    },
    $signature: 84
  };
  P._FileStreamConsumer_addStream_closure_error.prototype = {
    call$2: function(e, stackTrace) {
      type$.StackTrace._as(stackTrace);
      J.cancel$0$z(this.__subscription_get.call$0());
      this.openedFile.close$0(0);
      this.completer.completeError$2(type$.Object._as(e), stackTrace);
    },
    $signature: 29
  };
  P._FileStreamConsumer_addStream__closure.prototype = {
    call$1: function(d) {
      var e, stackTrace, t1, exception, _this = this;
      type$.List_int._as(d);
      t1 = _this.__subscription_get;
      J.pause$0$z(t1.call$0());
      try {
        _this.openedFile.writeFrom$3(d, 0, J.get$length$asx(d)).then$1$2$onError(new P._FileStreamConsumer_addStream___closure(t1), _this.error, type$.void);
      } catch (exception) {
        e = H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        _this.error.call$2(e, stackTrace);
      }
    },
    $signature: 18
  };
  P._FileStreamConsumer_addStream___closure.prototype = {
    call$1: function(_) {
      type$.RandomAccessFile._as(_);
      return J.resume$0$z(this.__subscription_get.call$0());
    },
    $signature: 85
  };
  P._FileStreamConsumer_addStream__closure0.prototype = {
    call$0: function() {
      this.completer.complete$1(0, this.$this._file);
    },
    $signature: 0
  };
  P._FileStreamConsumer_close_closure.prototype = {
    call$1: function(openedFile) {
      return type$.RandomAccessFile._as(openedFile).close$0(0);
    },
    $signature: 86
  };
  P._FileStreamConsumer_close_closure0.prototype = {
    call$1: function(_) {
      return this.$this._file;
    },
    $signature: 87
  };
  P._File.prototype = {
    open$1$mode: function(_, mode) {
      if (mode !== C.FileMode_0 && mode !== C.FileMode_1 && mode !== C.FileMode_2 && mode !== C.FileMode_3 && mode !== C.FileMode_4)
        return P.Future_Future$error(new P.ArgumentError(false, null, null, "Invalid file mode for this operation"), null, type$.RandomAccessFile);
      return P._File__dispatchWithNamespace(5, [null, this._rawPath, mode._mode]).then$1$1(new P._File_open_closure(this), type$.RandomAccessFile);
    },
    length$0: function(_) {
      return P._File__dispatchWithNamespace(12, [null, this._rawPath]).then$1$1(new P._File_length_closure(this), type$.int);
    },
    toString$0: function(_) {
      return "File: '" + this._path + "'";
    },
    $isFile0: 1
  };
  P._File_open_closure.prototype = {
    call$1: function(response) {
      var t1;
      response.$index(0, 0);
      t1 = P._exceptionFromResponse(response, "Cannot open file", this.$this._path);
      throw H.wrapException(t1);
    },
    $signature: 23
  };
  P._File_length_closure.prototype = {
    call$1: function(response) {
      var t1;
      response.$index(0, 0);
      t1 = P._exceptionFromResponse(response, "Cannot retrieve length of file", this.$this._path);
      throw H.wrapException(t1);
    },
    $signature: 90
  };
  P._RandomAccessFile_close_closure.prototype = {
    call$1: function(result) {
      var t2,
        t1 = J.getInterceptor$(result);
      if (t1.$eq(result, -1))
        throw H.wrapException(P.FileSystemException$("Cannot close file", this.$this.path, null));
      t2 = this.$this;
      t1 = t2.closed || t1.$eq(result, 0);
      t2.closed = t1;
      if (t1) {
        t1 = t2.get$_resourceInfo();
        $._FileResourceInfo_openFiles.remove$1(0, t1.id);
      }
    },
    $signature: 1
  };
  P._RandomAccessFile_writeFrom_closure.prototype = {
    call$1: function(response) {
      var t1, t2, t3, t4, _this = this;
      if (type$.List_dynamic._is(response) && !J.$eq$(J.$index$asx(response, 0), 0))
        throw H.wrapException(P._exceptionFromResponse(response, "writeFrom failed", _this.$this.path));
      t1 = _this.$this;
      t2 = t1.get$_resourceInfo();
      t3 = _this._box_0;
      t2.writeBytes += t3.end - (_this.start - t3.result.start);
      ++t2.writeCount;
      t3 = $.$get$_IOResourceInfo__startTime();
      t4 = C.JSInt_methods._tdivFast$1($.$get$_IOResourceInfo__sw().get$elapsedMicroseconds(), 1000);
      if (typeof t3 !== "number")
        return t3.$add();
      t2.lastWriteTime = t3 + t4;
      return t1;
    },
    $signature: 23
  };
  P.FileSystemEntity.prototype = {};
  P._StreamSinkImpl.prototype = {
    add$1: function(_, data) {
      H._instanceType(this)._eval$1("_StreamSinkImpl.T")._as(data);
      if (this._isClosed)
        throw H.wrapException(P.StateError$("StreamSink is closed"));
      this.get$_io$_controller().add$1(0, data);
    },
    addError$2: function(error, stackTrace) {
      if (this._isClosed)
        throw H.wrapException(P.StateError$("StreamSink is closed"));
      this.get$_io$_controller().addError$2(error, stackTrace);
    },
    addStream$1: function(_, stream) {
      var t1, future, _this = this;
      H._instanceType(_this)._eval$1("Stream<_StreamSinkImpl.T>")._as(stream);
      if (_this._isBound)
        throw H.wrapException(P.StateError$("StreamSink is already bound to a stream"));
      if (_this._hasError)
        return _this._doneCompleter.future;
      _this._isBound = true;
      t1 = _this._controllerCompleter;
      future = t1 == null ? _this._io$_target.addStream$1(0, stream) : t1.future.then$1$1(new P._StreamSinkImpl_addStream_closure(_this, stream), type$.dynamic);
      t1 = _this._controllerInstance;
      if (t1 != null)
        t1.close$0(0);
      return future.whenComplete$1(new P._StreamSinkImpl_addStream_closure0(_this));
    },
    close$0: function(_) {
      var t1, _this = this;
      if (_this._isBound)
        throw H.wrapException(P.StateError$("StreamSink is bound to a stream"));
      if (!_this._isClosed) {
        _this._isClosed = true;
        t1 = _this._controllerInstance;
        if (t1 != null)
          t1.close$0(0);
        else
          _this._closeTarget$0();
      }
      return _this._doneCompleter.future;
    },
    _closeTarget$0: function() {
      this._io$_target.close$0(0).then$1$2$onError(this.get$_completeDoneValue(), this.get$_completeDoneError(), type$.void);
    },
    _completeDoneValue$1: function(value) {
      var t1 = this._doneCompleter;
      if (t1.future._state === 0)
        t1.complete$1(0, value);
    },
    _completeDoneError$2: function(error, stackTrace) {
      var t1;
      type$.nullable_StackTrace._as(stackTrace);
      t1 = this._doneCompleter;
      if (t1.future._state === 0) {
        this._hasError = true;
        t1.completeError$2(type$.Object._as(error), stackTrace);
      }
    },
    get$_io$_controller: function() {
      var t1, _this = this;
      if (_this._isBound)
        throw H.wrapException(P.StateError$("StreamSink is bound to a stream"));
      if (_this._isClosed)
        throw H.wrapException(P.StateError$("StreamSink is closed"));
      if (_this._controllerInstance == null) {
        _this.set$_controllerInstance(P.StreamController_StreamController(true, H._instanceType(_this)._eval$1("_StreamSinkImpl.T")));
        _this._controllerCompleter = new P._AsyncCompleter(new P._Future($.Zone__current, type$._Future_dynamic), type$._AsyncCompleter_dynamic);
        t1 = _this.get$_io$_controller();
        _this._io$_target.addStream$1(0, new P._ControllerStream(t1, H._instanceType(t1)._eval$1("_ControllerStream<1>"))).then$1$2$onError(new P._StreamSinkImpl__controller_closure1(_this), new P._StreamSinkImpl__controller_closure2(_this), type$.Null);
      }
      t1 = _this._controllerInstance;
      t1.toString;
      return t1;
    },
    set$_controllerInstance: function(_controllerInstance) {
      this._controllerInstance = H._instanceType(this)._eval$1("StreamController<_StreamSinkImpl.T>?")._as(_controllerInstance);
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isSink: 1
  };
  P._StreamSinkImpl_addStream_closure.prototype = {
    call$1: function(_) {
      return this.$this._io$_target.addStream$1(0, this.stream);
    },
    $signature: 20
  };
  P._StreamSinkImpl_addStream_closure0.prototype = {
    call$0: function() {
      this.$this._isBound = false;
    },
    $signature: 3
  };
  P._StreamSinkImpl__controller_closure1.prototype = {
    call$1: function(_) {
      var t1 = this.$this;
      if (t1._isBound) {
        t1._controllerCompleter.complete$1(0, t1);
        t1._controllerCompleter = null;
        t1.set$_controllerInstance(null);
      } else
        t1._closeTarget$0();
    },
    $signature: 1
  };
  P._StreamSinkImpl__controller_closure2.prototype = {
    call$2: function(error, stackTrace) {
      var t3,
        t1 = this.$this,
        t2 = type$.nullable_StackTrace;
      if (t1._isBound) {
        t3 = t1._controllerCompleter;
        t3.toString;
        t3.completeError$2(type$.Object._as(error), t2._as(stackTrace));
        t1._controllerCompleter = null;
        t1.set$_controllerInstance(null);
      } else
        t1._completeDoneError$2(error, t2._as(stackTrace));
    },
    $signature: 4
  };
  P._IOSinkImpl.prototype = {$isStringSink: 1};
  P._DomainNetworkPolicy.prototype = {
    matchScore$1: function(host) {
      var t1 = this.domain,
        domainLength = t1.length,
        lengthDelta = host.length - domainLength;
      if (C.JSString_methods.endsWith$1(host, t1))
        if (lengthDelta !== 0)
          t1 = this.includesSubDomains && C.JSString_methods.codeUnitAt$1(host, lengthDelta - 1) === 46;
        else
          t1 = true;
      else
        t1 = false;
      if (t1) {
        t1 = this.includesSubDomains ? 0 : 1;
        return domainLength * 2 + t1;
      }
      return -1;
    },
    checkConflict$1: function(existingPolicies) {
      var t1, t2, t3, _i, existingPolicy, _this = this;
      type$.List__DomainNetworkPolicy._as(existingPolicies);
      for (t1 = existingPolicies.length, t2 = _this.includesSubDomains, t3 = _this.domain, _i = 0; _i < t1; ++_i) {
        existingPolicy = existingPolicies[_i];
        if (t2 === existingPolicy.includesSubDomains && t3 === existingPolicy.domain) {
          if (_this.allowInsecureConnections === existingPolicy.allowInsecureConnections)
            return false;
          throw H.wrapException(P.StateError$("Contradiction in the domain security policies: '" + _this.toString$0(0) + "' contradicts '" + existingPolicy.toString$0(0) + "'"));
        }
      }
      return true;
    },
    toString$0: function(_) {
      var subDomainPrefix = this.includesSubDomains ? "*." : "",
        insecureConnectionPermission = this.allowInsecureConnections ? "Allows" : "Disallows";
      return subDomainPrefix + this.domain + ": " + insecureConnectionPermission + " insecure connections";
    }
  };
  P.SecureSocket_startConnect_closure.prototype = {
    call$1: function(rawState) {
      type$.ConnectionTask_RawSecureSocket._as(rawState);
      return new P.ConnectionTask(rawState.get$socket().then$1$1(new P.SecureSocket_startConnect__closure(), type$.SecureSocket), rawState.get$_io$_onCancel(), type$.ConnectionTask_SecureSocket);
    },
    $signature: 92
  };
  P.SecureSocket_startConnect__closure.prototype = {
    call$1: function(rawSocket) {
      return P.SecureSocket_SecureSocket$_(rawSocket);
    },
    $signature: 24
  };
  P.SecureSocket_secure_closure.prototype = {
    call$1: function(detachedRaw) {
      var _this = this;
      return P.RawSecureSocket_secure(detachedRaw.$index(0, 0), _this.context, _this.host, _this.onBadCertificate, type$.nullable_StreamSubscription_RawSocketEvent._as(detachedRaw.$index(0, 1)), _this.supportedProtocols);
    },
    $signature: 94
  };
  P.SecureSocket_secure_closure0.prototype = {
    call$1: function(raw) {
      return P.SecureSocket_SecureSocket$_(raw);
    },
    $signature: 24
  };
  P.RawSecureSocket_startConnect_closure.prototype = {
    call$1: function(rawState) {
      type$.ConnectionTask_RawSocket._as(rawState);
      return new P.ConnectionTask(rawState.get$socket().then$1$1(new P.RawSecureSocket_startConnect__closure(this.context, this.onBadCertificate, this.supportedProtocols), type$.RawSecureSocket), rawState.get$_io$_onCancel(), type$.ConnectionTask_RawSecureSocket);
    },
    $signature: 95
  };
  P.RawSecureSocket_startConnect__closure.prototype = {
    call$1: function(rawSocket) {
      return P.RawSecureSocket_secure(rawSocket, this.context, null, this.onBadCertificate, null, this.supportedProtocols);
    },
    $signature: 96
  };
  P._FilterStatus.prototype = {};
  P._RawSecureSocket.prototype = {
    get$_socketSubscription: function() {
      var t1 = H.throwExpression(H.LateError$fieldNI("_socketSubscription"));
      return t1;
    },
    _RawSecureSocket$11: function(address, requestedPort, isServer, context, _socket, subscription, _bufferedData, requestClientCertificate, requireClientCertificate, onBadCertificate, supportedProtocols) {
      var secureFilter, encodedProtocols, e, s, t3, exception, _this = this,
        t1 = _this._io$_controller,
        t2 = _this.get$_onSubscriptionStateChange();
      t1.set$onListen(t2);
      t3 = _this.get$_onPauseStateChange();
      t1.set$onPause(0, t3);
      t1.set$onResume(0, t3);
      t1.set$onCancel(0, t2);
      t2 = _this._secureFilter;
      t2.toString;
      secureFilter = t2;
      secureFilter.init$0();
      secureFilter.registerHandshakeCompleteCallback$1(_this.get$_secureHandshakeCompleteHandler());
      secureFilter.registerBadCertificateCallback$1(_this.get$_onBadCertificateWrapper());
      t1 = _this._io$_socket;
      t1.set$readEventsEnabled(true);
      t1.set$writeEventsEnabled(false);
      t1 = type$.StreamSubscription_RawSocketEvent._as(t1.listen$3$onDone$onError(_this.get$_eventDispatcher(), _this.get$_doneHandler(), _this.get$_reportError()));
      _this.set$___RawSecureSocket__socketSubscription(t1);
      try {
        encodedProtocols = P.SecurityContext__protocolsToLengthEncoding(supportedProtocols);
        t1 = _this.address;
        t1 = t1.get$host(t1);
        secureFilter.connect$6(t1, _this.context, false, false, false, encodedProtocols);
        _this._secureHandshake$0();
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        _this._reportError$2(e, s);
      }
    },
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1;
      type$.nullable_void_Function_RawSocketEvent._as(onData);
      type$.nullable_void_Function._as(onDone);
      this._sendWriteEvent$0();
      t1 = this._io$_controller;
      return new P._ControllerStream(t1, H._instanceType(t1)._eval$1("_ControllerStream<1>")).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$3$cancelOnError$onDone: function(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$2$cancelOnError: function(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    },
    _completeCloseCompleter$1: function(dummy) {
      var t1;
      type$.nullable_RawSocket._as(dummy);
      t1 = this._closeCompleter;
      if (t1.future._state === 0)
        t1.complete$1(0, this);
    },
    _completeCloseCompleter$0: function() {
      return this._completeCloseCompleter$1(null);
    },
    _io$_close$0: function() {
      var _this = this;
      _this._closedRead = _this._closedWrite = true;
      _this._io$_socket.close$0(0).then$1$1(_this.get$_completeCloseCompleter(), type$.void);
      _this._socketClosedRead = _this._socketClosedWrite = true;
      _this.get$_socketSubscription();
      _this.get$_socketSubscription().cancel$0(0);
      _this._io$_controller.close$0(0);
      _this._status = 203;
    },
    shutdown$1: function(direction) {
      var _this = this;
      if (direction === C.C_SocketDirection || direction === C.C_SocketDirection0) {
        _this._closedWrite = true;
        if (_this._filterStatus.writeEmpty) {
          _this._io$_socket.shutdown$1(C.C_SocketDirection);
          _this._socketClosedWrite = true;
          if (_this._closedRead)
            _this._io$_close$0();
        }
      }
      if (direction === C.C_SocketDirection1 || direction === C.C_SocketDirection0) {
        _this._socketClosedRead = _this._closedRead = true;
        _this._io$_socket.shutdown$1(C.C_SocketDirection1);
        if (_this._socketClosedWrite)
          _this._io$_close$0();
      }
    },
    _onBadCertificateWrapper$1: function(certificate) {
      return this.onBadCertificate.call$1(certificate);
    },
    _eventDispatcher$1: function($event) {
      var e, stackTrace, exception, _this = this;
      type$.RawSocketEvent._as($event);
      try {
        if ($event === C.RawSocketEvent_0) {
          _this._readSocket$0();
          _this._filterPending = true;
          _this._tryFilter$0();
        } else if ($event === C.RawSocketEvent_1) {
          _this._writeSocket$0();
          _this._filterPending = true;
          _this._tryFilter$0();
        } else if ($event === C.RawSocketEvent_2)
          _this._closeHandler$0();
      } catch (exception) {
        e = H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        _this._reportError$2(e, stackTrace);
      }
    },
    _doneHandler$0: function() {
      if (this._filterStatus.readEmpty)
        this._io$_close$0();
    },
    _reportError$2: function(e, stackTrace) {
      var t1, _this = this;
      type$.nullable_StackTrace._as(stackTrace);
      if (_this._status === 203)
        return;
      else {
        t1 = type$.Object;
        if (_this._connectPending)
          _this._handshakeComplete.completeError$2(t1._as(e), stackTrace);
        else
          _this._io$_controller.addError$2(t1._as(e), stackTrace);
      }
      _this._io$_close$0();
    },
    _reportError$1: function(e) {
      return this._reportError$2(e, null);
    },
    _closeHandler$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$self = this, t1;
      var $async$_closeHandler$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._status;
              $async$goto = t1 === 202 ? 3 : 5;
              break;
            case 3:
              // then
              if ($async$self._closedRead) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self._socketClosedRead = true;
              $async$goto = $async$self._filterStatus.readEmpty ? 6 : 8;
              break;
            case 6:
              // then
              $async$self._closedRead = true;
              $async$self._io$_controller.add$1(0, C.RawSocketEvent_2);
              if ($async$self._socketClosedWrite)
                $async$self._io$_close$0();
              // goto join
              $async$goto = 7;
              break;
            case 8:
              // else
              $async$self._filterPending = true;
              $async$goto = 9;
              return P._asyncAwait($async$self._tryFilter$0(), $async$_closeHandler$0);
            case 9:
              // returning from await.
            case 7:
              // join
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = t1 === 201 ? 10 : 11;
              break;
            case 10:
              // then
              $async$self._socketClosedRead = true;
              $async$goto = $async$self._filterStatus.readEmpty ? 12 : 14;
              break;
            case 12:
              // then
              $async$self._reportError$2(new P.HandshakeException("HandshakeException", "Connection terminated during handshake", null), null);
              // goto join
              $async$goto = 13;
              break;
            case 14:
              // else
              $async$goto = 15;
              return P._asyncAwait($async$self._secureHandshake$0(), $async$_closeHandler$0);
            case 15:
              // returning from await.
            case 13:
              // join
            case 11:
              // join
            case 4:
              // join
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_closeHandler$0, $async$completer);
    },
    _secureHandshake$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, needRetryHandshake, e, stackTrace, exception, $async$exception;
      var $async$_secureHandshake$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return P._asyncAwait($async$self._secureFilter.handshake$0(), $async$_secureHandshake$0);
            case 6:
              // returning from await.
              needRetryHandshake = $async$result;
              $async$goto = H.boolConversionCheck(needRetryHandshake) ? 7 : 9;
              break;
            case 7:
              // then
              $async$goto = 10;
              return P._asyncAwait($async$self._secureHandshake$0(), $async$_secureHandshake$0);
            case 10:
              // returning from await.
              // goto join
              $async$goto = 8;
              break;
            case 9:
              // else
              $async$self._filterStatus.writeEmpty = false;
              $async$self._readSocket$0();
              $async$self._writeSocket$0();
              $async$self._filterPending = true;
              $async$goto = 11;
              return P._asyncAwait($async$self._tryFilter$0(), $async$_secureHandshake$0);
            case 11:
              // returning from await.
            case 8:
              // join
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              e = H.unwrapException($async$exception);
              stackTrace = H.getTraceFromException($async$exception);
              $async$self._reportError$2(e, stackTrace);
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return P._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$_secureHandshake$0, $async$completer);
    },
    _secureHandshakeCompleteHandler$0: function() {
      var error, stack, exception, _this = this;
      _this._status = 202;
      if (_this._connectPending) {
        _this._connectPending = false;
        try {
          _this._secureFilter.selectedProtocol$0();
          P.Timer_Timer(C.Duration_0, new P._RawSecureSocket__secureHandshakeCompleteHandler_closure(_this));
        } catch (exception) {
          error = H.unwrapException(exception);
          stack = H.getTraceFromException(exception);
          _this._handshakeComplete.completeError$2(error, stack);
        }
      }
    },
    _onPauseStateChange$0: function() {
      var t3, _this = this,
        t1 = _this._io$_controller,
        t2 = t1._state;
      t2 = (t2 & 1) !== 0 ? (t1.get$_async$_subscription()._state & 4) !== 0 : (t2 & 2) === 0;
      t3 = _this._pauseCount;
      if (t2)
        _this._pauseCount = t3 + 1;
      else {
        t2 = t3 - 1;
        _this._pauseCount = t2;
        if (t2 === 0) {
          _this._scheduleReadEvent$0();
          _this._sendWriteEvent$0();
        }
      }
      if (!_this._socketClosedRead || !_this._socketClosedWrite) {
        t2 = t1._state;
        if ((t2 & 1) !== 0 ? (t1.get$_async$_subscription()._state & 4) !== 0 : (t2 & 2) === 0)
          _this.get$_socketSubscription().pause$0(0);
        else
          _this.get$_socketSubscription().resume$0(0);
      }
    },
    _onSubscriptionStateChange$0: function() {
    },
    _tryFilter$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, e, st, t1, t2, exception, $async$exception;
      var $async$_tryFilter$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              t1 = $async$self._io$_socket;
            case 7:
              // for condition
              // trivial condition
              if ($async$self._status === 203) {
                // goto return
                $async$goto = 1;
                break;
              }
              if (!$async$self._filterPending || $async$self._filterActive) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self._filterActive = true;
              $async$self._filterPending = false;
              $async$goto = 9;
              return P._asyncAwait($async$self._pushAllFilterStages$0(), $async$_tryFilter$0);
            case 9:
              // returning from await.
              $async$self.set$_filterStatus($async$result);
              $async$self._filterActive = false;
              if ($async$self._status === 203) {
                $async$self._secureFilter.destroy$0();
                $async$self._secureFilter = null;
                // goto return
                $async$goto = 1;
                break;
              }
              t1.set$readEventsEnabled(true);
              if ($async$self._filterStatus.writeEmpty && $async$self._closedWrite && !$async$self._socketClosedWrite) {
                $async$self.shutdown$1(C.C_SocketDirection);
                if ($async$self._status === 203) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
              }
              if ($async$self._filterStatus.readEmpty && $async$self._socketClosedRead && !$async$self._closedRead) {
                if ($async$self._status === 201) {
                  $async$self._secureFilter.handshake$0();
                  if ($async$self._status === 201) {
                    t1 = P.HandshakeException$("Connection terminated during handshake");
                    throw H.wrapException(t1);
                  }
                }
                $async$self._closeHandler$0();
              }
              if ($async$self._status === 203) {
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = $async$self._filterStatus;
              $async$goto = t2.progress ? 10 : 11;
              break;
            case 10:
              // then
              $async$self._filterPending = true;
              if (t2.writeEncryptedNoLongerEmpty)
                $async$self._writeSocket$0();
              if ($async$self._filterStatus.writePlaintextNoLongerFull)
                $async$self._sendWriteEvent$0();
              if ($async$self._filterStatus.readEncryptedNoLongerFull)
                $async$self._readSocket$0();
              if ($async$self._filterStatus.readPlaintextNoLongerEmpty)
                $async$self._scheduleReadEvent$0();
              $async$goto = $async$self._status === 201 ? 12 : 13;
              break;
            case 12:
              // then
              $async$goto = 14;
              return P._asyncAwait($async$self._secureHandshake$0(), $async$_tryFilter$0);
            case 14:
              // returning from await.
            case 13:
              // join
            case 11:
              // join
              // goto for condition
              $async$goto = 7;
              break;
            case 8:
              // after for
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = H.unwrapException($async$exception);
              st = H.getTraceFromException($async$exception);
              $async$self._reportError$2(e, st);
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$_tryFilter$0, $async$completer);
    },
    _readSocketOrBufferedData$1: function(bytes) {
      if (!this._socketClosedRead)
        return this._io$_socket.read$1(0, bytes);
      else
        return null;
    },
    _readSocket$0: function() {
      var _this = this;
      if (_this._status === 203)
        return;
      if (_this._secureFilter.get$buffers().$index(0, 2).writeFromSource$1(_this.get$_readSocketOrBufferedData()).$gt(0, 0))
        _this._filterStatus.readEmpty = false;
      else
        _this._io$_socket.set$readEventsEnabled(false);
    },
    _writeSocket$0: function() {
      if (this._socketClosedWrite)
        return;
      var t1 = this._io$_socket;
      if (this._secureFilter.get$buffers().$index(0, 3).readToSocket$1(t1))
        t1.set$writeEventsEnabled(true);
    },
    _scheduleReadEvent$0: function() {
      var t1, _this = this;
      if (!_this._pendingReadEvent) {
        _this._pauseCount === 0;
        t1 = false;
      } else
        t1 = false;
      if (t1) {
        _this._pendingReadEvent = true;
        P.Timer_Timer(C.Duration_0, _this.get$_sendReadEvent());
      }
    },
    _sendReadEvent$0: function() {
      var t1, _this = this;
      _this._pendingReadEvent = false;
      if (_this._status !== 203) {
        _this._pauseCount === 0;
        t1 = false;
      } else
        t1 = false;
      if (t1) {
        _this._io$_controller.add$1(0, C.RawSocketEvent_0);
        _this._scheduleReadEvent$0();
      }
    },
    _sendWriteEvent$0: function() {
      if (!this._closedWrite)
        if (this._writeEventsEnabled)
          this._pauseCount === 0;
    },
    _pushAllFilterStages$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$._FilterStatus),
        $async$self = this, bufs, i, t2, t1, args;
      var $async$_pushAllFilterStages$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._status;
              args = P.List_List$filled(10, null, false, type$.dynamic);
              C.JSArray_methods.$indexSet(args, 0, $async$self._secureFilter._pointer$0());
              C.JSArray_methods.$indexSet(args, 1, t1 !== 202);
              bufs = $async$self._secureFilter.get$buffers();
              for (i = 0; i < 4; ++i) {
                t1 = 2 * i;
                t2 = bufs.$index(0, i);
                C.JSArray_methods.$indexSet(args, t1 + 2, t2.get$start(t2));
                t2 = bufs.$index(0, i);
                C.JSArray_methods.$indexSet(args, t1 + 3, t2.get$end(t2));
              }
              $async$goto = 2;
              return P._asyncAwait(P._IOService__dispatch(42, args), $async$_pushAllFilterStages$0);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$_pushAllFilterStages$0, $async$completer);
    },
    set$___RawSecureSocket__socketSubscription: function(___RawSecureSocket__socketSubscription) {
      this.___RawSecureSocket__socketSubscription = type$.nullable_StreamSubscription_RawSocketEvent._as(___RawSecureSocket__socketSubscription);
    },
    set$_filterStatus: function(_filterStatus) {
      this._filterStatus = type$._FilterStatus._as(_filterStatus);
    },
    $isRawSecureSocket: 1,
    $isRawSocket: 1
  };
  P._RawSecureSocket__secureHandshakeCompleteHandler_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      return t1._handshakeComplete.complete$1(0, t1);
    },
    $signature: 0
  };
  P.TlsException.prototype = {
    toString$0: function(_) {
      var t1 = "" + this.type,
        t2 = this.message;
      if (t2.length !== 0)
        t1 += ": " + t2;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.HandshakeException.prototype = {};
  P.SocketDirection.prototype = {};
  P.SocketOption.prototype = {};
  P.RawSocketEvent.prototype = {
    toString$0: function(_) {
      var t1 = this._io$_value;
      if (t1 >= 4)
        return H.ioore(C.List_I4v, t1);
      return C.List_I4v[t1];
    }
  };
  P.ConnectionTask.prototype = {};
  P.SocketException.prototype = {
    toString$0: function(_) {
      var t1 = "" + "SocketException",
        t2 = this.message;
      if (t2.length !== 0)
        t1 += ": " + t2;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.Length.prototype = {$isLength: 1};
  P.LengthList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      type$.Length._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  P.Number.prototype = {$isNumber: 1};
  P.NumberList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      type$.Number._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  P.PointList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.StringList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      H._asString(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  P.Transform.prototype = {$isTransform: 1};
  P.TransformList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      type$.Transform._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  P._LengthList_Interceptor_ListMixin.prototype = {};
  P._LengthList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._NumberList_Interceptor_ListMixin.prototype = {};
  P._NumberList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._StringList_Interceptor_ListMixin.prototype = {};
  P._StringList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._TransformList_Interceptor_ListMixin.prototype = {};
  P._TransformList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P.AudioBuffer.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.AudioParamMap.prototype = {
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H._asString(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      type$.void_Function_String_dynamic._as(f);
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], type$.JSArray_String);
      this.forEach$1(receiver, new P.AudioParamMap_keys_closure(keys));
      return keys;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return receiver.size === 0;
    },
    $isMap: 1
  };
  P.AudioParamMap_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 9
  };
  P.AudioTrackList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.BaseAudioContext.prototype = {};
  P.OfflineAudioContext.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P._AudioParamMap_Interceptor_MapMixin.prototype = {};
  P.SqlError.prototype = {
    get$message: function(receiver) {
      return receiver.message;
    }
  };
  P.SqlResultSetRowList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1;
      H._asInt(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      t1 = P.convertNativeToDart_Dictionary(receiver.item(index));
      t1.toString;
      return t1;
    },
    $indexSet: function(receiver, index, value) {
      type$.Map_dynamic_dynamic._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  P._SqlResultSetRowList_Interceptor_ListMixin.prototype = {};
  P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  (function aliases() {
    var _ = H._StreamSinkImpl0.prototype;
    _.super$_StreamSinkImpl$add = _.add$1;
    _.super$_StreamSinkImpl$close = _.close$0;
    _ = H._HttpOutboundMessage.prototype;
    _.super$_HttpOutboundMessage$add = _.add$1;
    _ = J.Interceptor.prototype;
    _.super$Interceptor$toString = _.toString$0;
    _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = P._BufferingStreamSubscription.prototype;
    _.super$_BufferingStreamSubscription$_add = _._add$1;
    _.super$_BufferingStreamSubscription$_addError = _._addError$2;
    _.super$_BufferingStreamSubscription$_close = _._close$0;
    _ = P.ListMixin.prototype;
    _.super$ListMixin$setRange = _.setRange$4;
    _ = P._StringSinkConversionSink.prototype;
    _.super$_StringSinkConversionSink$close = _.close$0;
  })();
  (function installTearOffs() {
    var _static = hunkHelpers.installStaticTearOff,
      _instance_1_u = hunkHelpers._instance_1u,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance_0_u = hunkHelpers._instance_0u,
      _static_0 = hunkHelpers._static_0,
      _static_1 = hunkHelpers._static_1,
      _static_2 = hunkHelpers._static_2,
      _instance = hunkHelpers.installInstanceTearOff,
      _instance_1_i = hunkHelpers._instance_1i,
      _instance_0_i = hunkHelpers._instance_0i;
    _static(H, "_http_HttpClient_findProxyFromEnvironment$closure", 1, null, ["call$2$environment", "call$1"], ["HttpClient_findProxyFromEnvironment", function(url) {
      return H.HttpClient_findProxyFromEnvironment(url, null);
    }], 102, 0);
    var _;
    _instance_1_u(_ = H._StreamSinkImpl0.prototype, "get$__http$_completeDoneValue", "__http$_completeDoneValue$1", 10);
    _instance_2_u(_, "get$__http$_completeDoneError", "__http$_completeDoneError$2", 7);
    _instance_1_u(_ = H._HttpParser.prototype, "get$__http$_onData", "__http$_onData$1", 52);
    _instance_0_u(_, "get$__http$_onDone", "__http$_onDone$0", 0);
    _instance_1_u(H.CastStreamSubscription.prototype, "get$__internal$_onData", "__internal$_onData$1", 6);
    _static_0(H, "_js_helper_Primitives_dateNow$closure", "Primitives_dateNow", 25);
    _static_1(P, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 14);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 14);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 14);
    _static_0(P, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 0);
    _static_1(P, "async___nullDataHandler$closure", "_nullDataHandler", 10);
    _static_2(P, "async___nullErrorHandler$closure", "_nullErrorHandler", 7);
    _static_0(P, "async___nullDoneHandler$closure", "_nullDoneHandler", 0);
    _instance(P._Completer.prototype, "get$completeError", 0, 1, null, ["call$2", "call$1"], ["completeError$2", "completeError$1"], 27, 0);
    _instance_2_u(P._Future.prototype, "get$_completeError", "_completeError$2", 7);
    _instance_1_i(_ = P._StreamController.prototype, "get$add", "add$1", 6);
    _instance(_, "get$addError", 0, 1, null, ["call$2", "call$1"], ["addError$2", "addError$1"], 27, 0);
    _instance_0_i(_, "get$close", "close$0", 19);
    _instance_0_u(_ = P._ControllerSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance(_ = P._BufferingStreamSubscription.prototype, "get$pause", 1, 0, null, ["call$1", "call$0"], ["pause$1", "pause$0"], 69, 0);
    _instance_0_i(_, "get$resume", "resume$0", 0);
    _instance_0_u(_, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_0_u(P._DoneStreamSubscription.prototype, "get$_sendDone", "_sendDone$0", 0);
    _instance_0_u(_ = P._ForwardingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_1_u(_, "get$_handleData", "_handleData$1", 6);
    _instance_2_u(_, "get$_handleError", "_handleError$2", 29);
    _instance_0_u(_, "get$_handleDone", "_handleDone$0", 0);
    _instance_0_u(_ = P._SinkTransformerStreamSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_1_u(_, "get$_handleData", "_handleData$1", 6);
    _instance_2_u(_, "get$_handleError", "_handleError$2", 7);
    _instance_0_u(_, "get$_handleDone", "_handleDone$0", 0);
    _static_1(P, "convert___defaultToEncodable$closure", "_defaultToEncodable", 26);
    _instance_1_i(P._FilterSink.prototype, "get$add", "add$1", 6);
    _instance_0_i(P._File.prototype, "get$length", "length$0", 88);
    _instance_1_u(_ = P._StreamSinkImpl.prototype, "get$_completeDoneValue", "_completeDoneValue$1", 10);
    _instance_2_u(_, "get$_completeDoneError", "_completeDoneError$2", 91);
    _instance(_ = P._RawSecureSocket.prototype, "get$_completeCloseCompleter", 0, 0, null, ["call$1", "call$0"], ["_completeCloseCompleter$1", "_completeCloseCompleter$0"], 97, 0);
    _instance_1_u(_, "get$_onBadCertificateWrapper", "_onBadCertificateWrapper$1", 21);
    _instance_1_u(_, "get$_eventDispatcher", "_eventDispatcher$1", 98);
    _instance_0_u(_, "get$_doneHandler", "_doneHandler$0", 0);
    _instance(_, "get$_reportError", 0, 1, null, ["call$2", "call$1"], ["_reportError$2", "_reportError$1"], 99, 0);
    _instance_0_u(_, "get$_secureHandshakeCompleteHandler", "_secureHandshakeCompleteHandler$0", 0);
    _instance_0_u(_, "get$_onPauseStateChange", "_onPauseStateChange$0", 0);
    _instance_0_u(_, "get$_onSubscriptionStateChange", "_onSubscriptionStateChange$0", 0);
    _instance_1_u(_, "get$_readSocketOrBufferedData", "_readSocketOrBufferedData$1", 100);
    _instance_0_u(_, "get$_sendReadEvent", "_sendReadEvent$0", 101);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.JS_CONST, H.HttpClientResponseCompressionState, H.HttpException, H.RedirectException, H.Closure, H._HttpHeaders, H._HeaderValue, H._Cookie, H._HttpProfileEvent, H._HttpProfileData, H._CopyingBytesBuilder, P.Stream, P.StreamTransformerBase, H._Uint8ListConversionSink, H._StreamSinkImpl0, H._HttpOutgoing, H._HttpClientConnection, H._ConnectionInfo, H._ConnectionTarget, H._HttpClient, H._ProxyConfiguration, H._Proxy, H._HttpConnectionInfo, H._AuthenticationScheme, H._RedirectInfo, J.Interceptor, J.ArrayIterator, H.CastStreamSubscription, P.Error, P._ListBase_Object_ListMixin, P.Iterable, H.ListIterator, P.Iterator, H.FixedLengthListMixin, H.UnmodifiableListMixin, H.ConstantMap, H.TypeErrorDecoder, H.NullThrownFromJavaScriptException, H.ExceptionAndStackTrace, H._StackTrace, P.MapMixin, H.LinkedHashMapCell, H.LinkedHashMapKeyIterator, H.JSSyntaxRegExp, H.Rti, H._FunctionParameters, P._TimerImpl, P._AsyncAwaitCompleter, P.AsyncError, P.TimeoutException, P._Completer, P._FutureListener, P._Future, P._AsyncCallbackEntry, P.StreamConsumer, P._StreamController, P._SyncStreamControllerDispatch, P._BufferingStreamSubscription, P._DelayedEvent, P._DelayedDone, P._PendingEvents, P._DoneStreamSubscription, P._StreamIterator, P._EventSinkWrapper, P._Zone, P._HashMapKeyIterator, P.__SetBase_Object_SetMixin, P._HashSetIterator, P.ListMixin, P._UnmodifiableMapMixin, P.MapView, P._ListQueueIterator, P.SetMixin, P.StringConversionSinkMixin, P.Codec, P._Base64Encoder, P.ChunkedConversionSink, P._ConverterStreamEventSink, P._JsonStringifier, P._StringConversionSinkAsStringSinkAdapter, P._Utf8Encoder, P.DateTime, P.Duration, P.OutOfMemoryError, P.StackOverflowError, P._Exception, P.FormatException, P.MapEntry, P.Null, P._StringStackTrace, P.Stopwatch, P.StringBuffer, P._Uri, P.UriData, P._SimpleUri, P.TimelineTask, P._AsyncBlock, W.CssStyleDeclarationBase, W.ImmutableListMixin, W.FixedSizeListIterator, P.OSError, P._BufferAndStart, P.FileMode, P.FileSystemException, P.FileSystemEntity, P._StreamSinkImpl, P._DomainNetworkPolicy, P._FilterStatus, P.TlsException, P.SocketDirection, P.SocketOption, P.RawSocketEvent, P.ConnectionTask, P.SocketException]);
    _inheritMany(H.Closure, [H.HttpDate__parseCookieDate_error, H.HttpDate__parseCookieDate_isEnd, H.HttpDate__parseCookieDate_isDelimiter, H.HttpDate__parseCookieDate_isNonDelimiter, H.HttpDate__parseCookieDate_isDigit, H.HttpDate__parseCookieDate_getMonth, H.HttpDate__parseCookieDate_toInt, H._HttpHeaders_forEach_closure, H._HttpHeaders__build_closure, H._HttpHeaders_toString_closure, H._HeaderValue_toString_closure, H._HeaderValue__parse_done, H._HeaderValue__parse_skipWS, H._HeaderValue__parse_parseValue, H._HeaderValue__parse_expect, H._HeaderValue__parse_maybeExpect, H._HeaderValue__parse_parseParameters, H._HeaderValue__parse_parseParameters_parseParameterName, H._HeaderValue__parse_parseParameters_parseParameterValue, H._Cookie__parseSetCookieValue_done, H._Cookie__parseSetCookieValue_parseName, H._Cookie__parseSetCookieValue_parseValue, H._Cookie__parseSetCookieValue_parseAttributes, H._Cookie__parseSetCookieValue_parseAttributes_parseAttributeName, H._Cookie__parseSetCookieValue_parseAttributes_parseAttributeValue, H._HttpProfileData_formatHeaders_closure, H._HttpProfileData_startResponse_formatRedirectInfo, H._HttpIncoming_listen_closure, H._HttpClientResponse_redirect_closure, H._HttpClientResponse_listen_closure, H._HttpClientResponse_listen_closure1, H._HttpClientResponse_listen_closure0, H._HttpClientResponse__authenticate_retry, H._HttpClientResponse__authenticate_retry_closure, H._HttpClientResponse__authenticate_retry__closure, H._HttpClientResponse__authenticate_authChallenge, H._HttpClientResponse__authenticate_findCredentials, H._HttpClientResponse__authenticate_requestAuthentication, H._HttpClientResponse__authenticate_closure, H._StreamSinkImpl__controller_closure, H._StreamSinkImpl__controller_closure0, H._HttpClientRequest_closure, H._HttpClientRequest_closure0, H._HttpClientRequest_done_closure, H._HttpClientRequest__onIncoming_closure, H._HttpClientRequest__onIncoming_closure0, H._HttpClientRequest__onIncoming_closure1, H._HttpClientRequest__onIncoming_closure2, H._HttpClientRequest__requestUri_uriStartingFromPath, H._HttpOutgoing_addStream_onData, H._HttpOutgoing_addStream_closure, H._HttpOutgoing_addStream_closure0, H._HttpOutgoing_close_finalize, H._HttpOutgoing_close_finalize_closure, H._HttpOutgoing_close_finalize_closure0, H._HttpClientConnection_closure, H._HttpClientConnection__closure, H._HttpClientConnection__closure0, H._HttpClientConnection_closure1, H._HttpClientConnection_closure0, H._HttpClientConnection_send_closure, H._HttpClientConnection_send__closure, H._HttpClientConnection_send___closure, H._HttpClientConnection_send__closure0, H._HttpClientConnection_send__closure1, H._HttpClientConnection_send__closure2, H._HttpClientConnection_send_closure0, H._HttpClientConnection_close_closure, H._HttpClientConnection_createProxyTunnel_closure, H._HttpClientConnection_createProxyTunnel_closure0, H._HttpClientConnection_startTimer_closure, H._ConnectionTarget_connect_callback, H._ConnectionTarget_connect_closure, H._ConnectionTarget_connect__closure, H._ConnectionTarget_connect___closure, H._ConnectionTarget_connect__closure0, H._ConnectionTarget_connect_closure0, H._HttpClient__openUrl_closure, H._HttpClient__openUrl_closure_send, H._HttpClient__openUrl_closure0, H._HttpClient__openUrlFromRequest_closure, H._HttpClient__getConnectionTarget_closure, H._HttpClient__getConnection_connect, H._HttpClient__findCredentials_closure, H._HttpClient__findProxyFromEnvironment_checkNoProxy, H._HttpClient__findProxyFromEnvironment_checkNoProxy_closure, H._HttpClient__findProxyFromEnvironment_checkProxy, H._ProxyConfiguration_closure, H._HttpParser$__closure, H._HttpParser$__closure0, H._HttpParser$__closure1, H._HttpParser$__closure2, H._HttpParser__createIncoming_closure, H._HttpParser__createIncoming_closure0, H._HttpParser__createIncoming_closure1, H._HttpParser__createIncoming_closure2, H.nullFuture_closure, H.Primitives_initTicker_closure, H.TearOffClosure, H.initHooks_closure, H.initHooks_closure0, H.initHooks_closure1, P._AsyncRun__initializeScheduleImmediate_internalCallback, P._AsyncRun__initializeScheduleImmediate_closure, P._AsyncRun__scheduleImmediateJsOverride_internalCallback, P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, P._TimerImpl_internalCallback, P._awaitOnObject_closure, P._awaitOnObject_closure0, P._wrapJsFunctionForAsync_closure, P.Future_wait__error_set, P.Future_wait__stackTrace_set, P.Future_wait__error_get, P.Future_wait__stackTrace_get, P.Future_wait_handleError, P.Future_wait_closure, P._Future__addListener_closure, P._Future__prependListeners_closure, P._Future__chainForeignFuture_closure, P._Future__chainForeignFuture_closure0, P._Future__chainForeignFuture_closure1, P._Future__asyncCompleteWithValue_closure, P._Future__chainFuture_closure, P._Future__asyncCompleteError_closure, P._Future__propagateToListeners_handleWhenCompleteCallback, P._Future__propagateToListeners_handleWhenCompleteCallback_closure, P._Future__propagateToListeners_handleValueCallback, P._Future__propagateToListeners_handleError, P._Future_timeout_closure, P._Future_timeout_closure0, P._Future_timeout_closure1, P.Stream_pipe_closure, P.Stream_length_closure, P.Stream_length_closure0, P._StreamController__subscribe_closure, P._StreamController__recordCancel_complete, P._AddStreamState_cancel_closure, P._BufferingStreamSubscription_asFuture_closure, P._BufferingStreamSubscription_asFuture_closure0, P._BufferingStreamSubscription_asFuture__closure, P._BufferingStreamSubscription__sendError_sendError, P._BufferingStreamSubscription__sendDone_sendDone, P._PendingEvents_schedule_closure, P._DoneStreamSubscription_asFuture_closure, P._rootHandleUncaughtError_closure, P._RootZone_bindCallbackGuarded_closure, P.HashMap_HashMap$from_closure, P.LinkedHashMap_LinkedHashMap$from_closure, P.MapBase_mapToString_closure, P.MapMixin_entries_closure, P.Converter_bind_closure, P._JsonStringifier_writeMap_closure, P.Duration_toString_sixDigits, P.Duration_toString_twoDigits, P.Uri__parseIPv4Address_error, P.Uri_parseIPv6Address_error, P.Uri_parseIPv6Address_parseHex, P._createTables_build, P._createTables_setChars, P._createTables_setRange, W.MidiInputMap_keys_closure, W.MidiOutputMap_keys_closure, W.RtcStatsReport_keys_closure, W.Storage_keys_closure, P._FileStreamConsumer_addStream_closure, P._FileStreamConsumer_addStream_closure___subscription_set, P._FileStreamConsumer_addStream_closure___subscription_get, P._FileStreamConsumer_addStream_closure_error, P._FileStreamConsumer_addStream__closure, P._FileStreamConsumer_addStream___closure, P._FileStreamConsumer_addStream__closure0, P._FileStreamConsumer_close_closure, P._FileStreamConsumer_close_closure0, P._File_open_closure, P._File_length_closure, P._RandomAccessFile_close_closure, P._RandomAccessFile_writeFrom_closure, P._StreamSinkImpl_addStream_closure, P._StreamSinkImpl_addStream_closure0, P._StreamSinkImpl__controller_closure1, P._StreamSinkImpl__controller_closure2, P.SecureSocket_startConnect_closure, P.SecureSocket_startConnect__closure, P.SecureSocket_secure_closure, P.SecureSocket_secure_closure0, P.RawSecureSocket_startConnect_closure, P.RawSecureSocket_startConnect__closure, P._RawSecureSocket__secureHandshakeCompleteHandler_closure, P.AudioParamMap_keys_closure]);
    _inherit(H._ContentType, H._HeaderValue);
    _inheritMany(P.Stream, [H._HttpIncoming, H._HttpInboundMessageListInt, H._HttpParser, H.CastStream, P._StreamImpl, P._EmptyStream, P._ForwardingStream, P._BoundSinkStream, P._RawSecureSocket]);
    _inherit(H._HttpClientResponse, H._HttpInboundMessageListInt);
    _inherit(P.Converter, P.StreamTransformerBase);
    _inheritMany(P.Converter, [H._ToUint8List, P.Base64Encoder, P.JsonEncoder, P.JsonDecoder, P.Utf8Encoder, P.ZLibDecoder]);
    _inherit(H._IOSinkImpl0, H._StreamSinkImpl0);
    _inherit(H._HttpOutboundMessage, H._IOSinkImpl0);
    _inherit(H._HttpClientRequest, H._HttpOutboundMessage);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, H.NativeTypedData, W.EventTarget, W.AccessibleNodeList, W.Event, W.Blob, W.CssTransformComponent, W.CssRule, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.CssStyleValue, W.DataTransferItemList, W.ReportBody, W.DomError, W.DomException, W._DomRectList_Interceptor_ListMixin, W.DomRectReadOnly, W._DomStringList_Interceptor_ListMixin, W.DomTokenList, W._FileList_Interceptor_ListMixin, W.Gamepad, W.History, W._HtmlCollection_Interceptor_ListMixin, W.Location, W.MediaError, W.MediaList, W._MidiInputMap_Interceptor_MapMixin, W._MidiOutputMap_Interceptor_MapMixin, W.MimeType, W._MimeTypeArray_Interceptor_ListMixin, W.NavigatorUserMediaError, W._NodeList_Interceptor_ListMixin, W.OverconstrainedError, W.Plugin, W._PluginArray_Interceptor_ListMixin, W.PositionError, W._RtcStatsReport_Interceptor_MapMixin, W.SpeechGrammar, W._SpeechGrammarList_Interceptor_ListMixin, W.SpeechRecognitionResult, W._Storage_Interceptor_MapMixin, W.StyleSheet, W._TextTrackCueList_Interceptor_ListMixin, W.TimeRanges, W.Touch, W._TouchList_Interceptor_ListMixin, W.TrackDefaultList, W.Url, W.__CssRuleList_Interceptor_ListMixin, W.__GamepadList_Interceptor_ListMixin, W.__NamedNodeMap_Interceptor_ListMixin, W.__SpeechRecognitionResultList_Interceptor_ListMixin, W.__StyleSheetList_Interceptor_ListMixin, P.Length, P._LengthList_Interceptor_ListMixin, P.Number, P._NumberList_Interceptor_ListMixin, P.PointList, P._StringList_Interceptor_ListMixin, P.Transform, P._TransformList_Interceptor_ListMixin, P.AudioBuffer, P._AudioParamMap_Interceptor_MapMixin, P.SqlError, P._SqlResultSetRowList_Interceptor_ListMixin]);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(P.Error, [H.LateError, P.TypeError, H.JsNoSuchMethodError, H.UnknownJsTypeError, H.RuntimeError, P.AssertionError, H._Error, P.JsonUnsupportedObjectError, P.NullThrownError, P.ArgumentError, P.UnsupportedError, P.UnimplementedError, P.StateError, P.ConcurrentModificationError, P.CyclicInitializationError]);
    _inherit(P.ListBase, P._ListBase_Object_ListMixin);
    _inherit(H.UnmodifiableListBase, P.ListBase);
    _inherit(H.CodeUnits, H.UnmodifiableListBase);
    _inheritMany(P.Iterable, [H.EfficientLengthIterable, H.MappedIterable]);
    _inheritMany(H.EfficientLengthIterable, [H.ListIterable, H.LinkedHashMapKeyIterable, P._HashMapKeyIterable]);
    _inheritMany(H.ListIterable, [H.SubListIterable, H.MappedListIterable, P.ListQueue, P._JsonMapKeyIterable]);
    _inherit(H.EfficientLengthMappedIterable, H.MappedIterable);
    _inherit(H.MappedIterator, P.Iterator);
    _inherit(H.ConstantStringMap, H.ConstantMap);
    _inherit(H.NullError, P.TypeError);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(H._AssertionError, P.AssertionError);
    _inherit(P.MapBase, P.MapMixin);
    _inheritMany(P.MapBase, [H.JsLinkedHashMap, P._HashMap, P._JsonMap]);
    _inherit(H.NativeTypedArray, H.NativeTypedData);
    _inheritMany(H.NativeTypedArray, [H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfDouble, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfInt, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(H.NativeTypedArrayOfInt, [H.NativeInt16List, H.NativeInt32List, H.NativeInt8List, H.NativeUint16List, H.NativeUint32List, H.NativeUint8ClampedList, H.NativeUint8List]);
    _inherit(H._TypeError, H._Error);
    _inheritMany(P._Completer, [P._AsyncCompleter, P._SyncCompleter]);
    _inherit(P._SyncStreamController, P._StreamController);
    _inherit(P._ControllerStream, P._StreamImpl);
    _inheritMany(P._BufferingStreamSubscription, [P._ControllerSubscription, P._ForwardingStreamSubscription, P._SinkTransformerStreamSubscription]);
    _inheritMany(P._DelayedEvent, [P._DelayedData, P._DelayedError]);
    _inherit(P._StreamImplEvents, P._PendingEvents);
    _inheritMany(P._ForwardingStream, [P._MapStream, P._HandleErrorStream]);
    _inherit(P._RootZone, P._Zone);
    _inherit(P._SetBase, P.__SetBase_Object_SetMixin);
    _inherit(P._HashSet, P._SetBase);
    _inherit(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P.MapView);
    _inherit(P.UnmodifiableMapView, P._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(P.StringConversionSinkBase, P.StringConversionSinkMixin);
    _inheritMany(P.StringConversionSinkBase, [P._StringSinkConversionSink, P._StringAdapterSink]);
    _inherit(P._JsonDecoderSink, P._StringSinkConversionSink);
    _inheritMany(P.Codec, [P.Base64Codec, P.Encoding, P.JsonCodec]);
    _inherit(P._BufferCachingBase64Encoder, P._Base64Encoder);
    _inheritMany(P.ChunkedConversionSink, [P.ByteConversionSink, P._JsonEncoderSink]);
    _inheritMany(P.ByteConversionSink, [P.ByteConversionSinkBase, P._FilterSink]);
    _inheritMany(P.ByteConversionSinkBase, [P._Base64EncoderSink, P._ByteAdapterSink]);
    _inherit(P._AsciiBase64EncoderSink, P._Base64EncoderSink);
    _inherit(P.JsonCyclicError, P.JsonUnsupportedObjectError);
    _inherit(P._JsonStringStringifier, P._JsonStringifier);
    _inheritMany(P.Encoding, [P.Latin1Codec, P.Utf8Codec]);
    _inherit(P.__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin, P._Utf8Encoder);
    _inherit(P._Utf8EncoderSink, P.__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inherit(P._DataUri, P._Uri);
    _inheritMany(W.EventTarget, [W.Node, W.FileWriter, W.SourceBuffer, W._SourceBufferList_EventTarget_ListMixin, W.TextTrack, W.TextTrackCue, W._TextTrackList_EventTarget_ListMixin, W.VideoTrackList, P.AudioTrackList, P.BaseAudioContext]);
    _inheritMany(W.Node, [W.Element, W.CharacterData]);
    _inherit(W.HtmlElement, W.Element);
    _inheritMany(W.HtmlElement, [W.AnchorElement, W.AreaElement, W.FormElement, W.SelectElement]);
    _inheritMany(W.Event, [W.ApplicationCacheErrorEvent, W.ErrorEvent, W.MediaKeyMessageEvent, W.PresentationConnectionCloseEvent, W.SpeechRecognitionError]);
    _inherit(W.CssPerspective, W.CssTransformComponent);
    _inherit(W.CssStyleDeclaration, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase);
    _inheritMany(W.CssStyleValue, [W.CssTransformValue, W.CssUnparsedValue]);
    _inheritMany(W.ReportBody, [W.DeprecationReport, W.InterventionReport]);
    _inherit(W._DomRectList_Interceptor_ListMixin_ImmutableListMixin, W._DomRectList_Interceptor_ListMixin);
    _inherit(W.DomRectList, W._DomRectList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._DomStringList_Interceptor_ListMixin_ImmutableListMixin, W._DomStringList_Interceptor_ListMixin);
    _inherit(W.DomStringList, W._DomStringList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.File, W.Blob);
    _inherit(W._FileList_Interceptor_ListMixin_ImmutableListMixin, W._FileList_Interceptor_ListMixin);
    _inherit(W.FileList, W._FileList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, W._HtmlCollection_Interceptor_ListMixin);
    _inherit(W.HtmlCollection, W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.MidiInputMap, W._MidiInputMap_Interceptor_MapMixin);
    _inherit(W.MidiOutputMap, W._MidiOutputMap_Interceptor_MapMixin);
    _inherit(W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin, W._MimeTypeArray_Interceptor_ListMixin);
    _inherit(W.MimeTypeArray, W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W._NodeList_Interceptor_ListMixin);
    _inherit(W.NodeList, W._NodeList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._PluginArray_Interceptor_ListMixin_ImmutableListMixin, W._PluginArray_Interceptor_ListMixin);
    _inherit(W.PluginArray, W._PluginArray_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.RtcStatsReport, W._RtcStatsReport_Interceptor_MapMixin);
    _inherit(W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, W._SourceBufferList_EventTarget_ListMixin);
    _inherit(W.SourceBufferList, W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin, W._SpeechGrammarList_Interceptor_ListMixin);
    _inherit(W.SpeechGrammarList, W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.Storage, W._Storage_Interceptor_MapMixin);
    _inherit(W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin, W._TextTrackCueList_Interceptor_ListMixin);
    _inherit(W.TextTrackCueList, W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, W._TextTrackList_EventTarget_ListMixin);
    _inherit(W.TextTrackList, W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(W._TouchList_Interceptor_ListMixin_ImmutableListMixin, W._TouchList_Interceptor_ListMixin);
    _inherit(W.TouchList, W._TouchList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin, W.__CssRuleList_Interceptor_ListMixin);
    _inherit(W._CssRuleList, W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._DomRect, W.DomRectReadOnly);
    _inherit(W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin, W.__GamepadList_Interceptor_ListMixin);
    _inherit(W._GamepadList, W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.__NamedNodeMap_Interceptor_ListMixin);
    _inherit(W._NamedNodeMap, W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin, W.__SpeechRecognitionResultList_Interceptor_ListMixin);
    _inherit(W._SpeechRecognitionResultList, W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin, W.__StyleSheetList_Interceptor_ListMixin);
    _inherit(W._StyleSheetList, W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P._ZLibDecoderSink, P._FilterSink);
    _inherit(P._FileStreamConsumer, P.StreamConsumer);
    _inherit(P._File, P.FileSystemEntity);
    _inherit(P._IOSinkImpl, P._StreamSinkImpl);
    _inherit(P.HandshakeException, P.TlsException);
    _inherit(P._LengthList_Interceptor_ListMixin_ImmutableListMixin, P._LengthList_Interceptor_ListMixin);
    _inherit(P.LengthList, P._LengthList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P._NumberList_Interceptor_ListMixin_ImmutableListMixin, P._NumberList_Interceptor_ListMixin);
    _inherit(P.NumberList, P._NumberList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P._StringList_Interceptor_ListMixin_ImmutableListMixin, P._StringList_Interceptor_ListMixin);
    _inherit(P.StringList, P._StringList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P._TransformList_Interceptor_ListMixin_ImmutableListMixin, P._TransformList_Interceptor_ListMixin);
    _inherit(P.TransformList, P._TransformList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P.AudioParamMap, P._AudioParamMap_Interceptor_MapMixin);
    _inherit(P.OfflineAudioContext, P.BaseAudioContext);
    _inherit(P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin, P._SqlResultSetRowList_Interceptor_ListMixin);
    _inherit(P.SqlResultSetRowList, P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin);
    _mixin(H.UnmodifiableListBase, H.UnmodifiableListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(P._SyncStreamController, P._SyncStreamControllerDispatch);
    _mixin(P._ListBase_Object_ListMixin, P.ListMixin);
    _mixin(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P._UnmodifiableMapMixin);
    _mixin(P.__SetBase_Object_SetMixin, P.SetMixin);
    _mixin(P.__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin, P.StringConversionSinkMixin);
    _mixin(W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.CssStyleDeclarationBase);
    _mixin(W._DomRectList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._DomRectList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._DomStringList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._DomStringList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._FileList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._FileList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._HtmlCollection_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._MidiInputMap_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._MidiOutputMap_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._MimeTypeArray_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._NodeList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._PluginArray_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._PluginArray_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._RtcStatsReport_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._SourceBufferList_EventTarget_ListMixin, P.ListMixin);
    _mixin(W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._SpeechGrammarList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._Storage_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._TextTrackCueList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._TextTrackList_EventTarget_ListMixin, P.ListMixin);
    _mixin(W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._TouchList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._TouchList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__CssRuleList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__GamepadList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__NamedNodeMap_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__SpeechRecognitionResultList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__StyleSheetList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._LengthList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._LengthList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._NumberList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._NumberList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._StringList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._StringList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._TransformList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._TransformList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._AudioParamMap_Interceptor_MapMixin, P.MapMixin);
    _mixin(P._SqlResultSetRowList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"},
    mangledNames: {},
    getTypeFromName: getGlobalFromName,
    metadata: [],
    types: ["~()", "Null(@)", "String()", "Null()", "Null(@,@)", "0&(@)", "~(Object?)", "~(Object,StackTrace)", "bool(String)", "~(String,@)", "~(@)", "Null(Object,StackTrace)", "~(String,List<String>)", "bool()", "~(~())", "Null(@,StackTrace)", "Future<HttpClientResponse>(@)", "int(String)", "~(List<int>)", "Future<@>()", "Future<@>(@)", "bool(X509Certificate)", "String?(String?)", "_RandomAccessFile(@)", "SecureSocket(RawSecureSocket)", "int()", "@(@)", "~(Object[StackTrace?])", "Future<HttpClientResponse>(_HttpClientRequest)", "~(@,StackTrace)", "~(@,@)", "~(Object?,Object?)", "String(int)", "~(Uint8List,String,int)", "~(String)", "Null(HttpClientResponse)", "Socket(Socket)", "~(Socket)", "Future<SecureSocket>(HttpClientResponse)", "_HttpClientConnection(SecureSocket)", "Future<HttpClientResponse>()", "Future<_ConnectionInfo>(ConnectionTask<@>)", "_ConnectionInfo/(@)", "_ConnectionInfo(_HttpClientConnection)", "_HttpClientRequest/(_ConnectionInfo)", "_HttpClientRequest(_ConnectionInfo)", "_HttpClientRequest(_HttpClientRequest)", "_ConnectionTarget()", "Future<_ConnectionInfo>(@)", "_SiteCredentials?(_SiteCredentials?,_Credentials)", "~(String,String?)", "String(String)", "~(Uint8List)", "List<String>?()", "List<Map<String,@>>()", "Future<Null>()", "HttpClientResponse/(List<@>)", "Future<bool>(_AuthenticationScheme,String?)", "@(@,String)", "@(String)", "Null(~())", "~(int,@)", "@(Object)", "@(StackTrace)", "Object()", "StackTrace()", "_HttpOutboundMessage<@>?(@)", "_Future<@>(@)", "_HttpOutboundMessage<@>?(@,@)", "~([Future<~>?])", "HttpClientResponse/(bool)", "_HttpOutboundMessage<@>(@)", "_HttpOutboundMessage<@>(@,@)", "_ConverterStreamEventSink<@,@>(EventSink<@>)", "~(_HttpIncoming)", "~(String,int)", "~(String[@])", "int(int,int)", "Uint8List(@,@)", "Uint8List(Uint8List)", "0&()", "~(String,String)", "Null(RandomAccessFile)", "@(StreamSubscription<List<int>>)", "StreamSubscription<List<int>>()", "~(RandomAccessFile)", "Future<~>(RandomAccessFile)", "File0?(~)", "Future<int>()", "Null(_HttpIncoming)", "int/(@)", "~(@,StackTrace?)", "ConnectionTask<SecureSocket>(ConnectionTask<RawSecureSocket>)", "bool(Object)", "Future<RawSecureSocket>(@)", "ConnectionTask<RawSecureSocket>(ConnectionTask<RawSocket>)", "Future<RawSecureSocket>(RawSocket)", "~([RawSocket?])", "~(RawSocketEvent)", "~(@[StackTrace?])", "List<int>?(int)", "@()", "String(Uri{environment:Map<String,String>?})", "_Credentials?(_AuthenticationScheme)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: typeof Symbol == "function" && typeof Symbol() == "symbol" ? Symbol("$ti") : "$ti"
  };
  H._Universe_addRules(init.typeUniverse, JSON.parse('{"PlainJavaScriptObject":"JavaScriptObject","UnknownJavaScriptObject":"JavaScriptObject","JavaScriptFunction":"JavaScriptObject","AElement":"Element","GraphicsElement":"Element","SvgElement":"Element","AudioElement":"HtmlElement","MediaElement":"HtmlElement","HtmlDocument":"Node","Document":"Node","VttCue":"TextTrackCue","CDataSection":"CharacterData","Text":"CharacterData","HtmlFormControlsCollection":"HtmlCollection","CssCharsetRule":"CssRule","CssStyleSheet":"StyleSheet","NativeFloat32List":"NativeTypedArrayOfDouble","HttpClientResponse":{"Stream":["List<int>"]},"_HttpIncoming":{"Stream":["Uint8List"],"Stream.T":"Uint8List"},"_StreamSinkImpl0":{"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"_IOSinkImpl0":{"_StreamSinkImpl0":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"_HttpOutboundMessage":{"_StreamSinkImpl0":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"_HttpClientRequest":{"_HttpOutboundMessage":["HttpClientResponse"],"HttpClientRequest":[],"_StreamSinkImpl0":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[],"_StreamSinkImpl0.T":"List<int>"},"_SiteCredentials":{"_Credentials":[]},"_ProxyCredentials":{"_Credentials":[]},"_Cookie":{"Cookie":[]},"_CopyingBytesBuilder":{"BytesBuilder":[]},"_HttpInboundMessageListInt":{"Stream":["List<int>"]},"_HttpClientResponse":{"HttpClientResponse":[],"Stream":["List<int>"],"Stream.T":"List<int>"},"_ToUint8List":{"Converter":["List<int>","Uint8List"],"StreamTransformer":["List<int>","Uint8List"],"Converter.S":"List<int>","Converter.T":"Uint8List"},"_Uint8ListConversionSink":{"Sink":["List<int>"]},"_HttpOutgoing":{"StreamConsumer":["List<int>"]},"_RedirectInfo":{"RedirectInfo":[]},"_HttpParser":{"Stream":["_HttpIncoming"],"Stream.T":"_HttpIncoming"},"JSBool":{"bool":[]},"JSNull":{"Null":[]},"JSArray":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"JSIndexable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"JSIndexable":["1"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"double":[],"num":[]},"JSInt":{"double":[],"int":[],"num":[]},"JSNumNotInt":{"double":[],"num":[]},"JSString":{"String":[],"Pattern":[],"JSIndexable":["@"]},"CastStream":{"Stream":["2"],"Stream.T":"2"},"CastStreamSubscription":{"StreamSubscription":["2"]},"LateError":{"Error":[]},"CodeUnits":{"ListMixin":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int","UnmodifiableListMixin.E":"int"},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListIterable.E":"1","Iterable.E":"1"},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"MappedListIterable":{"ListIterable":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"ListIterable.E":"2","Iterable.E":"2"},"UnmodifiableListBase":{"ListMixin":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"NullError":{"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"TearOffClosure":{"Function":[]},"StaticClosure":{"Function":[]},"BoundClosure":{"Function":[]},"RuntimeError":{"Error":[]},"_AssertionError":{"Error":[]},"JsLinkedHashMap":{"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"LinkedHashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"JSSyntaxRegExp":{"Pattern":[]},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"],"JSIndexable":["1"]},"NativeTypedArrayOfDouble":{"NativeTypedArray":["double"],"ListMixin":["double"],"JavaScriptIndexingBehavior":["double"],"List":["double"],"EfficientLengthIterable":["double"],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"],"ListMixin.E":"double","FixedLengthListMixin.E":"double"},"NativeTypedArrayOfInt":{"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeInt16List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeInt32List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeInt8List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint32List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8ClampedList":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint8List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"_Error":{"Error":[]},"_TypeError":{"Error":[]},"_Future":{"Future":["1"]},"EventSink":{"Sink":["1"]},"_TimerImpl":{"Timer":[]},"_AsyncAwaitCompleter":{"Completer":["1"]},"AsyncError":{"Error":[]},"_Completer":{"Completer":["1"]},"_AsyncCompleter":{"_Completer":["1"],"Completer":["1"]},"_SyncCompleter":{"_Completer":["1"],"Completer":["1"]},"StreamTransformerBase":{"StreamTransformer":["1","2"]},"_StreamController":{"StreamController":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_SyncStreamController":{"_SyncStreamControllerDispatch":["1"],"_StreamController":["1"],"StreamController":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_ControllerStream":{"_StreamImpl":["1"],"Stream":["1"],"Stream.T":"1"},"_ControllerSubscription":{"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_BufferingStreamSubscription":{"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_StreamImpl":{"Stream":["1"]},"_DelayedData":{"_DelayedEvent":["1"]},"_DelayedError":{"_DelayedEvent":["@"]},"_DelayedDone":{"_DelayedEvent":["@"]},"_StreamImplEvents":{"_PendingEvents":["1"]},"_DoneStreamSubscription":{"StreamSubscription":["1"]},"_EmptyStream":{"Stream":["1"],"Stream.T":"1"},"_ForwardingStream":{"Stream":["2"]},"_ForwardingStreamSubscription":{"_BufferingStreamSubscription":["2"],"StreamSubscription":["2"],"_EventSink":["2"],"_EventDispatch":["2"],"_BufferingStreamSubscription.T":"2"},"_MapStream":{"_ForwardingStream":["1","2"],"Stream":["2"],"Stream.T":"2","_ForwardingStream.T":"2","_ForwardingStream.S":"1"},"_HandleErrorStream":{"_ForwardingStream":["1","1"],"Stream":["1"],"Stream.T":"1","_ForwardingStream.T":"1","_ForwardingStream.S":"1"},"_EventSinkWrapper":{"EventSink":["1"],"Sink":["1"]},"_SinkTransformerStreamSubscription":{"_BufferingStreamSubscription":["2"],"StreamSubscription":["2"],"_EventSink":["2"],"_EventDispatch":["2"],"_BufferingStreamSubscription.T":"2"},"_BoundSinkStream":{"Stream":["2"],"Stream.T":"2"},"_Zone":{"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"_HashMap":{"MapMixin":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"_HashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"_HashMapKeyIterator":{"Iterator":["1"]},"_HashSet":{"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_HashSetIterator":{"Iterator":["1"]},"ListBase":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapBase":{"MapMixin":["1","2"],"Map":["1","2"]},"MapMixin":{"Map":["1","2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"ListQueue":{"ListIterable":["1"],"Queue":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListIterable.E":"1","Iterable.E":"1"},"_ListQueueIterator":{"Iterator":["1"]},"_SetBase":{"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_ConverterStreamEventSink":{"EventSink":["1"],"Sink":["1"]},"_JsonMap":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.K":"String","MapMixin.V":"@"},"_JsonMapKeyIterable":{"ListIterable":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"],"ListIterable.E":"String","Iterable.E":"String"},"_JsonDecoderSink":{"_StringSinkConversionSink":["StringBuffer"],"StringConversionSink":[],"Sink":["String"],"_StringSinkConversionSink.0":"StringBuffer"},"Base64Codec":{"Codec":["List<int>","String"],"Codec.S":"List<int>"},"Base64Encoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"],"Converter.S":"List<int>","Converter.T":"String"},"_BufferCachingBase64Encoder":{"_Base64Encoder":[]},"_Base64EncoderSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_AsciiBase64EncoderSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"ByteConversionSink":{"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"ByteConversionSinkBase":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_ByteAdapterSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"ChunkedConversionSink":{"Sink":["1"]},"Converter":{"StreamTransformer":["1","2"]},"Encoding":{"Codec":["String","List<int>"]},"JsonUnsupportedObjectError":{"Error":[]},"JsonCyclicError":{"Error":[]},"JsonCodec":{"Codec":["Object?","String"],"Codec.S":"Object?"},"JsonEncoder":{"Converter":["Object?","String"],"StreamTransformer":["Object?","String"],"Converter.S":"Object?","Converter.T":"String"},"_JsonEncoderSink":{"ChunkedConversionSink":["Object?"],"Sink":["Object?"]},"JsonDecoder":{"Converter":["String","Object?"],"StreamTransformer":["String","Object?"],"Converter.S":"String","Converter.T":"Object?"},"Latin1Codec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"_StringConversionSinkAsStringSinkAdapter":{"StringSink":[]},"StringConversionSinkBase":{"StringConversionSink":[],"Sink":["String"]},"StringConversionSinkMixin":{"StringConversionSink":[],"Sink":["String"]},"_StringSinkConversionSink":{"StringConversionSink":[],"Sink":["String"]},"_StringAdapterSink":{"StringConversionSink":[],"Sink":["String"]},"Utf8Codec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"Utf8Encoder":{"Converter":["String","List<int>"],"StreamTransformer":["String","List<int>"],"Converter.S":"String","Converter.T":"List<int>"},"_Utf8EncoderSink":{"StringConversionSink":[],"Sink":["String"]},"double":{"num":[]},"int":{"num":[]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"String":{"Pattern":[]},"StringBuffer":{"StringSink":[]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"NullThrownError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"CyclicInitializationError":{"Error":[]},"_StringStackTrace":{"StackTrace":[]},"_Uri":{"Uri":[]},"_SimpleUri":{"Uri":[]},"_DataUri":{"Uri":[]},"HtmlElement":{"Node":[]},"AnchorElement":{"Node":[]},"AreaElement":{"Node":[]},"CharacterData":{"Node":[]},"DomRectList":{"ListMixin":["Rectangle<num>"],"ImmutableListMixin":["Rectangle<num>"],"List":["Rectangle<num>"],"JavaScriptIndexingBehavior":["Rectangle<num>"],"EfficientLengthIterable":["Rectangle<num>"],"Iterable":["Rectangle<num>"],"JSIndexable":["Rectangle<num>"],"ImmutableListMixin.E":"Rectangle<num>","ListMixin.E":"Rectangle<num>"},"DomRectReadOnly":{"Rectangle":["num"]},"DomStringList":{"ListMixin":["String"],"ImmutableListMixin":["String"],"List":["String"],"JavaScriptIndexingBehavior":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"],"JSIndexable":["String"],"ImmutableListMixin.E":"String","ListMixin.E":"String"},"Element":{"Node":[]},"FileList":{"ListMixin":["File"],"ImmutableListMixin":["File"],"List":["File"],"JavaScriptIndexingBehavior":["File"],"EfficientLengthIterable":["File"],"Iterable":["File"],"JSIndexable":["File"],"ImmutableListMixin.E":"File","ListMixin.E":"File"},"FormElement":{"Node":[]},"HtmlCollection":{"ListMixin":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"EfficientLengthIterable":["Node"],"Iterable":["Node"],"JSIndexable":["Node"],"ImmutableListMixin.E":"Node","ListMixin.E":"Node"},"MidiInputMap":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.K":"String","MapMixin.V":"@"},"MidiOutputMap":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.K":"String","MapMixin.V":"@"},"MimeTypeArray":{"ListMixin":["MimeType"],"ImmutableListMixin":["MimeType"],"List":["MimeType"],"JavaScriptIndexingBehavior":["MimeType"],"EfficientLengthIterable":["MimeType"],"Iterable":["MimeType"],"JSIndexable":["MimeType"],"ImmutableListMixin.E":"MimeType","ListMixin.E":"MimeType"},"NodeList":{"ListMixin":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"EfficientLengthIterable":["Node"],"Iterable":["Node"],"JSIndexable":["Node"],"ImmutableListMixin.E":"Node","ListMixin.E":"Node"},"PluginArray":{"ListMixin":["Plugin"],"ImmutableListMixin":["Plugin"],"List":["Plugin"],"JavaScriptIndexingBehavior":["Plugin"],"EfficientLengthIterable":["Plugin"],"Iterable":["Plugin"],"JSIndexable":["Plugin"],"ImmutableListMixin.E":"Plugin","ListMixin.E":"Plugin"},"RtcStatsReport":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.K":"String","MapMixin.V":"@"},"SelectElement":{"Node":[]},"SourceBufferList":{"ListMixin":["SourceBuffer"],"ImmutableListMixin":["SourceBuffer"],"List":["SourceBuffer"],"JavaScriptIndexingBehavior":["SourceBuffer"],"EfficientLengthIterable":["SourceBuffer"],"Iterable":["SourceBuffer"],"JSIndexable":["SourceBuffer"],"ImmutableListMixin.E":"SourceBuffer","ListMixin.E":"SourceBuffer"},"SpeechGrammarList":{"ListMixin":["SpeechGrammar"],"ImmutableListMixin":["SpeechGrammar"],"List":["SpeechGrammar"],"JavaScriptIndexingBehavior":["SpeechGrammar"],"EfficientLengthIterable":["SpeechGrammar"],"Iterable":["SpeechGrammar"],"JSIndexable":["SpeechGrammar"],"ImmutableListMixin.E":"SpeechGrammar","ListMixin.E":"SpeechGrammar"},"Storage":{"MapMixin":["String","String"],"Map":["String","String"],"MapMixin.K":"String","MapMixin.V":"String"},"TextTrackCueList":{"ListMixin":["TextTrackCue"],"ImmutableListMixin":["TextTrackCue"],"List":["TextTrackCue"],"JavaScriptIndexingBehavior":["TextTrackCue"],"EfficientLengthIterable":["TextTrackCue"],"Iterable":["TextTrackCue"],"JSIndexable":["TextTrackCue"],"ImmutableListMixin.E":"TextTrackCue","ListMixin.E":"TextTrackCue"},"TextTrackList":{"ListMixin":["TextTrack"],"ImmutableListMixin":["TextTrack"],"List":["TextTrack"],"JavaScriptIndexingBehavior":["TextTrack"],"EfficientLengthIterable":["TextTrack"],"Iterable":["TextTrack"],"JSIndexable":["TextTrack"],"ImmutableListMixin.E":"TextTrack","ListMixin.E":"TextTrack"},"TouchList":{"ListMixin":["Touch"],"ImmutableListMixin":["Touch"],"List":["Touch"],"JavaScriptIndexingBehavior":["Touch"],"EfficientLengthIterable":["Touch"],"Iterable":["Touch"],"JSIndexable":["Touch"],"ImmutableListMixin.E":"Touch","ListMixin.E":"Touch"},"_CssRuleList":{"ListMixin":["CssRule"],"ImmutableListMixin":["CssRule"],"List":["CssRule"],"JavaScriptIndexingBehavior":["CssRule"],"EfficientLengthIterable":["CssRule"],"Iterable":["CssRule"],"JSIndexable":["CssRule"],"ImmutableListMixin.E":"CssRule","ListMixin.E":"CssRule"},"_DomRect":{"Rectangle":["num"]},"_GamepadList":{"ListMixin":["Gamepad?"],"ImmutableListMixin":["Gamepad?"],"List":["Gamepad?"],"JavaScriptIndexingBehavior":["Gamepad?"],"EfficientLengthIterable":["Gamepad?"],"Iterable":["Gamepad?"],"JSIndexable":["Gamepad?"],"ImmutableListMixin.E":"Gamepad?","ListMixin.E":"Gamepad?"},"_NamedNodeMap":{"ListMixin":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"EfficientLengthIterable":["Node"],"Iterable":["Node"],"JSIndexable":["Node"],"ImmutableListMixin.E":"Node","ListMixin.E":"Node"},"_SpeechRecognitionResultList":{"ListMixin":["SpeechRecognitionResult"],"ImmutableListMixin":["SpeechRecognitionResult"],"List":["SpeechRecognitionResult"],"JavaScriptIndexingBehavior":["SpeechRecognitionResult"],"EfficientLengthIterable":["SpeechRecognitionResult"],"Iterable":["SpeechRecognitionResult"],"JSIndexable":["SpeechRecognitionResult"],"ImmutableListMixin.E":"SpeechRecognitionResult","ListMixin.E":"SpeechRecognitionResult"},"_StyleSheetList":{"ListMixin":["StyleSheet"],"ImmutableListMixin":["StyleSheet"],"List":["StyleSheet"],"JavaScriptIndexingBehavior":["StyleSheet"],"EfficientLengthIterable":["StyleSheet"],"Iterable":["StyleSheet"],"JSIndexable":["StyleSheet"],"ImmutableListMixin.E":"StyleSheet","ListMixin.E":"StyleSheet"},"FixedSizeListIterator":{"Iterator":["1"]},"_RandomAccessFile":{"RandomAccessFile":[]},"SecureSocket":{"Socket":[],"EventSink":["List<int>"],"Stream":["Uint8List"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"RawSecureSocket":{"RawSocket":[],"Stream":["RawSocketEvent"]},"_RawSecureSocket":{"RawSecureSocket":[],"RawSocket":[],"Stream":["RawSocketEvent"],"Stream.T":"RawSocketEvent"},"RawSocket":{"Stream":["RawSocketEvent"]},"Socket":{"EventSink":["List<int>"],"Stream":["Uint8List"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"ZLibDecoder":{"Converter":["List<int>","List<int>"],"StreamTransformer":["List<int>","List<int>"],"Converter.S":"List<int>","Converter.T":"List<int>"},"_ZLibDecoderSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_FilterSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_FileStreamConsumer":{"StreamConsumer":["List<int>"]},"_File":{"File0":[]},"_StreamSinkImpl":{"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"_IOSinkImpl":{"_StreamSinkImpl":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[],"_StreamSinkImpl.T":"List<int>"},"LengthList":{"ListMixin":["Length"],"ImmutableListMixin":["Length"],"List":["Length"],"EfficientLengthIterable":["Length"],"Iterable":["Length"],"ImmutableListMixin.E":"Length","ListMixin.E":"Length"},"NumberList":{"ListMixin":["Number"],"ImmutableListMixin":["Number"],"List":["Number"],"EfficientLengthIterable":["Number"],"Iterable":["Number"],"ImmutableListMixin.E":"Number","ListMixin.E":"Number"},"StringList":{"ListMixin":["String"],"ImmutableListMixin":["String"],"List":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"],"ImmutableListMixin.E":"String","ListMixin.E":"String"},"TransformList":{"ListMixin":["Transform"],"ImmutableListMixin":["Transform"],"List":["Transform"],"EfficientLengthIterable":["Transform"],"Iterable":["Transform"],"ImmutableListMixin.E":"Transform","ListMixin.E":"Transform"},"AudioParamMap":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.K":"String","MapMixin.V":"@"},"SqlResultSetRowList":{"ListMixin":["Map<@,@>"],"ImmutableListMixin":["Map<@,@>"],"List":["Map<@,@>"],"EfficientLengthIterable":["Map<@,@>"],"Iterable":["Map<@,@>"],"ImmutableListMixin.E":"Map<@,@>","ListMixin.E":"Map<@,@>"},"Uint8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]}}'));
  H._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"_HttpOutboundMessage":1,"EfficientLengthIterable":1,"UnmodifiableListBase":1,"NativeTypedArray":1,"StreamTransformerBase":2,"ListBase":1,"MapBase":2,"_SetBase":1,"_ListBase_Object_ListMixin":1,"__SetBase_Object_SetMixin":1,"_RectangleBase":1}'));
  var string$ = {
    ABCDEF: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    handle: "handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace."
  };
  var type$ = (function rtii() {
    var findType = H.findType;
    return {
      $env_1_1_dynamic: findType("@<@>"),
      $env_1_1_void: findType("@<~>"),
      AsyncError: findType("AsyncError"),
      ConnectionTask_RawSecureSocket: findType("ConnectionTask<RawSecureSocket>"),
      ConnectionTask_RawSocket: findType("ConnectionTask<RawSocket>"),
      ConnectionTask_SecureSocket: findType("ConnectionTask<SecureSocket>"),
      ConnectionTask_dynamic: findType("ConnectionTask<@>"),
      CssRule: findType("CssRule"),
      EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
      Error: findType("Error"),
      File: findType("File"),
      Function: findType("Function"),
      FutureOr_HttpClientResponse: findType("HttpClientResponse/"),
      Future_dynamic: findType("Future<@>"),
      Future_void: findType("Future<~>"),
      HttpClientResponse: findType("HttpClientResponse"),
      Iterable_dynamic: findType("Iterable<@>"),
      Iterable_int: findType("Iterable<int>"),
      JSArray_Cookie: findType("JSArray<Cookie>"),
      JSArray_Future_dynamic: findType("JSArray<Future<@>>"),
      JSArray_Map_String_dynamic: findType("JSArray<Map<String,@>>"),
      JSArray_RedirectInfo: findType("JSArray<RedirectInfo>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_Uint8List: findType("JSArray<Uint8List>"),
      JSArray__AsyncBlock: findType("JSArray<_AsyncBlock>"),
      JSArray__Credentials: findType("JSArray<_Credentials>"),
      JSArray__DomainNetworkPolicy: findType("JSArray<_DomainNetworkPolicy>"),
      JSArray__HttpProfileEvent: findType("JSArray<_HttpProfileEvent>"),
      JSArray__Proxy: findType("JSArray<_Proxy>"),
      JSArray__ProxyCredentials: findType("JSArray<_ProxyCredentials>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSIndexable_dynamic: findType("JSIndexable<@>"),
      JSNull: findType("JSNull"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      Length: findType("Length"),
      ListQueue_dynamic: findType("ListQueue<@>"),
      List_String: findType("List<String>"),
      List__DomainNetworkPolicy: findType("List<_DomainNetworkPolicy>"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      Map_String_String: findType("Map<String,String>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      MappedListIterable_String_String: findType("MappedListIterable<String,String>"),
      MimeType: findType("MimeType"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      NativeUint8List: findType("NativeUint8List"),
      Node: findType("Node"),
      Null: findType("Null"),
      Number: findType("Number"),
      Object: findType("Object"),
      Plugin: findType("Plugin"),
      RandomAccessFile: findType("RandomAccessFile"),
      RawSecureSocket: findType("RawSecureSocket"),
      RawSocketEvent: findType("RawSocketEvent"),
      Rectangle_num: findType("Rectangle<num>"),
      SecureSocket: findType("SecureSocket"),
      Sink_List_int: findType("Sink<List<int>>"),
      Sink_String: findType("Sink<String>"),
      Sink_Uint8List: findType("Sink<Uint8List>"),
      Socket: findType("Socket"),
      SourceBuffer: findType("SourceBuffer"),
      SpeechGrammar: findType("SpeechGrammar"),
      SpeechRecognitionResult: findType("SpeechRecognitionResult"),
      StackTrace: findType("StackTrace"),
      StreamSubscription_List_int: findType("StreamSubscription<List<int>>"),
      StreamSubscription_RawSocketEvent: findType("StreamSubscription<RawSocketEvent>"),
      Stream_List_int: findType("Stream<List<int>>"),
      Stream_Uint8List: findType("Stream<Uint8List>"),
      String: findType("String"),
      String_Function_String: findType("String(String)"),
      StyleSheet: findType("StyleSheet"),
      TextTrack: findType("TextTrack"),
      TextTrackCue: findType("TextTrackCue"),
      Touch: findType("Touch"),
      Transform: findType("Transform"),
      Uint8List: findType("Uint8List"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      UnmodifiableMapView_of_String_and_nullable_String: findType("UnmodifiableMapView<String,String?>"),
      Uri: findType("Uri"),
      Utf8Codec: findType("Utf8Codec"),
      _AsyncCompleter_HttpClientResponse: findType("_AsyncCompleter<HttpClientResponse>"),
      _AsyncCompleter_RawSecureSocket: findType("_AsyncCompleter<RawSecureSocket>"),
      _AsyncCompleter_Socket: findType("_AsyncCompleter<Socket>"),
      _AsyncCompleter__HttpIncoming: findType("_AsyncCompleter<_HttpIncoming>"),
      _AsyncCompleter__RawSecureSocket: findType("_AsyncCompleter<_RawSecureSocket>"),
      _AsyncCompleter_dynamic: findType("_AsyncCompleter<@>"),
      _AsyncCompleter_void: findType("_AsyncCompleter<~>"),
      _ConnectionInfo: findType("_ConnectionInfo"),
      _ConnectionTarget: findType("_ConnectionTarget"),
      _ConverterStreamEventSink_dynamic_dynamic: findType("_ConverterStreamEventSink<@,@>"),
      _Credentials: findType("_Credentials"),
      _FilterStatus: findType("_FilterStatus"),
      _Future_HttpClientResponse: findType("_Future<HttpClientResponse>"),
      _Future_RawSecureSocket: findType("_Future<RawSecureSocket>"),
      _Future_Socket: findType("_Future<Socket>"),
      _Future__HttpIncoming: findType("_Future<_HttpIncoming>"),
      _Future__RawSecureSocket: findType("_Future<_RawSecureSocket>"),
      _Future_dynamic: findType("_Future<@>"),
      _Future_int: findType("_Future<int>"),
      _Future_nullable_File: findType("_Future<File0?>"),
      _Future_void: findType("_Future<~>"),
      _HttpClientConnection: findType("_HttpClientConnection"),
      _HttpClientRequest: findType("_HttpClientRequest"),
      _HttpIncoming: findType("_HttpIncoming"),
      _StreamControllerAddStreamState_nullable_Object: findType("_StreamControllerAddStreamState<Object?>"),
      _SyncCompleter_nullable_File: findType("_SyncCompleter<File0?>"),
      bool: findType("bool"),
      bool_Function_Object: findType("bool(Object)"),
      bool_Function_X509Certificate: findType("bool(X509Certificate)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_2_Never_and_Never: findType("@(0&,0&)"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      int: findType("int"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_Completer__HttpIncoming: findType("Completer<_HttpIncoming>?"),
      nullable_File: findType("File0?"),
      nullable_Future_HttpClientResponse: findType("Future<HttpClientResponse>?"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_Future_Socket: findType("Future<Socket>?"),
      nullable_Future_dynamic: findType("Future<@>?"),
      nullable_Gamepad: findType("Gamepad?"),
      nullable_List_Cookie: findType("List<Cookie>?"),
      nullable_List_dynamic: findType("List<@>?"),
      nullable_Map_String_String: findType("Map<String,String>?"),
      nullable_Map_String_dynamic: findType("Map<String,@>?"),
      nullable_Map_of_String_and_nullable_String: findType("Map<String,String?>?"),
      nullable_Object: findType("Object?"),
      nullable_RawSocket: findType("RawSocket?"),
      nullable_Socket: findType("Socket?"),
      nullable_StackTrace: findType("StackTrace?"),
      nullable_StreamController_Uint8List: findType("StreamController<Uint8List>?"),
      nullable_StreamSubscription_RawSocketEvent: findType("StreamSubscription<RawSocketEvent>?"),
      nullable_StreamSubscription_Uint8List: findType("StreamSubscription<Uint8List>?"),
      nullable_String: findType("String?"),
      nullable__DelayedEvent_dynamic: findType("_DelayedEvent<@>?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable__SiteCredentials: findType("_SiteCredentials?"),
      nullable_bool_Function_Object: findType("bool(Object)?"),
      nullable_bool_Function_dynamic: findType("bool(@)?"),
      nullable_void_Function: findType("~()?"),
      nullable_void_Function_List_int: findType("~(List<int>)?"),
      nullable_void_Function_RawSocketEvent: findType("~(RawSocketEvent)?"),
      nullable_void_Function_Uint8List: findType("~(Uint8List)?"),
      nullable_void_Function__HttpIncoming: findType("~(_HttpIncoming)?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_2_String_and_List_String: findType("~(String,List<String>)"),
      void_Function_List_int: findType("~(List<int>)"),
      void_Function_Object: findType("~(Object)"),
      void_Function_Object_StackTrace: findType("~(Object,StackTrace)"),
      void_Function_String_String: findType("~(String,String)"),
      void_Function_String_dynamic: findType("~(String,@)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNull_methods = J.JSNull.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.NativeUint8List_methods = H.NativeUint8List.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C.C_Base64Encoder = new P.Base64Encoder();
    C.C_Base64Codec = new P.Base64Codec();
    C.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    C.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    C.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    C.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    C.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    C.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    C.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    C.C_JS_CONST3 = function(hooks) { return hooks; }
;
    C.C_JsonCodec = new P.JsonCodec();
    C.C_Latin1Codec = new P.Latin1Codec();
    C.C_OutOfMemoryError = new P.OutOfMemoryError();
    C.C_SocketDirection1 = new P.SocketDirection();
    C.C_SocketDirection = new P.SocketDirection();
    C.C_SocketDirection0 = new P.SocketDirection();
    C.C_SocketOption = new P.SocketOption();
    C.C_Utf8Codec = new P.Utf8Codec();
    C.C_Utf8Encoder = new P.Utf8Encoder();
    C.C__AuthenticationScheme1 = new H._AuthenticationScheme();
    C.C__AuthenticationScheme = new H._AuthenticationScheme();
    C.C__AuthenticationScheme0 = new H._AuthenticationScheme();
    C.C__DelayedDone = new P._DelayedDone();
    C.C__RootZone = new P._RootZone();
    C.C__StringStackTrace = new P._StringStackTrace();
    C.C__ToUint8List = new H._ToUint8List();
    C.Duration_0 = new P.Duration(0);
    C.Duration_15000000 = new P.Duration(15000000);
    C.FileMode_0 = new P.FileMode(0);
    C.FileMode_1 = new P.FileMode(1);
    C.FileMode_2 = new P.FileMode(2);
    C.FileMode_3 = new P.FileMode(3);
    C.FileMode_4 = new P.FileMode(4);
    C.HttpClientResponseCompressionState_0 = new H.HttpClientResponseCompressionState("HttpClientResponseCompressionState.notCompressed");
    C.HttpClientResponseCompressionState_1 = new H.HttpClientResponseCompressionState("HttpClientResponseCompressionState.decompressed");
    C.JsonDecoder_null = new P.JsonDecoder(null);
    C.JsonEncoder_null = new P.JsonEncoder(null);
    C.List_2Vk0 = H.setRuntimeTypeInfo(makeConstList([0, 0, 32776, 33792, 1, 10240, 0, 0]), type$.JSArray_int);
    C.List_2Vk = H.setRuntimeTypeInfo(makeConstList([72, 84, 84, 80, 47, 49, 46, 49]), type$.JSArray_int);
    C.List_72_84_84_80 = H.setRuntimeTypeInfo(makeConstList([72, 84, 84, 80]), type$.JSArray_int);
    C.List_A8J = H.setRuntimeTypeInfo(makeConstList(["(", ")", "<", ">", "@", ",", ";", ":", "\\", '"', "/", "[", "]", "?", "=", "{", "}"]), type$.JSArray_String);
    C.List_CVk = H.setRuntimeTypeInfo(makeConstList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    C.List_E7y = H.setRuntimeTypeInfo(makeConstList([13, 10, 48, 13, 10, 13, 10]), type$.JSArray_int);
    C.List_E7y0 = H.setRuntimeTypeInfo(makeConstList([72, 84, 84, 80, 47, 49, 46]), type$.JSArray_int);
    C.List_ECn = H.setRuntimeTypeInfo(makeConstList(["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]), type$.JSArray_dynamic);
    C.List_I4v = H.setRuntimeTypeInfo(makeConstList(["RawSocketEvent.read", "RawSocketEvent.write", "RawSocketEvent.readClosed", "RawSocketEvent.closed"]), type$.JSArray_String);
    C.List_JYB = H.setRuntimeTypeInfo(makeConstList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]), type$.JSArray_int);
    C.List_NUU = H.setRuntimeTypeInfo(makeConstList([false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]), H.findType("JSArray<bool>"));
    C.List_UI5 = H.setRuntimeTypeInfo(makeConstList(["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"]), type$.JSArray_dynamic);
    C.List_cGl = H.setRuntimeTypeInfo(makeConstList([48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70]), type$.JSArray_int);
    C.List_empty = H.setRuntimeTypeInfo(makeConstList([]), type$.JSArray_int);
    C.List_gRj = H.setRuntimeTypeInfo(makeConstList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    C.List_h8w = H.setRuntimeTypeInfo(makeConstList(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]), type$.JSArray_dynamic);
    C.List_nxB = H.setRuntimeTypeInfo(makeConstList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    C.List_qNA = H.setRuntimeTypeInfo(makeConstList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    C.List_qg4 = H.setRuntimeTypeInfo(makeConstList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    C.List_yTu = H.setRuntimeTypeInfo(makeConstList([48, 13, 10, 13, 10]), type$.JSArray_int);
    C.List_empty0 = H.setRuntimeTypeInfo(makeConstList([]), type$.JSArray_String);
    C.Map_empty = new H.ConstantStringMap(0, {}, C.List_empty0, H.findType("ConstantStringMap<String,String?>"));
    C.RawSocketEvent_0 = new P.RawSocketEvent(0);
    C.RawSocketEvent_1 = new P.RawSocketEvent(1);
    C.RawSocketEvent_2 = new P.RawSocketEvent(2);
    C._Proxy_cg9 = new H._Proxy(null, null, null, null, true);
    C.List_jqP = H.setRuntimeTypeInfo(makeConstList([C._Proxy_cg9]), type$.JSArray__Proxy);
    C._ProxyConfiguration_8Zd = new H._ProxyConfiguration(C.List_jqP);
  })();
  (function staticFields() {
    $.HttpProfiler__profile = P.LinkedHashMap_LinkedHashMap$_empty(type$.int, H.findType("_HttpProfileData"));
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.Primitives_timerFrequency = 0;
    $.Primitives_timerTicks = H._js_helper_Primitives_dateNow$closure();
    $.Closure_functionCounter = 0;
    $.BoundClosure_selfFieldNameCache = null;
    $.BoundClosure_receiverFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = C.C__RootZone;
    $._toStringVisiting = H.setRuntimeTypeInfo([], H.findType("JSArray<Object>"));
    $._clockValue = 0;
    $._FileResourceInfo_openFiles = P.LinkedHashMap_LinkedHashMap$_empty(type$.int, H.findType("_FileResourceInfo"));
    $.___domainPolicies = null;
    $._Platform__environmentCache = null;
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal($, "_HttpProfileData_isolateId", "$get$_HttpProfileData_isolateId", function() {
      P.Isolate_current();
      return void 1;
    });
    _lazyFinal($, "_CopyingBytesBuilder__emptyList", "$get$_CopyingBytesBuilder__emptyList", function() {
      return H.NativeUint8List_NativeUint8List(0);
    });
    _lazy($, "_HttpClient__platformEnvironmentCache", "$get$_HttpClient__platformEnvironmentCache", function() {
      return P._Platform_environment();
    });
    _lazyFinal($, "_httpOverridesToken", "$get$_httpOverridesToken", function() {
      return new P.Object();
    });
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazyFinal($, "nullFuture", "$get$nullFuture", function() {
      return C.C__RootZone.run$1$1(new H.nullFuture_closure(), H.findType("Future<Null>"));
    });
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
    });
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = "$arguments$";
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = "$arguments$";
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
    });
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
      return P._AsyncRun__initializeScheduleImmediate();
    });
    _lazyFinal($, "Future__nullFuture", "$get$Future__nullFuture", function() {
      return H.findType("_Future<Null>")._as($.$get$nullFuture());
    });
    _lazyFinal($, "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", function() {
      return H.NativeInt8List__create1(H._ensureNativeList(H.setRuntimeTypeInfo([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2], type$.JSArray_int)));
    });
    _lazyFinal($, "Stopwatch__frequency", "$get$Stopwatch__frequency", function() {
      H.Primitives_initTicker();
      return $.Primitives_timerFrequency;
    });
    _lazyFinal($, "_scannerTables", "$get$_scannerTables", function() {
      return P._createTables();
    });
    _lazyFinal($, "_IOResourceInfo__sw", "$get$_IOResourceInfo__sw", function() {
      var t1 = new P.Stopwatch();
      $.$get$Stopwatch__frequency();
      t1._start = P.Stopwatch__now() - 0;
      t1._stop = null;
      return t1;
    });
    _lazyFinal($, "_IOResourceInfo__startTime", "$get$_IOResourceInfo__startTime", function() {
      return H.Primitives_dateNow();
    });
    _lazyFinal($, "_DomainNetworkPolicy__domainMatcher", "$get$_DomainNetworkPolicy__domainMatcher", function() {
      return P.RegExp_RegExp("^(?:[a-z\\d-]{1,63}\\.)+[a-z][a-z\\d-]{0,62}$", false);
    });
    _lazyFinal($, "_ioOverridesToken", "$get$_ioOverridesToken", function() {
      return new P.Object();
    });
    _lazyFinal($, "Platform__version", "$get$Platform__version", function() {
      return P._Platform_version();
    });
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ArrayBuffer: J.Interceptor, AnimationEffectReadOnly: J.Interceptor, AnimationEffectTiming: J.Interceptor, AnimationEffectTimingReadOnly: J.Interceptor, AnimationTimeline: J.Interceptor, AnimationWorkletGlobalScope: J.Interceptor, AuthenticatorAssertionResponse: J.Interceptor, AuthenticatorAttestationResponse: J.Interceptor, AuthenticatorResponse: J.Interceptor, BackgroundFetchFetch: J.Interceptor, BackgroundFetchManager: J.Interceptor, BackgroundFetchSettledFetch: J.Interceptor, BarProp: J.Interceptor, BarcodeDetector: J.Interceptor, BluetoothRemoteGATTDescriptor: J.Interceptor, Body: J.Interceptor, BudgetState: J.Interceptor, CacheStorage: J.Interceptor, CanvasGradient: J.Interceptor, CanvasPattern: J.Interceptor, CanvasRenderingContext2D: J.Interceptor, Client: J.Interceptor, Clients: J.Interceptor, CookieStore: J.Interceptor, Coordinates: J.Interceptor, Credential: J.Interceptor, CredentialUserData: J.Interceptor, CredentialsContainer: J.Interceptor, Crypto: J.Interceptor, CryptoKey: J.Interceptor, CSS: J.Interceptor, CSSVariableReferenceValue: J.Interceptor, CustomElementRegistry: J.Interceptor, DataTransfer: J.Interceptor, DataTransferItem: J.Interceptor, DeprecatedStorageInfo: J.Interceptor, DeprecatedStorageQuota: J.Interceptor, DetectedBarcode: J.Interceptor, DetectedFace: J.Interceptor, DetectedText: J.Interceptor, DeviceAcceleration: J.Interceptor, DeviceRotationRate: J.Interceptor, DirectoryEntry: J.Interceptor, DirectoryReader: J.Interceptor, DocumentOrShadowRoot: J.Interceptor, DocumentTimeline: J.Interceptor, DOMImplementation: J.Interceptor, Iterator: J.Interceptor, DOMMatrix: J.Interceptor, DOMMatrixReadOnly: J.Interceptor, DOMParser: J.Interceptor, DOMPoint: J.Interceptor, DOMPointReadOnly: J.Interceptor, DOMQuad: J.Interceptor, DOMStringMap: J.Interceptor, Entry: J.Interceptor, External: J.Interceptor, FaceDetector: J.Interceptor, FederatedCredential: J.Interceptor, FileEntry: J.Interceptor, DOMFileSystem: J.Interceptor, FontFace: J.Interceptor, FontFaceSource: J.Interceptor, FormData: J.Interceptor, GamepadButton: J.Interceptor, GamepadPose: J.Interceptor, Geolocation: J.Interceptor, Position: J.Interceptor, Headers: J.Interceptor, HTMLHyperlinkElementUtils: J.Interceptor, IdleDeadline: J.Interceptor, ImageBitmap: J.Interceptor, ImageBitmapRenderingContext: J.Interceptor, ImageCapture: J.Interceptor, ImageData: J.Interceptor, InputDeviceCapabilities: J.Interceptor, IntersectionObserver: J.Interceptor, IntersectionObserverEntry: J.Interceptor, KeyframeEffect: J.Interceptor, KeyframeEffectReadOnly: J.Interceptor, MediaCapabilities: J.Interceptor, MediaCapabilitiesInfo: J.Interceptor, MediaDeviceInfo: J.Interceptor, MediaKeyStatusMap: J.Interceptor, MediaKeySystemAccess: J.Interceptor, MediaKeys: J.Interceptor, MediaKeysPolicy: J.Interceptor, MediaMetadata: J.Interceptor, MediaSession: J.Interceptor, MediaSettingsRange: J.Interceptor, MemoryInfo: J.Interceptor, MessageChannel: J.Interceptor, Metadata: J.Interceptor, MutationObserver: J.Interceptor, WebKitMutationObserver: J.Interceptor, MutationRecord: J.Interceptor, NavigationPreloadManager: J.Interceptor, Navigator: J.Interceptor, NavigatorAutomationInformation: J.Interceptor, NavigatorConcurrentHardware: J.Interceptor, NavigatorCookies: J.Interceptor, NodeFilter: J.Interceptor, NodeIterator: J.Interceptor, NonDocumentTypeChildNode: J.Interceptor, NonElementParentNode: J.Interceptor, NoncedElement: J.Interceptor, OffscreenCanvasRenderingContext2D: J.Interceptor, PaintRenderingContext2D: J.Interceptor, PaintSize: J.Interceptor, PaintWorkletGlobalScope: J.Interceptor, PasswordCredential: J.Interceptor, Path2D: J.Interceptor, PaymentAddress: J.Interceptor, PaymentInstruments: J.Interceptor, PaymentManager: J.Interceptor, PaymentResponse: J.Interceptor, PerformanceEntry: J.Interceptor, PerformanceLongTaskTiming: J.Interceptor, PerformanceMark: J.Interceptor, PerformanceMeasure: J.Interceptor, PerformanceNavigation: J.Interceptor, PerformanceNavigationTiming: J.Interceptor, PerformanceObserver: J.Interceptor, PerformanceObserverEntryList: J.Interceptor, PerformancePaintTiming: J.Interceptor, PerformanceResourceTiming: J.Interceptor, PerformanceServerTiming: J.Interceptor, PerformanceTiming: J.Interceptor, Permissions: J.Interceptor, PhotoCapabilities: J.Interceptor, Presentation: J.Interceptor, PresentationReceiver: J.Interceptor, PublicKeyCredential: J.Interceptor, PushManager: J.Interceptor, PushMessageData: J.Interceptor, PushSubscription: J.Interceptor, PushSubscriptionOptions: J.Interceptor, Range: J.Interceptor, RelatedApplication: J.Interceptor, ReportingObserver: J.Interceptor, ResizeObserver: J.Interceptor, ResizeObserverEntry: J.Interceptor, RTCCertificate: J.Interceptor, RTCIceCandidate: J.Interceptor, mozRTCIceCandidate: J.Interceptor, RTCLegacyStatsReport: J.Interceptor, RTCRtpContributingSource: J.Interceptor, RTCRtpReceiver: J.Interceptor, RTCRtpSender: J.Interceptor, RTCSessionDescription: J.Interceptor, mozRTCSessionDescription: J.Interceptor, RTCStatsResponse: J.Interceptor, Screen: J.Interceptor, ScrollState: J.Interceptor, ScrollTimeline: J.Interceptor, Selection: J.Interceptor, SharedArrayBuffer: J.Interceptor, SpeechRecognitionAlternative: J.Interceptor, SpeechSynthesisVoice: J.Interceptor, StaticRange: J.Interceptor, StorageManager: J.Interceptor, StyleMedia: J.Interceptor, StylePropertyMap: J.Interceptor, StylePropertyMapReadonly: J.Interceptor, SyncManager: J.Interceptor, TaskAttributionTiming: J.Interceptor, TextDetector: J.Interceptor, TextMetrics: J.Interceptor, TrackDefault: J.Interceptor, TreeWalker: J.Interceptor, TrustedHTML: J.Interceptor, TrustedScriptURL: J.Interceptor, TrustedURL: J.Interceptor, UnderlyingSourceBase: J.Interceptor, URLSearchParams: J.Interceptor, VRCoordinateSystem: J.Interceptor, VRDisplayCapabilities: J.Interceptor, VREyeParameters: J.Interceptor, VRFrameData: J.Interceptor, VRFrameOfReference: J.Interceptor, VRPose: J.Interceptor, VRStageBounds: J.Interceptor, VRStageBoundsPoint: J.Interceptor, VRStageParameters: J.Interceptor, ValidityState: J.Interceptor, VideoPlaybackQuality: J.Interceptor, VideoTrack: J.Interceptor, VTTRegion: J.Interceptor, WindowClient: J.Interceptor, WorkletAnimation: J.Interceptor, WorkletGlobalScope: J.Interceptor, XPathEvaluator: J.Interceptor, XPathExpression: J.Interceptor, XPathNSResolver: J.Interceptor, XPathResult: J.Interceptor, XMLSerializer: J.Interceptor, XSLTProcessor: J.Interceptor, Bluetooth: J.Interceptor, BluetoothCharacteristicProperties: J.Interceptor, BluetoothRemoteGATTServer: J.Interceptor, BluetoothRemoteGATTService: J.Interceptor, BluetoothUUID: J.Interceptor, BudgetService: J.Interceptor, Cache: J.Interceptor, DOMFileSystemSync: J.Interceptor, DirectoryEntrySync: J.Interceptor, DirectoryReaderSync: J.Interceptor, EntrySync: J.Interceptor, FileEntrySync: J.Interceptor, FileReaderSync: J.Interceptor, FileWriterSync: J.Interceptor, HTMLAllCollection: J.Interceptor, Mojo: J.Interceptor, MojoHandle: J.Interceptor, MojoWatcher: J.Interceptor, NFC: J.Interceptor, PagePopupController: J.Interceptor, Report: J.Interceptor, Request: J.Interceptor, Response: J.Interceptor, SubtleCrypto: J.Interceptor, USBAlternateInterface: J.Interceptor, USBConfiguration: J.Interceptor, USBDevice: J.Interceptor, USBEndpoint: J.Interceptor, USBInTransferResult: J.Interceptor, USBInterface: J.Interceptor, USBIsochronousInTransferPacket: J.Interceptor, USBIsochronousInTransferResult: J.Interceptor, USBIsochronousOutTransferPacket: J.Interceptor, USBIsochronousOutTransferResult: J.Interceptor, USBOutTransferResult: J.Interceptor, WorkerLocation: J.Interceptor, WorkerNavigator: J.Interceptor, Worklet: J.Interceptor, IDBCursor: J.Interceptor, IDBCursorWithValue: J.Interceptor, IDBFactory: J.Interceptor, IDBIndex: J.Interceptor, IDBKeyRange: J.Interceptor, IDBObjectStore: J.Interceptor, IDBObservation: J.Interceptor, IDBObserver: J.Interceptor, IDBObserverChanges: J.Interceptor, SVGAngle: J.Interceptor, SVGAnimatedAngle: J.Interceptor, SVGAnimatedBoolean: J.Interceptor, SVGAnimatedEnumeration: J.Interceptor, SVGAnimatedInteger: J.Interceptor, SVGAnimatedLength: J.Interceptor, SVGAnimatedLengthList: J.Interceptor, SVGAnimatedNumber: J.Interceptor, SVGAnimatedNumberList: J.Interceptor, SVGAnimatedPreserveAspectRatio: J.Interceptor, SVGAnimatedRect: J.Interceptor, SVGAnimatedString: J.Interceptor, SVGAnimatedTransformList: J.Interceptor, SVGMatrix: J.Interceptor, SVGPoint: J.Interceptor, SVGPreserveAspectRatio: J.Interceptor, SVGRect: J.Interceptor, SVGUnitTypes: J.Interceptor, AudioListener: J.Interceptor, AudioParam: J.Interceptor, AudioTrack: J.Interceptor, AudioWorkletGlobalScope: J.Interceptor, AudioWorkletProcessor: J.Interceptor, PeriodicWave: J.Interceptor, WebGLActiveInfo: J.Interceptor, ANGLEInstancedArrays: J.Interceptor, ANGLE_instanced_arrays: J.Interceptor, WebGLBuffer: J.Interceptor, WebGLCanvas: J.Interceptor, WebGLColorBufferFloat: J.Interceptor, WebGLCompressedTextureASTC: J.Interceptor, WebGLCompressedTextureATC: J.Interceptor, WEBGL_compressed_texture_atc: J.Interceptor, WebGLCompressedTextureETC1: J.Interceptor, WEBGL_compressed_texture_etc1: J.Interceptor, WebGLCompressedTextureETC: J.Interceptor, WebGLCompressedTexturePVRTC: J.Interceptor, WEBGL_compressed_texture_pvrtc: J.Interceptor, WebGLCompressedTextureS3TC: J.Interceptor, WEBGL_compressed_texture_s3tc: J.Interceptor, WebGLCompressedTextureS3TCsRGB: J.Interceptor, WebGLDebugRendererInfo: J.Interceptor, WEBGL_debug_renderer_info: J.Interceptor, WebGLDebugShaders: J.Interceptor, WEBGL_debug_shaders: J.Interceptor, WebGLDepthTexture: J.Interceptor, WEBGL_depth_texture: J.Interceptor, WebGLDrawBuffers: J.Interceptor, WEBGL_draw_buffers: J.Interceptor, EXTsRGB: J.Interceptor, EXT_sRGB: J.Interceptor, EXTBlendMinMax: J.Interceptor, EXT_blend_minmax: J.Interceptor, EXTColorBufferFloat: J.Interceptor, EXTColorBufferHalfFloat: J.Interceptor, EXTDisjointTimerQuery: J.Interceptor, EXTDisjointTimerQueryWebGL2: J.Interceptor, EXTFragDepth: J.Interceptor, EXT_frag_depth: J.Interceptor, EXTShaderTextureLOD: J.Interceptor, EXT_shader_texture_lod: J.Interceptor, EXTTextureFilterAnisotropic: J.Interceptor, EXT_texture_filter_anisotropic: J.Interceptor, WebGLFramebuffer: J.Interceptor, WebGLGetBufferSubDataAsync: J.Interceptor, WebGLLoseContext: J.Interceptor, WebGLExtensionLoseContext: J.Interceptor, WEBGL_lose_context: J.Interceptor, OESElementIndexUint: J.Interceptor, OES_element_index_uint: J.Interceptor, OESStandardDerivatives: J.Interceptor, OES_standard_derivatives: J.Interceptor, OESTextureFloat: J.Interceptor, OES_texture_float: J.Interceptor, OESTextureFloatLinear: J.Interceptor, OES_texture_float_linear: J.Interceptor, OESTextureHalfFloat: J.Interceptor, OES_texture_half_float: J.Interceptor, OESTextureHalfFloatLinear: J.Interceptor, OES_texture_half_float_linear: J.Interceptor, OESVertexArrayObject: J.Interceptor, OES_vertex_array_object: J.Interceptor, WebGLProgram: J.Interceptor, WebGLQuery: J.Interceptor, WebGLRenderbuffer: J.Interceptor, WebGLRenderingContext: J.Interceptor, WebGL2RenderingContext: J.Interceptor, WebGLSampler: J.Interceptor, WebGLShader: J.Interceptor, WebGLShaderPrecisionFormat: J.Interceptor, WebGLSync: J.Interceptor, WebGLTexture: J.Interceptor, WebGLTimerQueryEXT: J.Interceptor, WebGLTransformFeedback: J.Interceptor, WebGLUniformLocation: J.Interceptor, WebGLVertexArrayObject: J.Interceptor, WebGLVertexArrayObjectOES: J.Interceptor, WebGL: J.Interceptor, WebGL2RenderingContextBase: J.Interceptor, Database: J.Interceptor, SQLResultSet: J.Interceptor, SQLTransaction: J.Interceptor, DataView: H.NativeTypedData, ArrayBufferView: H.NativeTypedData, Float32Array: H.NativeTypedArrayOfDouble, Float64Array: H.NativeTypedArrayOfDouble, Int16Array: H.NativeInt16List, Int32Array: H.NativeInt32List, Int8Array: H.NativeInt8List, Uint16Array: H.NativeUint16List, Uint32Array: H.NativeUint32List, Uint8ClampedArray: H.NativeUint8ClampedList, CanvasPixelArray: H.NativeUint8ClampedList, Uint8Array: H.NativeUint8List, HTMLAudioElement: W.HtmlElement, HTMLBRElement: W.HtmlElement, HTMLBaseElement: W.HtmlElement, HTMLBodyElement: W.HtmlElement, HTMLButtonElement: W.HtmlElement, HTMLCanvasElement: W.HtmlElement, HTMLContentElement: W.HtmlElement, HTMLDListElement: W.HtmlElement, HTMLDataElement: W.HtmlElement, HTMLDataListElement: W.HtmlElement, HTMLDetailsElement: W.HtmlElement, HTMLDialogElement: W.HtmlElement, HTMLDivElement: W.HtmlElement, HTMLEmbedElement: W.HtmlElement, HTMLFieldSetElement: W.HtmlElement, HTMLHRElement: W.HtmlElement, HTMLHeadElement: W.HtmlElement, HTMLHeadingElement: W.HtmlElement, HTMLHtmlElement: W.HtmlElement, HTMLIFrameElement: W.HtmlElement, HTMLImageElement: W.HtmlElement, HTMLInputElement: W.HtmlElement, HTMLLIElement: W.HtmlElement, HTMLLabelElement: W.HtmlElement, HTMLLegendElement: W.HtmlElement, HTMLLinkElement: W.HtmlElement, HTMLMapElement: W.HtmlElement, HTMLMediaElement: W.HtmlElement, HTMLMenuElement: W.HtmlElement, HTMLMetaElement: W.HtmlElement, HTMLMeterElement: W.HtmlElement, HTMLModElement: W.HtmlElement, HTMLOListElement: W.HtmlElement, HTMLObjectElement: W.HtmlElement, HTMLOptGroupElement: W.HtmlElement, HTMLOptionElement: W.HtmlElement, HTMLOutputElement: W.HtmlElement, HTMLParagraphElement: W.HtmlElement, HTMLParamElement: W.HtmlElement, HTMLPictureElement: W.HtmlElement, HTMLPreElement: W.HtmlElement, HTMLProgressElement: W.HtmlElement, HTMLQuoteElement: W.HtmlElement, HTMLScriptElement: W.HtmlElement, HTMLShadowElement: W.HtmlElement, HTMLSlotElement: W.HtmlElement, HTMLSourceElement: W.HtmlElement, HTMLSpanElement: W.HtmlElement, HTMLStyleElement: W.HtmlElement, HTMLTableCaptionElement: W.HtmlElement, HTMLTableCellElement: W.HtmlElement, HTMLTableDataCellElement: W.HtmlElement, HTMLTableHeaderCellElement: W.HtmlElement, HTMLTableColElement: W.HtmlElement, HTMLTableElement: W.HtmlElement, HTMLTableRowElement: W.HtmlElement, HTMLTableSectionElement: W.HtmlElement, HTMLTemplateElement: W.HtmlElement, HTMLTextAreaElement: W.HtmlElement, HTMLTimeElement: W.HtmlElement, HTMLTitleElement: W.HtmlElement, HTMLTrackElement: W.HtmlElement, HTMLUListElement: W.HtmlElement, HTMLUnknownElement: W.HtmlElement, HTMLVideoElement: W.HtmlElement, HTMLDirectoryElement: W.HtmlElement, HTMLFontElement: W.HtmlElement, HTMLFrameElement: W.HtmlElement, HTMLFrameSetElement: W.HtmlElement, HTMLMarqueeElement: W.HtmlElement, HTMLElement: W.HtmlElement, AccessibleNodeList: W.AccessibleNodeList, HTMLAnchorElement: W.AnchorElement, ApplicationCacheErrorEvent: W.ApplicationCacheErrorEvent, HTMLAreaElement: W.AreaElement, Blob: W.Blob, CDATASection: W.CharacterData, CharacterData: W.CharacterData, Comment: W.CharacterData, ProcessingInstruction: W.CharacterData, Text: W.CharacterData, CSSPerspective: W.CssPerspective, CSSCharsetRule: W.CssRule, CSSConditionRule: W.CssRule, CSSFontFaceRule: W.CssRule, CSSGroupingRule: W.CssRule, CSSImportRule: W.CssRule, CSSKeyframeRule: W.CssRule, MozCSSKeyframeRule: W.CssRule, WebKitCSSKeyframeRule: W.CssRule, CSSKeyframesRule: W.CssRule, MozCSSKeyframesRule: W.CssRule, WebKitCSSKeyframesRule: W.CssRule, CSSMediaRule: W.CssRule, CSSNamespaceRule: W.CssRule, CSSPageRule: W.CssRule, CSSRule: W.CssRule, CSSStyleRule: W.CssRule, CSSSupportsRule: W.CssRule, CSSViewportRule: W.CssRule, CSSStyleDeclaration: W.CssStyleDeclaration, MSStyleCSSProperties: W.CssStyleDeclaration, CSS2Properties: W.CssStyleDeclaration, CSSImageValue: W.CssStyleValue, CSSKeywordValue: W.CssStyleValue, CSSNumericValue: W.CssStyleValue, CSSPositionValue: W.CssStyleValue, CSSResourceValue: W.CssStyleValue, CSSUnitValue: W.CssStyleValue, CSSURLImageValue: W.CssStyleValue, CSSStyleValue: W.CssStyleValue, CSSMatrixComponent: W.CssTransformComponent, CSSRotation: W.CssTransformComponent, CSSScale: W.CssTransformComponent, CSSSkew: W.CssTransformComponent, CSSTranslation: W.CssTransformComponent, CSSTransformComponent: W.CssTransformComponent, CSSTransformValue: W.CssTransformValue, CSSUnparsedValue: W.CssUnparsedValue, DataTransferItemList: W.DataTransferItemList, DeprecationReport: W.DeprecationReport, DOMError: W.DomError, DOMException: W.DomException, ClientRectList: W.DomRectList, DOMRectList: W.DomRectList, DOMRectReadOnly: W.DomRectReadOnly, DOMStringList: W.DomStringList, DOMTokenList: W.DomTokenList, SVGAElement: W.Element, SVGAnimateElement: W.Element, SVGAnimateMotionElement: W.Element, SVGAnimateTransformElement: W.Element, SVGAnimationElement: W.Element, SVGCircleElement: W.Element, SVGClipPathElement: W.Element, SVGDefsElement: W.Element, SVGDescElement: W.Element, SVGDiscardElement: W.Element, SVGEllipseElement: W.Element, SVGFEBlendElement: W.Element, SVGFEColorMatrixElement: W.Element, SVGFEComponentTransferElement: W.Element, SVGFECompositeElement: W.Element, SVGFEConvolveMatrixElement: W.Element, SVGFEDiffuseLightingElement: W.Element, SVGFEDisplacementMapElement: W.Element, SVGFEDistantLightElement: W.Element, SVGFEFloodElement: W.Element, SVGFEFuncAElement: W.Element, SVGFEFuncBElement: W.Element, SVGFEFuncGElement: W.Element, SVGFEFuncRElement: W.Element, SVGFEGaussianBlurElement: W.Element, SVGFEImageElement: W.Element, SVGFEMergeElement: W.Element, SVGFEMergeNodeElement: W.Element, SVGFEMorphologyElement: W.Element, SVGFEOffsetElement: W.Element, SVGFEPointLightElement: W.Element, SVGFESpecularLightingElement: W.Element, SVGFESpotLightElement: W.Element, SVGFETileElement: W.Element, SVGFETurbulenceElement: W.Element, SVGFilterElement: W.Element, SVGForeignObjectElement: W.Element, SVGGElement: W.Element, SVGGeometryElement: W.Element, SVGGraphicsElement: W.Element, SVGImageElement: W.Element, SVGLineElement: W.Element, SVGLinearGradientElement: W.Element, SVGMarkerElement: W.Element, SVGMaskElement: W.Element, SVGMetadataElement: W.Element, SVGPathElement: W.Element, SVGPatternElement: W.Element, SVGPolygonElement: W.Element, SVGPolylineElement: W.Element, SVGRadialGradientElement: W.Element, SVGRectElement: W.Element, SVGScriptElement: W.Element, SVGSetElement: W.Element, SVGStopElement: W.Element, SVGStyleElement: W.Element, SVGElement: W.Element, SVGSVGElement: W.Element, SVGSwitchElement: W.Element, SVGSymbolElement: W.Element, SVGTSpanElement: W.Element, SVGTextContentElement: W.Element, SVGTextElement: W.Element, SVGTextPathElement: W.Element, SVGTextPositioningElement: W.Element, SVGTitleElement: W.Element, SVGUseElement: W.Element, SVGViewElement: W.Element, SVGGradientElement: W.Element, SVGComponentTransferFunctionElement: W.Element, SVGFEDropShadowElement: W.Element, SVGMPathElement: W.Element, Element: W.Element, ErrorEvent: W.ErrorEvent, AbortPaymentEvent: W.Event, AnimationEvent: W.Event, AnimationPlaybackEvent: W.Event, BackgroundFetchClickEvent: W.Event, BackgroundFetchEvent: W.Event, BackgroundFetchFailEvent: W.Event, BackgroundFetchedEvent: W.Event, BeforeInstallPromptEvent: W.Event, BeforeUnloadEvent: W.Event, BlobEvent: W.Event, CanMakePaymentEvent: W.Event, ClipboardEvent: W.Event, CloseEvent: W.Event, CompositionEvent: W.Event, CustomEvent: W.Event, DeviceMotionEvent: W.Event, DeviceOrientationEvent: W.Event, ExtendableEvent: W.Event, ExtendableMessageEvent: W.Event, FetchEvent: W.Event, FocusEvent: W.Event, FontFaceSetLoadEvent: W.Event, ForeignFetchEvent: W.Event, GamepadEvent: W.Event, HashChangeEvent: W.Event, InstallEvent: W.Event, KeyboardEvent: W.Event, MediaEncryptedEvent: W.Event, MediaQueryListEvent: W.Event, MediaStreamEvent: W.Event, MediaStreamTrackEvent: W.Event, MessageEvent: W.Event, MIDIConnectionEvent: W.Event, MIDIMessageEvent: W.Event, MouseEvent: W.Event, DragEvent: W.Event, MutationEvent: W.Event, NotificationEvent: W.Event, PageTransitionEvent: W.Event, PaymentRequestEvent: W.Event, PaymentRequestUpdateEvent: W.Event, PointerEvent: W.Event, PopStateEvent: W.Event, PresentationConnectionAvailableEvent: W.Event, ProgressEvent: W.Event, PromiseRejectionEvent: W.Event, PushEvent: W.Event, RTCDataChannelEvent: W.Event, RTCDTMFToneChangeEvent: W.Event, RTCPeerConnectionIceEvent: W.Event, RTCTrackEvent: W.Event, SecurityPolicyViolationEvent: W.Event, SensorErrorEvent: W.Event, SpeechRecognitionEvent: W.Event, SpeechSynthesisEvent: W.Event, StorageEvent: W.Event, SyncEvent: W.Event, TextEvent: W.Event, TouchEvent: W.Event, TrackEvent: W.Event, TransitionEvent: W.Event, WebKitTransitionEvent: W.Event, UIEvent: W.Event, VRDeviceEvent: W.Event, VRDisplayEvent: W.Event, VRSessionEvent: W.Event, WheelEvent: W.Event, MojoInterfaceRequestEvent: W.Event, ResourceProgressEvent: W.Event, USBConnectionEvent: W.Event, IDBVersionChangeEvent: W.Event, AudioProcessingEvent: W.Event, OfflineAudioCompletionEvent: W.Event, WebGLContextEvent: W.Event, Event: W.Event, InputEvent: W.Event, SubmitEvent: W.Event, AbsoluteOrientationSensor: W.EventTarget, Accelerometer: W.EventTarget, AccessibleNode: W.EventTarget, AmbientLightSensor: W.EventTarget, Animation: W.EventTarget, ApplicationCache: W.EventTarget, DOMApplicationCache: W.EventTarget, OfflineResourceList: W.EventTarget, BackgroundFetchRegistration: W.EventTarget, BatteryManager: W.EventTarget, BroadcastChannel: W.EventTarget, CanvasCaptureMediaStreamTrack: W.EventTarget, DedicatedWorkerGlobalScope: W.EventTarget, EventSource: W.EventTarget, FileReader: W.EventTarget, FontFaceSet: W.EventTarget, Gyroscope: W.EventTarget, XMLHttpRequest: W.EventTarget, XMLHttpRequestEventTarget: W.EventTarget, XMLHttpRequestUpload: W.EventTarget, LinearAccelerationSensor: W.EventTarget, Magnetometer: W.EventTarget, MediaDevices: W.EventTarget, MediaKeySession: W.EventTarget, MediaQueryList: W.EventTarget, MediaRecorder: W.EventTarget, MediaSource: W.EventTarget, MediaStream: W.EventTarget, MediaStreamTrack: W.EventTarget, MessagePort: W.EventTarget, MIDIAccess: W.EventTarget, MIDIInput: W.EventTarget, MIDIOutput: W.EventTarget, MIDIPort: W.EventTarget, NetworkInformation: W.EventTarget, Notification: W.EventTarget, OffscreenCanvas: W.EventTarget, OrientationSensor: W.EventTarget, PaymentRequest: W.EventTarget, Performance: W.EventTarget, PermissionStatus: W.EventTarget, PresentationAvailability: W.EventTarget, PresentationConnection: W.EventTarget, PresentationConnectionList: W.EventTarget, PresentationRequest: W.EventTarget, RelativeOrientationSensor: W.EventTarget, RemotePlayback: W.EventTarget, RTCDataChannel: W.EventTarget, DataChannel: W.EventTarget, RTCDTMFSender: W.EventTarget, RTCPeerConnection: W.EventTarget, webkitRTCPeerConnection: W.EventTarget, mozRTCPeerConnection: W.EventTarget, ScreenOrientation: W.EventTarget, Sensor: W.EventTarget, ServiceWorker: W.EventTarget, ServiceWorkerContainer: W.EventTarget, ServiceWorkerGlobalScope: W.EventTarget, ServiceWorkerRegistration: W.EventTarget, SharedWorker: W.EventTarget, SharedWorkerGlobalScope: W.EventTarget, SpeechRecognition: W.EventTarget, SpeechSynthesis: W.EventTarget, SpeechSynthesisUtterance: W.EventTarget, VR: W.EventTarget, VRDevice: W.EventTarget, VRDisplay: W.EventTarget, VRSession: W.EventTarget, VisualViewport: W.EventTarget, WebSocket: W.EventTarget, Window: W.EventTarget, DOMWindow: W.EventTarget, Worker: W.EventTarget, WorkerGlobalScope: W.EventTarget, WorkerPerformance: W.EventTarget, BluetoothDevice: W.EventTarget, BluetoothRemoteGATTCharacteristic: W.EventTarget, Clipboard: W.EventTarget, MojoInterfaceInterceptor: W.EventTarget, USB: W.EventTarget, IDBDatabase: W.EventTarget, IDBOpenDBRequest: W.EventTarget, IDBVersionChangeRequest: W.EventTarget, IDBRequest: W.EventTarget, IDBTransaction: W.EventTarget, AnalyserNode: W.EventTarget, RealtimeAnalyserNode: W.EventTarget, AudioBufferSourceNode: W.EventTarget, AudioDestinationNode: W.EventTarget, AudioNode: W.EventTarget, AudioScheduledSourceNode: W.EventTarget, AudioWorkletNode: W.EventTarget, BiquadFilterNode: W.EventTarget, ChannelMergerNode: W.EventTarget, AudioChannelMerger: W.EventTarget, ChannelSplitterNode: W.EventTarget, AudioChannelSplitter: W.EventTarget, ConstantSourceNode: W.EventTarget, ConvolverNode: W.EventTarget, DelayNode: W.EventTarget, DynamicsCompressorNode: W.EventTarget, GainNode: W.EventTarget, AudioGainNode: W.EventTarget, IIRFilterNode: W.EventTarget, MediaElementAudioSourceNode: W.EventTarget, MediaStreamAudioDestinationNode: W.EventTarget, MediaStreamAudioSourceNode: W.EventTarget, OscillatorNode: W.EventTarget, Oscillator: W.EventTarget, PannerNode: W.EventTarget, AudioPannerNode: W.EventTarget, webkitAudioPannerNode: W.EventTarget, ScriptProcessorNode: W.EventTarget, JavaScriptAudioNode: W.EventTarget, StereoPannerNode: W.EventTarget, WaveShaperNode: W.EventTarget, EventTarget: W.EventTarget, File: W.File, FileList: W.FileList, FileWriter: W.FileWriter, HTMLFormElement: W.FormElement, Gamepad: W.Gamepad, History: W.History, HTMLCollection: W.HtmlCollection, HTMLFormControlsCollection: W.HtmlCollection, HTMLOptionsCollection: W.HtmlCollection, InterventionReport: W.InterventionReport, Location: W.Location, MediaError: W.MediaError, MediaKeyMessageEvent: W.MediaKeyMessageEvent, MediaList: W.MediaList, MIDIInputMap: W.MidiInputMap, MIDIOutputMap: W.MidiOutputMap, MimeType: W.MimeType, MimeTypeArray: W.MimeTypeArray, NavigatorUserMediaError: W.NavigatorUserMediaError, Document: W.Node, DocumentFragment: W.Node, HTMLDocument: W.Node, ShadowRoot: W.Node, XMLDocument: W.Node, Attr: W.Node, DocumentType: W.Node, Node: W.Node, NodeList: W.NodeList, RadioNodeList: W.NodeList, OverconstrainedError: W.OverconstrainedError, Plugin: W.Plugin, PluginArray: W.PluginArray, PositionError: W.PositionError, PresentationConnectionCloseEvent: W.PresentationConnectionCloseEvent, ReportBody: W.ReportBody, RTCStatsReport: W.RtcStatsReport, HTMLSelectElement: W.SelectElement, SourceBuffer: W.SourceBuffer, SourceBufferList: W.SourceBufferList, SpeechGrammar: W.SpeechGrammar, SpeechGrammarList: W.SpeechGrammarList, SpeechRecognitionError: W.SpeechRecognitionError, SpeechRecognitionResult: W.SpeechRecognitionResult, Storage: W.Storage, CSSStyleSheet: W.StyleSheet, StyleSheet: W.StyleSheet, TextTrack: W.TextTrack, TextTrackCue: W.TextTrackCue, VTTCue: W.TextTrackCue, TextTrackCueList: W.TextTrackCueList, TextTrackList: W.TextTrackList, TimeRanges: W.TimeRanges, Touch: W.Touch, TouchList: W.TouchList, TrackDefaultList: W.TrackDefaultList, URL: W.Url, VideoTrackList: W.VideoTrackList, CSSRuleList: W._CssRuleList, ClientRect: W._DomRect, DOMRect: W._DomRect, GamepadList: W._GamepadList, NamedNodeMap: W._NamedNodeMap, MozNamedAttrMap: W._NamedNodeMap, SpeechRecognitionResultList: W._SpeechRecognitionResultList, StyleSheetList: W._StyleSheetList, SVGLength: P.Length, SVGLengthList: P.LengthList, SVGNumber: P.Number, SVGNumberList: P.NumberList, SVGPointList: P.PointList, SVGStringList: P.StringList, SVGTransform: P.Transform, SVGTransformList: P.TransformList, AudioBuffer: P.AudioBuffer, AudioParamMap: P.AudioParamMap, AudioTrackList: P.AudioTrackList, AudioContext: P.BaseAudioContext, webkitAudioContext: P.BaseAudioContext, BaseAudioContext: P.BaseAudioContext, OfflineAudioContext: P.OfflineAudioContext, SQLError: P.SqlError, SQLResultSetRowList: P.SqlResultSetRowList});
    hunkHelpers.setOrUpdateLeafTags({ArrayBuffer: true, AnimationEffectReadOnly: true, AnimationEffectTiming: true, AnimationEffectTimingReadOnly: true, AnimationTimeline: true, AnimationWorkletGlobalScope: true, AuthenticatorAssertionResponse: true, AuthenticatorAttestationResponse: true, AuthenticatorResponse: true, BackgroundFetchFetch: true, BackgroundFetchManager: true, BackgroundFetchSettledFetch: true, BarProp: true, BarcodeDetector: true, BluetoothRemoteGATTDescriptor: true, Body: true, BudgetState: true, CacheStorage: true, CanvasGradient: true, CanvasPattern: true, CanvasRenderingContext2D: true, Client: true, Clients: true, CookieStore: true, Coordinates: true, Credential: true, CredentialUserData: true, CredentialsContainer: true, Crypto: true, CryptoKey: true, CSS: true, CSSVariableReferenceValue: true, CustomElementRegistry: true, DataTransfer: true, DataTransferItem: true, DeprecatedStorageInfo: true, DeprecatedStorageQuota: true, DetectedBarcode: true, DetectedFace: true, DetectedText: true, DeviceAcceleration: true, DeviceRotationRate: true, DirectoryEntry: true, DirectoryReader: true, DocumentOrShadowRoot: true, DocumentTimeline: true, DOMImplementation: true, Iterator: true, DOMMatrix: true, DOMMatrixReadOnly: true, DOMParser: true, DOMPoint: true, DOMPointReadOnly: true, DOMQuad: true, DOMStringMap: true, Entry: true, External: true, FaceDetector: true, FederatedCredential: true, FileEntry: true, DOMFileSystem: true, FontFace: true, FontFaceSource: true, FormData: true, GamepadButton: true, GamepadPose: true, Geolocation: true, Position: true, Headers: true, HTMLHyperlinkElementUtils: true, IdleDeadline: true, ImageBitmap: true, ImageBitmapRenderingContext: true, ImageCapture: true, ImageData: true, InputDeviceCapabilities: true, IntersectionObserver: true, IntersectionObserverEntry: true, KeyframeEffect: true, KeyframeEffectReadOnly: true, MediaCapabilities: true, MediaCapabilitiesInfo: true, MediaDeviceInfo: true, MediaKeyStatusMap: true, MediaKeySystemAccess: true, MediaKeys: true, MediaKeysPolicy: true, MediaMetadata: true, MediaSession: true, MediaSettingsRange: true, MemoryInfo: true, MessageChannel: true, Metadata: true, MutationObserver: true, WebKitMutationObserver: true, MutationRecord: true, NavigationPreloadManager: true, Navigator: true, NavigatorAutomationInformation: true, NavigatorConcurrentHardware: true, NavigatorCookies: true, NodeFilter: true, NodeIterator: true, NonDocumentTypeChildNode: true, NonElementParentNode: true, NoncedElement: true, OffscreenCanvasRenderingContext2D: true, PaintRenderingContext2D: true, PaintSize: true, PaintWorkletGlobalScope: true, PasswordCredential: true, Path2D: true, PaymentAddress: true, PaymentInstruments: true, PaymentManager: true, PaymentResponse: true, PerformanceEntry: true, PerformanceLongTaskTiming: true, PerformanceMark: true, PerformanceMeasure: true, PerformanceNavigation: true, PerformanceNavigationTiming: true, PerformanceObserver: true, PerformanceObserverEntryList: true, PerformancePaintTiming: true, PerformanceResourceTiming: true, PerformanceServerTiming: true, PerformanceTiming: true, Permissions: true, PhotoCapabilities: true, Presentation: true, PresentationReceiver: true, PublicKeyCredential: true, PushManager: true, PushMessageData: true, PushSubscription: true, PushSubscriptionOptions: true, Range: true, RelatedApplication: true, ReportingObserver: true, ResizeObserver: true, ResizeObserverEntry: true, RTCCertificate: true, RTCIceCandidate: true, mozRTCIceCandidate: true, RTCLegacyStatsReport: true, RTCRtpContributingSource: true, RTCRtpReceiver: true, RTCRtpSender: true, RTCSessionDescription: true, mozRTCSessionDescription: true, RTCStatsResponse: true, Screen: true, ScrollState: true, ScrollTimeline: true, Selection: true, SharedArrayBuffer: true, SpeechRecognitionAlternative: true, SpeechSynthesisVoice: true, StaticRange: true, StorageManager: true, StyleMedia: true, StylePropertyMap: true, StylePropertyMapReadonly: true, SyncManager: true, TaskAttributionTiming: true, TextDetector: true, TextMetrics: true, TrackDefault: true, TreeWalker: true, TrustedHTML: true, TrustedScriptURL: true, TrustedURL: true, UnderlyingSourceBase: true, URLSearchParams: true, VRCoordinateSystem: true, VRDisplayCapabilities: true, VREyeParameters: true, VRFrameData: true, VRFrameOfReference: true, VRPose: true, VRStageBounds: true, VRStageBoundsPoint: true, VRStageParameters: true, ValidityState: true, VideoPlaybackQuality: true, VideoTrack: true, VTTRegion: true, WindowClient: true, WorkletAnimation: true, WorkletGlobalScope: true, XPathEvaluator: true, XPathExpression: true, XPathNSResolver: true, XPathResult: true, XMLSerializer: true, XSLTProcessor: true, Bluetooth: true, BluetoothCharacteristicProperties: true, BluetoothRemoteGATTServer: true, BluetoothRemoteGATTService: true, BluetoothUUID: true, BudgetService: true, Cache: true, DOMFileSystemSync: true, DirectoryEntrySync: true, DirectoryReaderSync: true, EntrySync: true, FileEntrySync: true, FileReaderSync: true, FileWriterSync: true, HTMLAllCollection: true, Mojo: true, MojoHandle: true, MojoWatcher: true, NFC: true, PagePopupController: true, Report: true, Request: true, Response: true, SubtleCrypto: true, USBAlternateInterface: true, USBConfiguration: true, USBDevice: true, USBEndpoint: true, USBInTransferResult: true, USBInterface: true, USBIsochronousInTransferPacket: true, USBIsochronousInTransferResult: true, USBIsochronousOutTransferPacket: true, USBIsochronousOutTransferResult: true, USBOutTransferResult: true, WorkerLocation: true, WorkerNavigator: true, Worklet: true, IDBCursor: true, IDBCursorWithValue: true, IDBFactory: true, IDBIndex: true, IDBKeyRange: true, IDBObjectStore: true, IDBObservation: true, IDBObserver: true, IDBObserverChanges: true, SVGAngle: true, SVGAnimatedAngle: true, SVGAnimatedBoolean: true, SVGAnimatedEnumeration: true, SVGAnimatedInteger: true, SVGAnimatedLength: true, SVGAnimatedLengthList: true, SVGAnimatedNumber: true, SVGAnimatedNumberList: true, SVGAnimatedPreserveAspectRatio: true, SVGAnimatedRect: true, SVGAnimatedString: true, SVGAnimatedTransformList: true, SVGMatrix: true, SVGPoint: true, SVGPreserveAspectRatio: true, SVGRect: true, SVGUnitTypes: true, AudioListener: true, AudioParam: true, AudioTrack: true, AudioWorkletGlobalScope: true, AudioWorkletProcessor: true, PeriodicWave: true, WebGLActiveInfo: true, ANGLEInstancedArrays: true, ANGLE_instanced_arrays: true, WebGLBuffer: true, WebGLCanvas: true, WebGLColorBufferFloat: true, WebGLCompressedTextureASTC: true, WebGLCompressedTextureATC: true, WEBGL_compressed_texture_atc: true, WebGLCompressedTextureETC1: true, WEBGL_compressed_texture_etc1: true, WebGLCompressedTextureETC: true, WebGLCompressedTexturePVRTC: true, WEBGL_compressed_texture_pvrtc: true, WebGLCompressedTextureS3TC: true, WEBGL_compressed_texture_s3tc: true, WebGLCompressedTextureS3TCsRGB: true, WebGLDebugRendererInfo: true, WEBGL_debug_renderer_info: true, WebGLDebugShaders: true, WEBGL_debug_shaders: true, WebGLDepthTexture: true, WEBGL_depth_texture: true, WebGLDrawBuffers: true, WEBGL_draw_buffers: true, EXTsRGB: true, EXT_sRGB: true, EXTBlendMinMax: true, EXT_blend_minmax: true, EXTColorBufferFloat: true, EXTColorBufferHalfFloat: true, EXTDisjointTimerQuery: true, EXTDisjointTimerQueryWebGL2: true, EXTFragDepth: true, EXT_frag_depth: true, EXTShaderTextureLOD: true, EXT_shader_texture_lod: true, EXTTextureFilterAnisotropic: true, EXT_texture_filter_anisotropic: true, WebGLFramebuffer: true, WebGLGetBufferSubDataAsync: true, WebGLLoseContext: true, WebGLExtensionLoseContext: true, WEBGL_lose_context: true, OESElementIndexUint: true, OES_element_index_uint: true, OESStandardDerivatives: true, OES_standard_derivatives: true, OESTextureFloat: true, OES_texture_float: true, OESTextureFloatLinear: true, OES_texture_float_linear: true, OESTextureHalfFloat: true, OES_texture_half_float: true, OESTextureHalfFloatLinear: true, OES_texture_half_float_linear: true, OESVertexArrayObject: true, OES_vertex_array_object: true, WebGLProgram: true, WebGLQuery: true, WebGLRenderbuffer: true, WebGLRenderingContext: true, WebGL2RenderingContext: true, WebGLSampler: true, WebGLShader: true, WebGLShaderPrecisionFormat: true, WebGLSync: true, WebGLTexture: true, WebGLTimerQueryEXT: true, WebGLTransformFeedback: true, WebGLUniformLocation: true, WebGLVertexArrayObject: true, WebGLVertexArrayObjectOES: true, WebGL: true, WebGL2RenderingContextBase: true, Database: true, SQLResultSet: true, SQLTransaction: true, DataView: true, ArrayBufferView: false, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false, HTMLAudioElement: true, HTMLBRElement: true, HTMLBaseElement: true, HTMLBodyElement: true, HTMLButtonElement: true, HTMLCanvasElement: true, HTMLContentElement: true, HTMLDListElement: true, HTMLDataElement: true, HTMLDataListElement: true, HTMLDetailsElement: true, HTMLDialogElement: true, HTMLDivElement: true, HTMLEmbedElement: true, HTMLFieldSetElement: true, HTMLHRElement: true, HTMLHeadElement: true, HTMLHeadingElement: true, HTMLHtmlElement: true, HTMLIFrameElement: true, HTMLImageElement: true, HTMLInputElement: true, HTMLLIElement: true, HTMLLabelElement: true, HTMLLegendElement: true, HTMLLinkElement: true, HTMLMapElement: true, HTMLMediaElement: true, HTMLMenuElement: true, HTMLMetaElement: true, HTMLMeterElement: true, HTMLModElement: true, HTMLOListElement: true, HTMLObjectElement: true, HTMLOptGroupElement: true, HTMLOptionElement: true, HTMLOutputElement: true, HTMLParagraphElement: true, HTMLParamElement: true, HTMLPictureElement: true, HTMLPreElement: true, HTMLProgressElement: true, HTMLQuoteElement: true, HTMLScriptElement: true, HTMLShadowElement: true, HTMLSlotElement: true, HTMLSourceElement: true, HTMLSpanElement: true, HTMLStyleElement: true, HTMLTableCaptionElement: true, HTMLTableCellElement: true, HTMLTableDataCellElement: true, HTMLTableHeaderCellElement: true, HTMLTableColElement: true, HTMLTableElement: true, HTMLTableRowElement: true, HTMLTableSectionElement: true, HTMLTemplateElement: true, HTMLTextAreaElement: true, HTMLTimeElement: true, HTMLTitleElement: true, HTMLTrackElement: true, HTMLUListElement: true, HTMLUnknownElement: true, HTMLVideoElement: true, HTMLDirectoryElement: true, HTMLFontElement: true, HTMLFrameElement: true, HTMLFrameSetElement: true, HTMLMarqueeElement: true, HTMLElement: false, AccessibleNodeList: true, HTMLAnchorElement: true, ApplicationCacheErrorEvent: true, HTMLAreaElement: true, Blob: false, CDATASection: true, CharacterData: true, Comment: true, ProcessingInstruction: true, Text: true, CSSPerspective: true, CSSCharsetRule: true, CSSConditionRule: true, CSSFontFaceRule: true, CSSGroupingRule: true, CSSImportRule: true, CSSKeyframeRule: true, MozCSSKeyframeRule: true, WebKitCSSKeyframeRule: true, CSSKeyframesRule: true, MozCSSKeyframesRule: true, WebKitCSSKeyframesRule: true, CSSMediaRule: true, CSSNamespaceRule: true, CSSPageRule: true, CSSRule: true, CSSStyleRule: true, CSSSupportsRule: true, CSSViewportRule: true, CSSStyleDeclaration: true, MSStyleCSSProperties: true, CSS2Properties: true, CSSImageValue: true, CSSKeywordValue: true, CSSNumericValue: true, CSSPositionValue: true, CSSResourceValue: true, CSSUnitValue: true, CSSURLImageValue: true, CSSStyleValue: false, CSSMatrixComponent: true, CSSRotation: true, CSSScale: true, CSSSkew: true, CSSTranslation: true, CSSTransformComponent: false, CSSTransformValue: true, CSSUnparsedValue: true, DataTransferItemList: true, DeprecationReport: true, DOMError: true, DOMException: true, ClientRectList: true, DOMRectList: true, DOMRectReadOnly: false, DOMStringList: true, DOMTokenList: true, SVGAElement: true, SVGAnimateElement: true, SVGAnimateMotionElement: true, SVGAnimateTransformElement: true, SVGAnimationElement: true, SVGCircleElement: true, SVGClipPathElement: true, SVGDefsElement: true, SVGDescElement: true, SVGDiscardElement: true, SVGEllipseElement: true, SVGFEBlendElement: true, SVGFEColorMatrixElement: true, SVGFEComponentTransferElement: true, SVGFECompositeElement: true, SVGFEConvolveMatrixElement: true, SVGFEDiffuseLightingElement: true, SVGFEDisplacementMapElement: true, SVGFEDistantLightElement: true, SVGFEFloodElement: true, SVGFEFuncAElement: true, SVGFEFuncBElement: true, SVGFEFuncGElement: true, SVGFEFuncRElement: true, SVGFEGaussianBlurElement: true, SVGFEImageElement: true, SVGFEMergeElement: true, SVGFEMergeNodeElement: true, SVGFEMorphologyElement: true, SVGFEOffsetElement: true, SVGFEPointLightElement: true, SVGFESpecularLightingElement: true, SVGFESpotLightElement: true, SVGFETileElement: true, SVGFETurbulenceElement: true, SVGFilterElement: true, SVGForeignObjectElement: true, SVGGElement: true, SVGGeometryElement: true, SVGGraphicsElement: true, SVGImageElement: true, SVGLineElement: true, SVGLinearGradientElement: true, SVGMarkerElement: true, SVGMaskElement: true, SVGMetadataElement: true, SVGPathElement: true, SVGPatternElement: true, SVGPolygonElement: true, SVGPolylineElement: true, SVGRadialGradientElement: true, SVGRectElement: true, SVGScriptElement: true, SVGSetElement: true, SVGStopElement: true, SVGStyleElement: true, SVGElement: true, SVGSVGElement: true, SVGSwitchElement: true, SVGSymbolElement: true, SVGTSpanElement: true, SVGTextContentElement: true, SVGTextElement: true, SVGTextPathElement: true, SVGTextPositioningElement: true, SVGTitleElement: true, SVGUseElement: true, SVGViewElement: true, SVGGradientElement: true, SVGComponentTransferFunctionElement: true, SVGFEDropShadowElement: true, SVGMPathElement: true, Element: false, ErrorEvent: true, AbortPaymentEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: true, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, BlobEvent: true, CanMakePaymentEvent: true, ClipboardEvent: true, CloseEvent: true, CompositionEvent: true, CustomEvent: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, ExtendableEvent: true, ExtendableMessageEvent: true, FetchEvent: true, FocusEvent: true, FontFaceSetLoadEvent: true, ForeignFetchEvent: true, GamepadEvent: true, HashChangeEvent: true, InstallEvent: true, KeyboardEvent: true, MediaEncryptedEvent: true, MediaQueryListEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MessageEvent: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MouseEvent: true, DragEvent: true, MutationEvent: true, NotificationEvent: true, PageTransitionEvent: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PointerEvent: true, PopStateEvent: true, PresentationConnectionAvailableEvent: true, ProgressEvent: true, PromiseRejectionEvent: true, PushEvent: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionEvent: true, SpeechSynthesisEvent: true, StorageEvent: true, SyncEvent: true, TextEvent: true, TouchEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, UIEvent: true, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, WheelEvent: true, MojoInterfaceRequestEvent: true, ResourceProgressEvent: true, USBConnectionEvent: true, IDBVersionChangeEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, Event: false, InputEvent: false, SubmitEvent: false, AbsoluteOrientationSensor: true, Accelerometer: true, AccessibleNode: true, AmbientLightSensor: true, Animation: true, ApplicationCache: true, DOMApplicationCache: true, OfflineResourceList: true, BackgroundFetchRegistration: true, BatteryManager: true, BroadcastChannel: true, CanvasCaptureMediaStreamTrack: true, DedicatedWorkerGlobalScope: true, EventSource: true, FileReader: true, FontFaceSet: true, Gyroscope: true, XMLHttpRequest: true, XMLHttpRequestEventTarget: true, XMLHttpRequestUpload: true, LinearAccelerationSensor: true, Magnetometer: true, MediaDevices: true, MediaKeySession: true, MediaQueryList: true, MediaRecorder: true, MediaSource: true, MediaStream: true, MediaStreamTrack: true, MessagePort: true, MIDIAccess: true, MIDIInput: true, MIDIOutput: true, MIDIPort: true, NetworkInformation: true, Notification: true, OffscreenCanvas: true, OrientationSensor: true, PaymentRequest: true, Performance: true, PermissionStatus: true, PresentationAvailability: true, PresentationConnection: true, PresentationConnectionList: true, PresentationRequest: true, RelativeOrientationSensor: true, RemotePlayback: true, RTCDataChannel: true, DataChannel: true, RTCDTMFSender: true, RTCPeerConnection: true, webkitRTCPeerConnection: true, mozRTCPeerConnection: true, ScreenOrientation: true, Sensor: true, ServiceWorker: true, ServiceWorkerContainer: true, ServiceWorkerGlobalScope: true, ServiceWorkerRegistration: true, SharedWorker: true, SharedWorkerGlobalScope: true, SpeechRecognition: true, SpeechSynthesis: true, SpeechSynthesisUtterance: true, VR: true, VRDevice: true, VRDisplay: true, VRSession: true, VisualViewport: true, WebSocket: true, Window: true, DOMWindow: true, Worker: true, WorkerGlobalScope: true, WorkerPerformance: true, BluetoothDevice: true, BluetoothRemoteGATTCharacteristic: true, Clipboard: true, MojoInterfaceInterceptor: true, USB: true, IDBDatabase: true, IDBOpenDBRequest: true, IDBVersionChangeRequest: true, IDBRequest: true, IDBTransaction: true, AnalyserNode: true, RealtimeAnalyserNode: true, AudioBufferSourceNode: true, AudioDestinationNode: true, AudioNode: true, AudioScheduledSourceNode: true, AudioWorkletNode: true, BiquadFilterNode: true, ChannelMergerNode: true, AudioChannelMerger: true, ChannelSplitterNode: true, AudioChannelSplitter: true, ConstantSourceNode: true, ConvolverNode: true, DelayNode: true, DynamicsCompressorNode: true, GainNode: true, AudioGainNode: true, IIRFilterNode: true, MediaElementAudioSourceNode: true, MediaStreamAudioDestinationNode: true, MediaStreamAudioSourceNode: true, OscillatorNode: true, Oscillator: true, PannerNode: true, AudioPannerNode: true, webkitAudioPannerNode: true, ScriptProcessorNode: true, JavaScriptAudioNode: true, StereoPannerNode: true, WaveShaperNode: true, EventTarget: false, File: true, FileList: true, FileWriter: true, HTMLFormElement: true, Gamepad: true, History: true, HTMLCollection: true, HTMLFormControlsCollection: true, HTMLOptionsCollection: true, InterventionReport: true, Location: true, MediaError: true, MediaKeyMessageEvent: true, MediaList: true, MIDIInputMap: true, MIDIOutputMap: true, MimeType: true, MimeTypeArray: true, NavigatorUserMediaError: true, Document: true, DocumentFragment: true, HTMLDocument: true, ShadowRoot: true, XMLDocument: true, Attr: true, DocumentType: true, Node: false, NodeList: true, RadioNodeList: true, OverconstrainedError: true, Plugin: true, PluginArray: true, PositionError: true, PresentationConnectionCloseEvent: true, ReportBody: false, RTCStatsReport: true, HTMLSelectElement: true, SourceBuffer: true, SourceBufferList: true, SpeechGrammar: true, SpeechGrammarList: true, SpeechRecognitionError: true, SpeechRecognitionResult: true, Storage: true, CSSStyleSheet: true, StyleSheet: true, TextTrack: true, TextTrackCue: true, VTTCue: true, TextTrackCueList: true, TextTrackList: true, TimeRanges: true, Touch: true, TouchList: true, TrackDefaultList: true, URL: true, VideoTrackList: true, CSSRuleList: true, ClientRect: true, DOMRect: true, GamepadList: true, NamedNodeMap: true, MozNamedAttrMap: true, SpeechRecognitionResultList: true, StyleSheetList: true, SVGLength: true, SVGLengthList: true, SVGNumber: true, SVGNumberList: true, SVGPointList: true, SVGStringList: true, SVGTransform: true, SVGTransformList: true, AudioBuffer: true, AudioParamMap: true, AudioTrackList: true, AudioContext: true, webkitAudioContext: true, BaseAudioContext: false, OfflineAudioContext: true, SQLError: true, SQLResultSetRowList: true});
    H.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
    W._SourceBufferList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
    W._TextTrackList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
  })();
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = function(args) {
      return F.main(H.convertMainArgumentList(args));
    };
    if (typeof dartMainRunner === "function")
      dartMainRunner(callMain, []);
    else
      callMain([]);
  });
})();

//# sourceMappingURL=main.js.map
